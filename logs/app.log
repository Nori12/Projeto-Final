2021-04-08 03:17:58,936:INFO:__main__:Program started.
2021-04-08 03:17:58,936:INFO:__main__:Reading config file.
2021-04-08 03:17:58,936:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-08 03:17:58,937:DEBUG:utils:File found.
2021-04-08 03:17:58,937:DEBUG:utils:The function 'read_cfg' took 0.60 milliseconds to run.
2021-04-08 03:17:58,949:DEBUG:utils:The function 'get_ticker_data' took 12.17 milliseconds to run.
2021-04-08 03:17:58,950:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-08 03:17:58,950:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-08 03:19:46,523:INFO:__main__:Program started.
2021-04-08 03:19:46,523:INFO:__main__:Reading config file.
2021-04-08 03:19:46,523:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-08 03:19:46,524:DEBUG:utils:File found.
2021-04-08 03:19:46,524:DEBUG:utils:The function 'read_cfg' took 0.34 milliseconds to run.
2021-04-08 03:19:46,533:DEBUG:utils:The function 'get_ticker_data' took 9.76 milliseconds to run.
2021-04-08 03:19:46,534:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-08 03:19:46,534:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 18:33:11,732:INFO:__main__:Program started.
2021-04-10 18:33:11,732:INFO:__main__:Reading config file.
2021-04-10 18:33:11,733:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 18:33:11,733:DEBUG:utils:File found.
2021-04-10 18:33:11,733:DEBUG:utils:The function 'read_cfg' took 0.50 milliseconds to run.
2021-04-10 18:33:11,739:DEBUG:utils:The function 'get_ticker_data' took 6.07 milliseconds to run.
2021-04-10 18:33:11,740:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 18:33:11,740:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 18:43:20,654:INFO:__main__:Program started.
2021-04-10 18:43:20,655:INFO:__main__:Reading config file.
2021-04-10 18:43:20,655:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 18:43:20,655:DEBUG:utils:File found.
2021-04-10 18:43:20,656:DEBUG:utils:The function 'read_cfg' took 0.41 milliseconds to run.
2021-04-10 18:43:20,661:DEBUG:utils:The function 'get_ticker_data' took 5.60 milliseconds to run.
2021-04-10 18:43:20,661:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 18:43:20,662:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 19:39:03,204:INFO:__main__:Program started.
2021-04-10 19:39:03,205:INFO:__main__:Reading config file.
2021-04-10 19:39:03,205:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 19:39:03,206:DEBUG:utils:File found.
2021-04-10 19:39:03,206:DEBUG:utils:The function 'read_cfg' took 0.85 milliseconds to run.
2021-04-10 19:39:03,212:DEBUG:utils:The function 'get_ticker_data' took 6.24 milliseconds to run.
2021-04-10 19:39:03,212:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 19:39:03,213:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 19:40:15,042:INFO:__main__:Program started.
2021-04-10 19:40:15,043:INFO:__main__:Reading config file.
2021-04-10 19:40:15,043:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 19:40:15,043:DEBUG:utils:File found.
2021-04-10 19:40:15,043:DEBUG:utils:The function 'read_cfg' took 0.42 milliseconds to run.
2021-04-10 19:40:15,050:DEBUG:utils:The function 'get_ticker_data' took 6.68 milliseconds to run.
2021-04-10 19:40:15,050:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 19:40:15,050:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 19:40:44,921:INFO:__main__:Program started.
2021-04-10 19:40:44,921:INFO:__main__:Reading config file.
2021-04-10 19:40:44,921:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 19:40:44,921:DEBUG:utils:File found.
2021-04-10 19:40:44,921:DEBUG:utils:The function 'read_cfg' took 0.31 milliseconds to run.
2021-04-10 19:40:44,927:DEBUG:utils:The function 'get_ticker_data' took 5.93 milliseconds to run.
2021-04-10 19:40:44,928:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 19:40:44,928:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 19:41:07,110:INFO:__main__:Program started.
2021-04-10 19:41:07,110:INFO:__main__:Reading config file.
2021-04-10 19:41:07,110:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 19:41:07,110:DEBUG:utils:File found.
2021-04-10 19:41:07,111:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-04-10 19:41:07,116:DEBUG:utils:The function 'get_ticker_data' took 5.49 milliseconds to run.
2021-04-10 19:41:07,116:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 19:41:07,116:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 19:41:53,641:INFO:__main__:Program started.
2021-04-10 19:41:53,641:INFO:__main__:Reading config file.
2021-04-10 19:41:53,641:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 19:41:53,641:DEBUG:utils:File found.
2021-04-10 19:41:53,641:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-10 19:41:53,647:DEBUG:utils:The function 'get_ticker_data' took 5.47 milliseconds to run.
2021-04-10 19:41:53,647:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 19:41:53,647:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 19:43:16,929:INFO:__main__:Program started.
2021-04-10 19:43:16,929:INFO:__main__:Reading config file.
2021-04-10 19:43:16,929:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 19:43:16,929:DEBUG:utils:File found.
2021-04-10 19:43:16,929:DEBUG:utils:The function 'read_cfg' took 0.38 milliseconds to run.
2021-04-10 19:43:16,935:DEBUG:utils:The function 'get_ticker_data' took 5.68 milliseconds to run.
2021-04-10 19:43:16,935:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 19:43:16,935:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 19:45:08,291:INFO:__main__:Program started.
2021-04-10 19:45:08,291:INFO:__main__:Reading config file.
2021-04-10 19:45:08,291:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 19:45:08,291:DEBUG:utils:File found.
2021-04-10 19:45:08,291:DEBUG:utils:The function 'read_cfg' took 0.37 milliseconds to run.
2021-04-10 19:45:08,297:DEBUG:utils:The function 'get_ticker_data' took 5.80 milliseconds to run.
2021-04-10 19:45:08,297:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 19:45:08,298:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 19:58:51,138:INFO:__main__:Program started.
2021-04-10 19:58:51,139:INFO:__main__:Reading config file.
2021-04-10 19:58:51,140:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 19:58:51,140:DEBUG:utils:File found.
2021-04-10 19:58:51,140:DEBUG:utils:The function 'read_cfg' took 0.45 milliseconds to run.
2021-04-10 19:58:51,146:DEBUG:utils:The function 'get_ticker_data' took 5.92 milliseconds to run.
2021-04-10 19:58:51,146:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 19:58:51,146:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:00:25,637:INFO:__main__:Program started.
2021-04-10 20:00:25,638:INFO:__main__:Reading config file.
2021-04-10 20:00:25,638:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 20:00:25,638:DEBUG:utils:File found.
2021-04-10 20:00:25,639:DEBUG:utils:The function 'read_cfg' took 0.45 milliseconds to run.
2021-04-10 20:00:25,644:DEBUG:utils:The function 'get_ticker_data' took 5.58 milliseconds to run.
2021-04-10 20:00:25,644:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:00:25,645:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:00:36,500:INFO:__main__:Program started.
2021-04-10 20:00:36,501:INFO:__main__:Reading config file.
2021-04-10 20:00:36,501:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 20:00:36,501:DEBUG:utils:File found.
2021-04-10 20:00:36,501:DEBUG:utils:The function 'read_cfg' took 0.34 milliseconds to run.
2021-04-10 20:00:36,506:DEBUG:utils:The function 'get_ticker_data' took 5.39 milliseconds to run.
2021-04-10 20:00:36,507:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:00:36,507:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:08:42,624:INFO:__main__:Program started.
2021-04-10 20:08:42,625:INFO:__main__:Reading config file.
2021-04-10 20:08:42,625:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 20:08:42,625:DEBUG:utils:File found.
2021-04-10 20:08:42,625:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-10 20:08:42,631:DEBUG:utils:The function 'get_ticker_data' took 5.75 milliseconds to run.
2021-04-10 20:08:42,631:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:08:42,631:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:08:54,122:INFO:__main__:Program started.
2021-04-10 20:08:54,122:INFO:__main__:Reading config file.
2021-04-10 20:08:54,122:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 20:08:54,122:DEBUG:utils:File found.
2021-04-10 20:08:54,122:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-10 20:08:54,128:DEBUG:utils:The function 'get_ticker_data' took 5.44 milliseconds to run.
2021-04-10 20:08:54,128:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:08:54,128:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:11:19,476:INFO:__main__:Program started.
2021-04-10 20:11:19,476:INFO:__main__:Reading config file.
2021-04-10 20:11:19,476:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 20:11:19,476:DEBUG:utils:File found.
2021-04-10 20:11:19,476:DEBUG:utils:The function 'read_cfg' took 0.34 milliseconds to run.
2021-04-10 20:11:19,482:DEBUG:utils:The function 'get_ticker_data' took 5.36 milliseconds to run.
2021-04-10 20:11:19,482:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:11:19,482:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:11:28,887:INFO:__main__:Program started.
2021-04-10 20:11:28,887:INFO:__main__:Reading config file.
2021-04-10 20:11:28,887:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 20:11:28,888:DEBUG:utils:File found.
2021-04-10 20:11:28,888:DEBUG:utils:The function 'read_cfg' took 0.34 milliseconds to run.
2021-04-10 20:11:28,895:DEBUG:utils:The function 'get_ticker_data' took 7.24 milliseconds to run.
2021-04-10 20:11:28,895:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:11:28,895:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:11:51,592:INFO:__main__:Program started.
2021-04-10 20:11:51,592:INFO:__main__:Reading config file.
2021-04-10 20:11:51,593:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 20:11:51,593:DEBUG:utils:File found.
2021-04-10 20:11:51,593:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-10 20:11:51,598:DEBUG:utils:The function 'get_ticker_data' took 5.51 milliseconds to run.
2021-04-10 20:11:51,599:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:11:51,599:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:12:30,107:INFO:__main__:Program started.
2021-04-10 20:12:30,108:INFO:__main__:Reading config file.
2021-04-10 20:12:30,108:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 20:12:30,108:DEBUG:utils:File found.
2021-04-10 20:12:30,108:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-04-10 20:12:30,114:DEBUG:utils:The function 'get_ticker_data' took 5.51 milliseconds to run.
2021-04-10 20:12:30,114:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:12:30,114:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:12:45,309:INFO:__main__:Program started.
2021-04-10 20:12:45,309:INFO:__main__:Reading config file.
2021-04-10 20:12:45,309:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 20:12:45,309:DEBUG:utils:File found.
2021-04-10 20:12:45,309:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-10 20:12:45,315:DEBUG:utils:The function 'get_ticker_data' took 5.43 milliseconds to run.
2021-04-10 20:12:45,315:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:12:45,315:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:14:16,664:INFO:__main__:Program started.
2021-04-10 20:14:16,665:INFO:__main__:Reading config file.
2021-04-10 20:14:16,665:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 20:14:16,665:DEBUG:utils:File found.
2021-04-10 20:14:16,665:DEBUG:utils:The function 'read_cfg' took 0.33 milliseconds to run.
2021-04-10 20:14:16,671:DEBUG:utils:The function 'get_ticker_data' took 5.83 milliseconds to run.
2021-04-10 20:14:16,671:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:14:16,671:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:44:55,717:INFO:__main__:Program started.
2021-04-10 20:44:55,717:INFO:__main__:Reading config file.
2021-04-10 20:44:55,717:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 20:44:55,718:DEBUG:utils:File found.
2021-04-10 20:44:55,718:DEBUG:utils:The function 'read_cfg' took 0.86 milliseconds to run.
2021-04-10 20:44:55,724:DEBUG:utils:The function 'get_ticker_data' took 5.48 milliseconds to run.
2021-04-10 20:44:55,724:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 20:44:55,724:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:11:05,340:INFO:__main__:Program started.
2021-04-10 21:11:05,341:INFO:__main__:Reading config file.
2021-04-10 21:11:05,341:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:11:05,341:DEBUG:utils:File found.
2021-04-10 21:11:05,341:DEBUG:utils:The function 'read_cfg' took 0.59 milliseconds to run.
2021-04-10 21:11:05,349:DEBUG:utils:The function 'get_ticker_data' took 7.11 milliseconds to run.
2021-04-10 21:11:05,349:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:11:05,349:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:25:58,441:INFO:__main__:Program started.
2021-04-10 21:25:58,442:INFO:__main__:Reading config file.
2021-04-10 21:25:58,442:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:25:58,442:DEBUG:utils:File found.
2021-04-10 21:25:58,442:DEBUG:utils:The function 'read_cfg' took 0.44 milliseconds to run.
2021-04-10 21:25:58,449:DEBUG:utils:The function 'get_ticker_data' took 6.21 milliseconds to run.
2021-04-10 21:25:58,449:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:25:58,449:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:27:16,473:INFO:__main__:Program started.
2021-04-10 21:27:16,473:INFO:__main__:Reading config file.
2021-04-10 21:27:16,474:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:27:16,474:DEBUG:utils:File found.
2021-04-10 21:27:16,474:DEBUG:utils:The function 'read_cfg' took 0.31 milliseconds to run.
2021-04-10 21:27:16,480:DEBUG:utils:The function 'get_ticker_data' took 6.35 milliseconds to run.
2021-04-10 21:27:16,481:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:27:16,481:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:28:02,095:INFO:__main__:Program started.
2021-04-10 21:28:02,095:INFO:__main__:Reading config file.
2021-04-10 21:28:02,095:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:28:02,095:DEBUG:utils:File found.
2021-04-10 21:28:02,095:DEBUG:utils:The function 'read_cfg' took 0.36 milliseconds to run.
2021-04-10 21:28:02,101:DEBUG:utils:The function 'get_ticker_data' took 5.14 milliseconds to run.
2021-04-10 21:28:02,101:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:28:02,101:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:29:53,653:INFO:__main__:Program started.
2021-04-10 21:29:53,653:INFO:__main__:Reading config file.
2021-04-10 21:29:53,653:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:29:53,654:DEBUG:utils:File found.
2021-04-10 21:29:53,654:DEBUG:utils:The function 'read_cfg' took 0.33 milliseconds to run.
2021-04-10 21:29:53,659:DEBUG:utils:The function 'get_ticker_data' took 5.22 milliseconds to run.
2021-04-10 21:29:53,659:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:29:53,659:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:30:36,440:INFO:__main__:Program started.
2021-04-10 21:30:36,440:INFO:__main__:Reading config file.
2021-04-10 21:30:36,440:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:30:36,440:DEBUG:utils:File found.
2021-04-10 21:30:36,440:DEBUG:utils:The function 'read_cfg' took 0.33 milliseconds to run.
2021-04-10 21:30:36,446:DEBUG:utils:The function 'get_ticker_data' took 5.54 milliseconds to run.
2021-04-10 21:30:36,446:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:30:36,446:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:31:27,680:INFO:__main__:Program started.
2021-04-10 21:31:27,680:INFO:__main__:Reading config file.
2021-04-10 21:31:27,680:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:31:27,681:DEBUG:utils:File found.
2021-04-10 21:31:27,681:DEBUG:utils:The function 'read_cfg' took 0.30 milliseconds to run.
2021-04-10 21:31:27,686:DEBUG:utils:The function 'get_ticker_data' took 5.15 milliseconds to run.
2021-04-10 21:31:27,686:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:31:27,686:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:33:16,174:INFO:__main__:Program started.
2021-04-10 21:33:16,175:INFO:__main__:Reading config file.
2021-04-10 21:33:16,176:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:33:16,176:DEBUG:utils:File found.
2021-04-10 21:33:16,176:DEBUG:utils:The function 'read_cfg' took 0.47 milliseconds to run.
2021-04-10 21:33:16,182:DEBUG:utils:The function 'get_ticker_data' took 5.73 milliseconds to run.
2021-04-10 21:33:16,182:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:33:16,182:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:33:34,410:INFO:__main__:Program started.
2021-04-10 21:33:34,410:INFO:__main__:Reading config file.
2021-04-10 21:33:34,410:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:33:34,410:DEBUG:utils:File found.
2021-04-10 21:33:34,411:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-04-10 21:33:34,416:DEBUG:utils:The function 'get_ticker_data' took 5.35 milliseconds to run.
2021-04-10 21:33:34,416:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:33:34,416:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:33:53,205:INFO:__main__:Program started.
2021-04-10 21:33:53,205:INFO:__main__:Reading config file.
2021-04-10 21:33:53,205:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:33:53,205:DEBUG:utils:File found.
2021-04-10 21:33:53,206:DEBUG:utils:The function 'read_cfg' took 0.31 milliseconds to run.
2021-04-10 21:33:53,211:DEBUG:utils:The function 'get_ticker_data' took 5.13 milliseconds to run.
2021-04-10 21:33:53,211:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:33:53,211:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:36:21,167:INFO:__main__:Program started.
2021-04-10 21:36:21,167:INFO:__main__:Reading config file.
2021-04-10 21:36:21,167:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:36:21,168:DEBUG:utils:File found.
2021-04-10 21:36:21,168:DEBUG:utils:The function 'read_cfg' took 0.34 milliseconds to run.
2021-04-10 21:36:21,173:DEBUG:utils:The function 'get_ticker_data' took 5.52 milliseconds to run.
2021-04-10 21:36:21,174:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:36:21,174:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:36:26,047:INFO:__main__:Program started.
2021-04-10 21:36:26,047:INFO:__main__:Reading config file.
2021-04-10 21:36:26,047:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:36:26,047:DEBUG:utils:File found.
2021-04-10 21:36:26,047:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-10 21:36:26,053:DEBUG:utils:The function 'get_ticker_data' took 5.77 milliseconds to run.
2021-04-10 21:36:26,054:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:36:26,054:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:37:08,953:INFO:__main__:Program started.
2021-04-10 21:37:08,953:INFO:__main__:Reading config file.
2021-04-10 21:37:08,953:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:37:08,954:DEBUG:utils:File found.
2021-04-10 21:37:08,954:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-10 21:37:08,959:DEBUG:utils:The function 'get_ticker_data' took 5.35 milliseconds to run.
2021-04-10 21:37:08,959:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:37:08,959:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:38:22,823:INFO:__main__:Program started.
2021-04-10 21:38:22,823:INFO:__main__:Reading config file.
2021-04-10 21:38:22,823:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:38:22,823:DEBUG:utils:File found.
2021-04-10 21:38:22,823:DEBUG:utils:The function 'read_cfg' took 0.30 milliseconds to run.
2021-04-10 21:38:22,828:DEBUG:utils:The function 'get_ticker_data' took 5.14 milliseconds to run.
2021-04-10 21:38:22,829:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:38:22,829:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:41:52,507:INFO:__main__:Program started.
2021-04-10 21:41:52,508:INFO:__main__:Reading config file.
2021-04-10 21:41:52,508:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:41:52,508:DEBUG:utils:File found.
2021-04-10 21:41:52,508:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-10 21:41:52,513:DEBUG:utils:The function 'get_ticker_data' took 5.40 milliseconds to run.
2021-04-10 21:41:52,514:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:41:52,514:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:44:47,931:INFO:__main__:Program started.
2021-04-10 21:44:47,931:INFO:__main__:Reading config file.
2021-04-10 21:44:47,931:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:44:47,932:DEBUG:utils:File found.
2021-04-10 21:44:47,932:DEBUG:utils:The function 'read_cfg' took 0.90 milliseconds to run.
2021-04-10 21:44:47,939:DEBUG:utils:The function 'get_ticker_data' took 6.17 milliseconds to run.
2021-04-10 21:44:47,939:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:44:47,939:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:45:22,454:INFO:__main__:Program started.
2021-04-10 21:45:22,454:INFO:__main__:Reading config file.
2021-04-10 21:45:22,454:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:45:22,454:DEBUG:utils:File found.
2021-04-10 21:45:22,454:DEBUG:utils:The function 'read_cfg' took 0.31 milliseconds to run.
2021-04-10 21:45:22,459:DEBUG:utils:The function 'get_ticker_data' took 5.08 milliseconds to run.
2021-04-10 21:45:22,460:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:45:22,460:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:45:42,782:INFO:__main__:Program started.
2021-04-10 21:45:42,782:INFO:__main__:Reading config file.
2021-04-10 21:45:42,783:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:45:42,783:DEBUG:utils:File found.
2021-04-10 21:45:42,783:DEBUG:utils:The function 'read_cfg' took 0.63 milliseconds to run.
2021-04-10 21:45:42,790:DEBUG:utils:The function 'get_ticker_data' took 6.28 milliseconds to run.
2021-04-10 21:45:42,790:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:45:42,790:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:45:59,360:INFO:__main__:Program started.
2021-04-10 21:45:59,360:INFO:__main__:Reading config file.
2021-04-10 21:45:59,360:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:45:59,361:DEBUG:utils:File found.
2021-04-10 21:45:59,361:DEBUG:utils:The function 'read_cfg' took 0.77 milliseconds to run.
2021-04-10 21:45:59,367:DEBUG:utils:The function 'get_ticker_data' took 5.58 milliseconds to run.
2021-04-10 21:45:59,367:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:45:59,367:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:55:24,122:INFO:__main__:Program started.
2021-04-10 21:55:24,123:INFO:__main__:Reading config file.
2021-04-10 21:55:24,123:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:55:24,123:DEBUG:utils:File found.
2021-04-10 21:55:24,124:DEBUG:utils:The function 'read_cfg' took 0.61 milliseconds to run.
2021-04-10 21:55:24,130:DEBUG:utils:The function 'get_ticker_data' took 6.36 milliseconds to run.
2021-04-10 21:55:24,130:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:55:24,130:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:57:26,064:INFO:__main__:Program started.
2021-04-10 21:57:26,064:INFO:__main__:Reading config file.
2021-04-10 21:57:26,064:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:57:26,065:DEBUG:utils:File found.
2021-04-10 21:57:26,065:DEBUG:utils:The function 'read_cfg' took 0.56 milliseconds to run.
2021-04-10 21:57:26,077:DEBUG:utils:The function 'get_ticker_data' took 11.64 milliseconds to run.
2021-04-10 21:57:26,077:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:57:26,080:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:57:31,117:INFO:__main__:Program started.
2021-04-10 21:57:31,117:INFO:__main__:Reading config file.
2021-04-10 21:57:31,117:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:57:31,118:DEBUG:utils:File found.
2021-04-10 21:57:31,118:DEBUG:utils:The function 'read_cfg' took 0.33 milliseconds to run.
2021-04-10 21:57:31,123:DEBUG:utils:The function 'get_ticker_data' took 5.25 milliseconds to run.
2021-04-10 21:57:31,123:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:57:31,123:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:58:31,188:INFO:__main__:Program started.
2021-04-10 21:58:31,189:INFO:__main__:Reading config file.
2021-04-10 21:58:31,189:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 21:58:31,190:DEBUG:utils:File found.
2021-04-10 21:58:31,190:DEBUG:utils:The function 'read_cfg' took 0.92 milliseconds to run.
2021-04-10 21:58:31,196:DEBUG:utils:The function 'get_ticker_data' took 5.93 milliseconds to run.
2021-04-10 21:58:31,196:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:58:31,196:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 21:58:31,197:ERROR:ticker_manager:Program aborted. Input path 'huehue' does not exist or is not a folder.
2021-04-10 22:00:49,089:INFO:__main__:Program started.
2021-04-10 22:00:49,089:INFO:__main__:Reading config file.
2021-04-10 22:00:49,089:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 22:00:49,090:DEBUG:utils:File found.
2021-04-10 22:00:49,090:DEBUG:utils:The function 'read_cfg' took 0.55 milliseconds to run.
2021-04-10 22:01:24,287:INFO:__main__:Program started.
2021-04-10 22:01:24,287:INFO:__main__:Reading config file.
2021-04-10 22:01:24,288:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 22:01:24,288:DEBUG:utils:File found.
2021-04-10 22:01:24,288:DEBUG:utils:The function 'read_cfg' took 0.33 milliseconds to run.
2021-04-10 22:01:24,293:DEBUG:utils:The function 'get_ticker_config_data' took 5.42 milliseconds to run.
2021-04-10 22:01:24,294:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 22:01:24,294:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 22:01:24,294:ERROR:ticker_manager:Program aborted. Input path 'huehue' does not exist or is not a folder.
2021-04-10 22:02:21,831:INFO:__main__:Program started.
2021-04-10 22:02:21,831:INFO:__main__:Reading config file.
2021-04-10 22:02:21,831:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-10 22:02:21,832:DEBUG:utils:File found.
2021-04-10 22:02:21,832:DEBUG:utils:The function 'read_cfg' took 0.33 milliseconds to run.
2021-04-10 22:02:21,837:DEBUG:utils:The function 'get_ticker_config_data' took 5.40 milliseconds to run.
2021-04-10 22:02:21,837:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-10 22:02:21,837:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 01:36:00,282:INFO:__main__:Program started.
2021-04-11 01:36:00,283:INFO:__main__:Reading config file.
2021-04-11 01:36:00,283:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 01:36:00,284:DEBUG:utils:File found.
2021-04-11 01:36:00,284:DEBUG:utils:The function 'read_cfg' took 0.92 milliseconds to run.
2021-04-11 01:36:00,290:DEBUG:utils:The function 'get_ticker_config_data' took 6.10 milliseconds to run.
2021-04-11 01:36:00,291:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 01:36:00,291:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 01:36:59,359:INFO:__main__:Program started.
2021-04-11 01:36:59,359:INFO:__main__:Reading config file.
2021-04-11 01:36:59,360:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 01:36:59,360:DEBUG:utils:File found.
2021-04-11 01:36:59,360:DEBUG:utils:The function 'read_cfg' took 0.37 milliseconds to run.
2021-04-11 01:36:59,366:DEBUG:utils:The function 'get_ticker_config_data' took 5.68 milliseconds to run.
2021-04-11 01:36:59,366:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 01:36:59,366:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 01:38:20,901:INFO:__main__:Program started.
2021-04-11 01:38:20,901:INFO:__main__:Reading config file.
2021-04-11 01:38:20,901:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 01:38:20,901:DEBUG:utils:File found.
2021-04-11 01:38:20,901:DEBUG:utils:The function 'read_cfg' took 0.33 milliseconds to run.
2021-04-11 01:38:20,906:DEBUG:utils:The function 'get_ticker_config_data' took 5.13 milliseconds to run.
2021-04-11 01:38:20,907:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 01:38:20,907:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 01:39:06,609:INFO:__main__:Program started.
2021-04-11 01:39:06,609:INFO:__main__:Reading config file.
2021-04-11 01:39:06,609:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 01:39:06,610:DEBUG:utils:File found.
2021-04-11 01:39:06,610:DEBUG:utils:The function 'read_cfg' took 0.59 milliseconds to run.
2021-04-11 01:39:06,618:DEBUG:utils:The function 'get_ticker_config_data' took 7.89 milliseconds to run.
2021-04-11 01:39:06,618:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 01:39:06,618:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 01:40:34,627:INFO:__main__:Program started.
2021-04-11 01:40:34,627:INFO:__main__:Reading config file.
2021-04-11 01:40:34,627:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 01:40:34,627:DEBUG:utils:File found.
2021-04-11 01:40:34,627:DEBUG:utils:The function 'read_cfg' took 0.31 milliseconds to run.
2021-04-11 01:40:34,633:DEBUG:utils:The function 'get_ticker_config_data' took 5.40 milliseconds to run.
2021-04-11 01:40:34,633:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 01:40:34,633:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 01:40:41,683:INFO:__main__:Program started.
2021-04-11 01:40:41,683:INFO:__main__:Reading config file.
2021-04-11 01:40:41,683:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 01:40:41,684:DEBUG:utils:File found.
2021-04-11 01:40:41,684:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-04-11 01:40:41,691:DEBUG:utils:The function 'get_ticker_config_data' took 6.94 milliseconds to run.
2021-04-11 01:40:41,691:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 01:40:41,691:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 01:43:14,752:INFO:__main__:Program started.
2021-04-11 01:43:14,752:INFO:__main__:Reading config file.
2021-04-11 01:43:14,752:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 01:43:14,752:DEBUG:utils:File found.
2021-04-11 01:43:14,753:DEBUG:utils:The function 'read_cfg' took 0.31 milliseconds to run.
2021-04-11 01:43:14,758:DEBUG:utils:The function 'get_ticker_config_data' took 5.77 milliseconds to run.
2021-04-11 01:43:14,759:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 01:43:14,759:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 01:44:21,312:INFO:__main__:Program started.
2021-04-11 01:44:21,312:INFO:__main__:Reading config file.
2021-04-11 01:44:21,312:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 01:44:21,312:DEBUG:utils:File found.
2021-04-11 01:44:21,313:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-11 01:44:21,318:DEBUG:utils:The function 'get_ticker_config_data' took 5.64 milliseconds to run.
2021-04-11 01:44:21,319:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 01:44:21,319:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:01:44,625:INFO:__main__:Program started.
2021-04-11 02:01:44,625:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:01:44,625:DEBUG:utils:File found.
2021-04-11 02:01:44,625:DEBUG:utils:The function 'read_cfg' took 0.34 milliseconds to run.
2021-04-11 02:01:44,630:DEBUG:utils:The function 'get_ticker_config_data' took 5.03 milliseconds to run.
2021-04-11 02:01:44,630:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:01:44,630:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:02:42,494:INFO:__main__:Program started.
2021-04-11 02:02:42,495:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:02:42,495:DEBUG:utils:File found.
2021-04-11 02:02:42,495:DEBUG:utils:The function 'read_cfg' took 0.34 milliseconds to run.
2021-04-11 02:02:42,500:DEBUG:utils:The function 'get_ticker_config_data' took 5.17 milliseconds to run.
2021-04-11 02:02:42,500:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:02:42,500:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:02:56,744:INFO:__main__:Program started.
2021-04-11 02:02:56,745:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:02:56,745:DEBUG:utils:File found.
2021-04-11 02:02:56,745:DEBUG:utils:The function 'read_cfg' took 0.34 milliseconds to run.
2021-04-11 02:02:56,751:DEBUG:utils:The function 'get_ticker_config_data' took 6.18 milliseconds to run.
2021-04-11 02:02:56,751:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:02:56,752:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:04:06,070:INFO:__main__:Program started.
2021-04-11 02:04:06,070:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:04:06,070:DEBUG:utils:File found.
2021-04-11 02:04:06,070:DEBUG:utils:The function 'read_cfg' took 0.36 milliseconds to run.
2021-04-11 02:04:06,076:DEBUG:utils:The function 'get_ticker_config_data' took 5.35 milliseconds to run.
2021-04-11 02:04:06,076:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:04:06,076:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:04:33,737:INFO:__main__:Program started.
2021-04-11 02:04:33,737:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:04:33,738:DEBUG:utils:File found.
2021-04-11 02:04:33,738:DEBUG:utils:The function 'read_cfg' took 0.33 milliseconds to run.
2021-04-11 02:04:33,743:DEBUG:utils:The function 'get_ticker_config_data' took 5.49 milliseconds to run.
2021-04-11 02:04:33,744:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:04:33,744:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:05:03,864:INFO:__main__:Program started.
2021-04-11 02:05:03,864:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:05:03,864:DEBUG:utils:File found.
2021-04-11 02:05:03,864:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-04-11 02:05:03,869:DEBUG:utils:The function 'get_ticker_config_data' took 5.17 milliseconds to run.
2021-04-11 02:05:03,870:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:05:03,870:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:06:49,147:INFO:__main__:Program started.
2021-04-11 02:06:49,148:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:06:49,148:DEBUG:utils:File found.
2021-04-11 02:06:49,148:DEBUG:utils:The function 'read_cfg' took 0.36 milliseconds to run.
2021-04-11 02:06:49,153:DEBUG:utils:The function 'get_ticker_config_data' took 5.25 milliseconds to run.
2021-04-11 02:06:49,153:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:06:49,154:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:08:19,597:INFO:__main__:Program started.
2021-04-11 02:08:19,598:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:08:19,598:DEBUG:utils:File found.
2021-04-11 02:08:19,598:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-11 02:08:19,604:DEBUG:utils:The function 'get_ticker_config_data' took 5.74 milliseconds to run.
2021-04-11 02:08:19,604:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:08:19,604:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:08:23,997:INFO:__main__:Program started.
2021-04-11 02:08:23,997:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:08:23,997:DEBUG:utils:File found.
2021-04-11 02:08:23,998:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-11 02:08:24,005:DEBUG:utils:The function 'get_ticker_config_data' took 6.86 milliseconds to run.
2021-04-11 02:08:24,005:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:08:24,005:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:09:12,788:INFO:__main__:Program started.
2021-04-11 02:09:12,789:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:09:12,789:DEBUG:utils:File found.
2021-04-11 02:09:12,789:DEBUG:utils:The function 'read_cfg' took 0.58 milliseconds to run.
2021-04-11 02:09:12,795:DEBUG:utils:The function 'get_ticker_config_data' took 5.43 milliseconds to run.
2021-04-11 02:09:12,795:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:09:12,795:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:09:50,367:INFO:__main__:Program started.
2021-04-11 02:09:50,367:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:09:50,367:DEBUG:utils:File found.
2021-04-11 02:09:50,367:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-04-11 02:09:50,373:DEBUG:utils:The function 'get_ticker_config_data' took 5.17 milliseconds to run.
2021-04-11 02:09:50,373:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:09:50,373:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:09:50,375:DEBUG:ticker_manager:'MGLU3' major interval status is 'False'
2021-04-11 02:09:50,375:DEBUG:ticker_manager:'MGLU3' main interval status is 'False'
2021-04-11 02:09:50,375:DEBUG:ticker_manager:'MGLU3' minor interval status is 'False'
2021-04-11 02:09:50,376:DEBUG:ticker_manager:'BOVA11' major interval status is 'False'
2021-04-11 02:09:50,377:DEBUG:ticker_manager:'BOVA11' main interval status is 'False'
2021-04-11 02:09:50,377:DEBUG:ticker_manager:'BOVA11' minor interval status is 'False'
2021-04-11 02:10:27,443:INFO:__main__:Program started.
2021-04-11 02:10:27,443:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:10:27,444:DEBUG:utils:File found.
2021-04-11 02:10:27,444:DEBUG:utils:The function 'read_cfg' took 0.34 milliseconds to run.
2021-04-11 02:10:27,449:DEBUG:utils:The function 'get_ticker_config_data' took 5.16 milliseconds to run.
2021-04-11 02:10:27,449:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:10:27,449:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:10:27,451:DEBUG:ticker_manager:'MGLU3' major interval status is 'False'
2021-04-11 02:10:27,451:DEBUG:ticker_manager:'MGLU3' main interval status is 'True'
2021-04-11 02:10:27,451:DEBUG:ticker_manager:'MGLU3' minor interval status is 'False'
2021-04-11 02:10:27,453:DEBUG:ticker_manager:'BOVA11' major interval status is 'False'
2021-04-11 02:10:27,453:DEBUG:ticker_manager:'BOVA11' main interval status is 'False'
2021-04-11 02:10:27,453:DEBUG:ticker_manager:'BOVA11' minor interval status is 'False'
2021-04-11 02:10:57,397:INFO:__main__:Program started.
2021-04-11 02:10:57,397:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:10:57,397:DEBUG:utils:File found.
2021-04-11 02:10:57,397:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-11 02:10:57,402:DEBUG:utils:The function 'get_ticker_config_data' took 5.01 milliseconds to run.
2021-04-11 02:10:57,403:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:10:57,403:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:10:57,405:DEBUG:ticker_manager:'MGLU3' major interval status is 'True'
2021-04-11 02:10:57,405:DEBUG:ticker_manager:'MGLU3' main interval status is 'True'
2021-04-11 02:10:57,405:DEBUG:ticker_manager:'MGLU3' minor interval status is 'True'
2021-04-11 02:10:57,407:DEBUG:ticker_manager:'BOVA11' major interval status is 'True'
2021-04-11 02:10:57,407:DEBUG:ticker_manager:'BOVA11' main interval status is 'True'
2021-04-11 02:10:57,407:DEBUG:ticker_manager:'BOVA11' minor interval status is 'True'
2021-04-11 02:14:08,630:INFO:__main__:Program started.
2021-04-11 02:14:08,630:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:14:08,630:DEBUG:utils:File found.
2021-04-11 02:14:08,630:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-11 02:14:08,636:DEBUG:utils:The function 'get_ticker_config_data' took 5.13 milliseconds to run.
2021-04-11 02:14:08,636:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:14:08,636:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:14:08,638:DEBUG:ticker_manager:'MGLU3' major interval status is 'True'
2021-04-11 02:14:08,638:DEBUG:ticker_manager:'MGLU3' main interval status is 'True'
2021-04-11 02:14:08,638:DEBUG:ticker_manager:'MGLU3' minor interval status is 'True'
2021-04-11 02:14:08,639:DEBUG:utils:The function 'analyze_output_candles' took 2.25 milliseconds to run.
2021-04-11 02:14:08,641:DEBUG:ticker_manager:'BOVA11' major interval status is 'True'
2021-04-11 02:14:08,641:DEBUG:ticker_manager:'BOVA11' main interval status is 'True'
2021-04-11 02:14:08,641:DEBUG:ticker_manager:'BOVA11' minor interval status is 'True'
2021-04-11 02:14:08,641:DEBUG:utils:The function 'analyze_output_candles' took 2.66 milliseconds to run.
2021-04-11 02:22:49,568:INFO:__main__:Program started.
2021-04-11 02:22:49,568:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:22:49,568:DEBUG:utils:File found.
2021-04-11 02:22:49,569:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-04-11 02:22:49,576:DEBUG:utils:The function 'get_ticker_config_data' took 7.13 milliseconds to run.
2021-04-11 02:22:49,576:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:22:49,576:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:22:49,578:DEBUG:ticker_manager:'MGLU3' major interval output file was  found.
2021-04-11 02:22:49,578:DEBUG:ticker_manager:'MGLU3' main interval output file was  found.
2021-04-11 02:22:49,578:DEBUG:ticker_manager:'MGLU3' minor interval output file was  found.
2021-04-11 02:22:49,578:DEBUG:utils:The function 'analyze_output_candles' took 1.97 milliseconds to run.
2021-04-11 02:22:49,583:DEBUG:ticker_manager:'BOVA11' major interval output file was  found.
2021-04-11 02:22:49,583:DEBUG:ticker_manager:'BOVA11' main interval output file was  found.
2021-04-11 02:22:49,583:DEBUG:ticker_manager:'BOVA11' minor interval output file was  found.
2021-04-11 02:22:49,584:DEBUG:utils:The function 'analyze_output_candles' took 5.20 milliseconds to run.
2021-04-11 02:24:42,612:INFO:__main__:Program started.
2021-04-11 02:24:42,612:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:24:42,612:DEBUG:utils:File found.
2021-04-11 02:24:42,612:DEBUG:utils:The function 'read_cfg' took 0.48 milliseconds to run.
2021-04-11 02:24:42,618:DEBUG:utils:The function 'get_ticker_config_data' took 5.51 milliseconds to run.
2021-04-11 02:24:42,618:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:24:42,618:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:24:42,620:DEBUG:ticker_manager:'MGLU3' major interval output file was None found.
2021-04-11 02:24:42,620:DEBUG:ticker_manager:'MGLU3' main interval output file was None found.
2021-04-11 02:24:42,620:DEBUG:ticker_manager:'MGLU3' minor interval output file was None found.
2021-04-11 02:24:42,620:DEBUG:utils:The function 'analyze_output_candles' took 2.00 milliseconds to run.
2021-04-11 02:24:42,622:DEBUG:ticker_manager:'BOVA11' major interval output file was None found.
2021-04-11 02:24:42,622:DEBUG:ticker_manager:'BOVA11' main interval output file was None found.
2021-04-11 02:24:42,622:DEBUG:ticker_manager:'BOVA11' minor interval output file was None found.
2021-04-11 02:24:42,622:DEBUG:utils:The function 'analyze_output_candles' took 1.84 milliseconds to run.
2021-04-11 02:26:03,850:INFO:__main__:Program started.
2021-04-11 02:26:03,850:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:26:03,850:DEBUG:utils:File found.
2021-04-11 02:26:03,850:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-11 02:26:03,855:DEBUG:utils:The function 'get_ticker_config_data' took 5.00 milliseconds to run.
2021-04-11 02:26:03,855:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:26:03,856:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:26:03,857:DEBUG:ticker_manager:'MGLU3' major interval output file was  found.
2021-04-11 02:26:03,857:DEBUG:ticker_manager:'MGLU3' main interval output file was  found.
2021-04-11 02:26:03,858:DEBUG:ticker_manager:'MGLU3' minor interval output file was  found.
2021-04-11 02:26:03,858:DEBUG:utils:The function 'analyze_output_candles' took 1.89 milliseconds to run.
2021-04-11 02:26:03,859:DEBUG:ticker_manager:'BOVA11' major interval output file was  found.
2021-04-11 02:26:03,859:DEBUG:ticker_manager:'BOVA11' main interval output file was  found.
2021-04-11 02:26:03,859:DEBUG:ticker_manager:'BOVA11' minor interval output file was  found.
2021-04-11 02:26:03,859:DEBUG:utils:The function 'analyze_output_candles' took 1.74 milliseconds to run.
2021-04-11 02:26:56,215:INFO:__main__:Program started.
2021-04-11 02:26:56,215:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:26:56,215:DEBUG:utils:File found.
2021-04-11 02:26:56,215:DEBUG:utils:The function 'read_cfg' took 0.33 milliseconds to run.
2021-04-11 02:26:56,222:DEBUG:utils:The function 'get_ticker_config_data' took 6.34 milliseconds to run.
2021-04-11 02:26:56,222:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:26:56,222:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:26:56,224:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 02:26:56,224:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 02:26:56,224:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 02:26:56,224:DEBUG:utils:The function 'analyze_output_candles' took 1.99 milliseconds to run.
2021-04-11 02:26:56,226:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 02:26:56,226:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 02:26:56,226:DEBUG:ticker_manager:'BOVA11' minor interval output file was found.
2021-04-11 02:26:56,226:DEBUG:utils:The function 'analyze_output_candles' took 1.86 milliseconds to run.
2021-04-11 02:27:12,071:INFO:__main__:Program started.
2021-04-11 02:27:12,071:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:27:12,071:DEBUG:utils:File found.
2021-04-11 02:27:12,071:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-04-11 02:27:12,077:DEBUG:utils:The function 'get_ticker_config_data' took 5.19 milliseconds to run.
2021-04-11 02:27:12,077:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:27:12,077:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:27:12,079:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 02:27:12,079:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 02:27:12,079:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 02:27:12,079:DEBUG:utils:The function 'analyze_output_candles' took 1.96 milliseconds to run.
2021-04-11 02:27:12,081:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 02:27:12,081:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 02:27:12,081:DEBUG:ticker_manager:'BOVA11' minor interval output file was NOT found.
2021-04-11 02:27:12,081:DEBUG:utils:The function 'analyze_output_candles' took 1.77 milliseconds to run.
2021-04-11 02:29:47,329:INFO:__main__:Program started.
2021-04-11 02:29:47,329:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:29:47,329:DEBUG:utils:File found.
2021-04-11 02:29:47,329:DEBUG:utils:The function 'read_cfg' took 0.36 milliseconds to run.
2021-04-11 02:29:47,335:DEBUG:utils:The function 'get_ticker_config_data' took 5.24 milliseconds to run.
2021-04-11 02:29:47,335:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:29:47,335:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:29:47,337:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 02:29:47,337:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 02:29:47,337:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 02:29:47,337:DEBUG:utils:The function 'analyze_output_candles' took 1.95 milliseconds to run.
2021-04-11 02:29:47,339:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 02:29:47,339:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 02:29:47,339:DEBUG:ticker_manager:'BOVA11' minor interval output file was NOT found.
2021-04-11 02:29:47,339:DEBUG:utils:The function 'analyze_output_candles' took 1.78 milliseconds to run.
2021-04-11 02:29:55,564:INFO:__main__:Program started.
2021-04-11 02:29:55,564:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:29:55,564:DEBUG:utils:File found.
2021-04-11 02:29:55,564:DEBUG:utils:The function 'read_cfg' took 0.38 milliseconds to run.
2021-04-11 02:29:55,570:DEBUG:utils:The function 'get_ticker_config_data' took 5.16 milliseconds to run.
2021-04-11 02:29:55,570:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:29:55,570:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:29:55,572:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 02:29:55,572:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 02:29:55,572:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 02:29:55,572:DEBUG:utils:The function 'analyze_output_candles' took 1.96 milliseconds to run.
2021-04-11 02:29:55,574:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 02:29:55,574:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 02:29:55,574:DEBUG:ticker_manager:'BOVA11' minor interval output file was NOT found.
2021-04-11 02:29:55,574:DEBUG:utils:The function 'analyze_output_candles' took 1.77 milliseconds to run.
2021-04-11 02:30:03,972:INFO:__main__:Program started.
2021-04-11 02:30:03,972:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:30:03,972:DEBUG:utils:File found.
2021-04-11 02:30:03,972:DEBUG:utils:The function 'read_cfg' took 0.34 milliseconds to run.
2021-04-11 02:30:03,978:DEBUG:utils:The function 'get_ticker_config_data' took 5.10 milliseconds to run.
2021-04-11 02:30:03,978:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:30:03,978:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:30:03,980:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 02:30:03,980:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 02:30:03,980:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 02:30:03,980:DEBUG:utils:The function 'analyze_output_candles' took 1.94 milliseconds to run.
2021-04-11 02:30:03,982:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 02:30:03,982:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 02:30:03,982:DEBUG:ticker_manager:'BOVA11' minor interval output file was NOT found.
2021-04-11 02:30:03,982:DEBUG:utils:The function 'analyze_output_candles' took 1.76 milliseconds to run.
2021-04-11 02:30:29,549:INFO:__main__:Program started.
2021-04-11 02:30:29,549:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:30:29,549:DEBUG:utils:File found.
2021-04-11 02:30:29,549:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-04-11 02:30:29,555:DEBUG:utils:The function 'get_ticker_config_data' took 5.68 milliseconds to run.
2021-04-11 02:30:29,555:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:30:29,555:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:30:29,557:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 02:30:29,557:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 02:30:29,557:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 02:30:29,558:DEBUG:utils:The function 'analyze_output_candles' took 2.01 milliseconds to run.
2021-04-11 02:30:29,559:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 02:30:29,559:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 02:30:29,559:DEBUG:ticker_manager:'BOVA11' minor interval output file was NOT found.
2021-04-11 02:30:29,560:DEBUG:utils:The function 'analyze_output_candles' took 1.93 milliseconds to run.
2021-04-11 02:37:08,408:INFO:__main__:Program started.
2021-04-11 02:37:08,409:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:37:08,409:DEBUG:utils:File found.
2021-04-11 02:37:08,409:DEBUG:utils:The function 'read_cfg' took 0.36 milliseconds to run.
2021-04-11 02:37:08,414:DEBUG:utils:The function 'get_ticker_config_data' took 5.40 milliseconds to run.
2021-04-11 02:37:08,415:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:37:08,415:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:37:31,729:INFO:__main__:Program started.
2021-04-11 02:37:31,729:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:37:31,729:DEBUG:utils:File found.
2021-04-11 02:37:31,729:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-11 02:37:31,734:DEBUG:utils:The function 'get_ticker_config_data' took 5.23 milliseconds to run.
2021-04-11 02:37:31,735:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:37:31,735:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:38:06,011:INFO:__main__:Program started.
2021-04-11 02:38:06,011:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:38:06,011:DEBUG:utils:File found.
2021-04-11 02:38:06,011:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-04-11 02:38:06,017:DEBUG:utils:The function 'get_ticker_config_data' took 5.52 milliseconds to run.
2021-04-11 02:38:06,017:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:38:06,017:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:38:28,361:INFO:__main__:Program started.
2021-04-11 02:38:28,361:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:38:28,362:DEBUG:utils:File found.
2021-04-11 02:38:28,362:DEBUG:utils:The function 'read_cfg' took 0.31 milliseconds to run.
2021-04-11 02:38:28,367:DEBUG:utils:The function 'get_ticker_config_data' took 5.25 milliseconds to run.
2021-04-11 02:38:28,367:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:38:28,367:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:38:50,333:INFO:__main__:Program started.
2021-04-11 02:38:50,333:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:38:50,333:DEBUG:utils:File found.
2021-04-11 02:38:50,333:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-04-11 02:38:50,339:DEBUG:utils:The function 'get_ticker_config_data' took 5.36 milliseconds to run.
2021-04-11 02:38:50,339:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:38:50,339:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:40:27,496:INFO:__main__:Program started.
2021-04-11 02:40:27,496:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:40:27,496:DEBUG:utils:File found.
2021-04-11 02:40:27,497:DEBUG:utils:The function 'read_cfg' took 0.50 milliseconds to run.
2021-04-11 02:40:27,503:DEBUG:utils:The function 'get_ticker_config_data' took 6.38 milliseconds to run.
2021-04-11 02:40:27,503:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:40:27,503:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:40:27,505:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 02:40:27,506:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 02:40:27,506:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 02:40:27,506:DEBUG:utils:The function 'analyze_output_candles' took 1.96 milliseconds to run.
2021-04-11 02:40:27,507:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 02:40:27,507:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 02:40:27,508:DEBUG:ticker_manager:'BOVA11' minor interval output file was NOT found.
2021-04-11 02:40:27,508:DEBUG:utils:The function 'analyze_output_candles' took 2.02 milliseconds to run.
2021-04-11 02:45:27,166:INFO:__main__:Program started.
2021-04-11 02:45:27,166:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:45:27,167:DEBUG:utils:File found.
2021-04-11 02:45:27,167:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-11 02:45:27,172:DEBUG:utils:The function 'get_ticker_config_data' took 5.06 milliseconds to run.
2021-04-11 02:45:27,172:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:45:27,172:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:45:27,174:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 02:45:27,174:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 02:45:27,174:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 02:45:27,174:DEBUG:utils:The function 'analyze_output_candles' took 1.96 milliseconds to run.
2021-04-11 02:45:27,176:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 02:45:27,176:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 02:45:27,176:DEBUG:ticker_manager:'BOVA11' minor interval output file was NOT found.
2021-04-11 02:45:27,176:DEBUG:utils:The function 'analyze_output_candles' took 1.74 milliseconds to run.
2021-04-11 02:46:26,712:INFO:__main__:Program started.
2021-04-11 02:46:26,712:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 02:46:26,713:DEBUG:utils:File found.
2021-04-11 02:46:26,713:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-04-11 02:46:26,718:DEBUG:utils:The function 'get_ticker_config_data' took 5.21 milliseconds to run.
2021-04-11 02:46:26,718:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:46:26,718:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 02:46:26,720:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 02:46:26,720:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 02:46:26,720:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 02:46:26,720:DEBUG:utils:The function 'analyze_output_candles' took 1.96 milliseconds to run.
2021-04-11 02:46:26,722:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 02:46:26,722:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 02:46:26,722:DEBUG:ticker_manager:'BOVA11' minor interval output file was NOT found.
2021-04-11 02:46:26,722:DEBUG:utils:The function 'analyze_output_candles' took 1.77 milliseconds to run.
2021-04-11 18:34:59,627:INFO:__main__:Program started.
2021-04-11 18:34:59,627:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 18:34:59,628:DEBUG:utils:File found.
2021-04-11 18:34:59,628:DEBUG:utils:The function 'read_cfg' took 0.38 milliseconds to run.
2021-04-11 18:34:59,635:DEBUG:utils:The function 'get_ticker_config_data' took 7.26 milliseconds to run.
2021-04-11 18:34:59,635:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 18:34:59,635:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 18:34:59,638:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 18:34:59,638:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 18:34:59,638:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 18:34:59,638:DEBUG:utils:The function 'analyze_output_candles' took 2.26 milliseconds to run.
2021-04-11 18:34:59,640:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 18:34:59,640:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 18:34:59,640:DEBUG:ticker_manager:'BOVA11' minor interval output file was found.
2021-04-11 18:34:59,640:DEBUG:utils:The function 'analyze_output_candles' took 2.03 milliseconds to run.
2021-04-11 18:35:15,559:INFO:__main__:Program started.
2021-04-11 18:35:15,559:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 18:35:15,559:DEBUG:utils:File found.
2021-04-11 18:35:15,560:DEBUG:utils:The function 'read_cfg' took 0.52 milliseconds to run.
2021-04-11 18:35:15,567:DEBUG:utils:The function 'get_ticker_config_data' took 7.45 milliseconds to run.
2021-04-11 18:35:15,567:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 18:35:15,568:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 18:35:15,571:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 18:35:15,571:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 18:35:15,572:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 18:35:15,572:DEBUG:utils:The function 'analyze_output_candles' took 3.60 milliseconds to run.
2021-04-11 18:35:15,575:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 18:35:15,575:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 18:35:15,575:DEBUG:ticker_manager:'BOVA11' minor interval output file was found.
2021-04-11 18:35:15,575:DEBUG:utils:The function 'analyze_output_candles' took 3.25 milliseconds to run.
2021-04-11 18:35:32,400:INFO:__main__:Program started.
2021-04-11 18:35:32,401:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 18:35:32,401:DEBUG:utils:File found.
2021-04-11 18:35:32,401:DEBUG:utils:The function 'read_cfg' took 0.43 milliseconds to run.
2021-04-11 18:35:32,407:DEBUG:utils:The function 'get_ticker_config_data' took 5.88 milliseconds to run.
2021-04-11 18:35:32,407:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 18:35:32,407:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 18:35:32,409:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 18:35:32,409:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 18:35:32,409:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 18:35:32,409:DEBUG:utils:The function 'analyze_output_candles' took 2.06 milliseconds to run.
2021-04-11 18:35:32,411:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 18:35:32,411:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 18:35:32,411:DEBUG:ticker_manager:'BOVA11' minor interval output file was found.
2021-04-11 18:35:32,411:DEBUG:utils:The function 'analyze_output_candles' took 1.92 milliseconds to run.
2021-04-11 19:28:41,472:INFO:__main__:Program started.
2021-04-11 19:28:41,473:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 19:28:41,474:DEBUG:utils:File found.
2021-04-11 19:28:41,474:DEBUG:utils:The function 'read_cfg' took 0.74 milliseconds to run.
2021-04-11 19:28:41,480:DEBUG:utils:The function 'get_ticker_config_data' took 6.43 milliseconds to run.
2021-04-11 19:28:41,480:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 19:28:41,481:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 19:28:41,483:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 19:28:41,483:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 19:28:41,483:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 19:28:41,483:DEBUG:utils:The function 'analyze_output_candles' took 2.05 milliseconds to run.
2021-04-11 19:28:41,485:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 19:28:41,485:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 19:28:41,485:DEBUG:ticker_manager:'BOVA11' minor interval output file was found.
2021-04-11 19:28:41,485:DEBUG:utils:The function 'analyze_output_candles' took 1.88 milliseconds to run.
2021-04-11 19:29:22,971:INFO:__main__:Program started.
2021-04-11 19:29:22,971:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 19:29:22,971:DEBUG:utils:File found.
2021-04-11 19:29:22,971:DEBUG:utils:The function 'read_cfg' took 0.65 milliseconds to run.
2021-04-11 19:29:22,980:DEBUG:utils:The function 'get_ticker_config_data' took 8.09 milliseconds to run.
2021-04-11 19:29:22,980:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 19:29:22,980:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 19:29:22,983:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 19:29:22,983:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 19:29:22,984:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 19:29:22,984:DEBUG:utils:The function 'analyze_output_candles' took 3.30 milliseconds to run.
2021-04-11 19:29:22,987:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 19:29:22,987:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 19:29:22,987:DEBUG:ticker_manager:'BOVA11' minor interval output file was found.
2021-04-11 19:29:22,987:DEBUG:utils:The function 'analyze_output_candles' took 3.15 milliseconds to run.
2021-04-11 19:29:53,731:INFO:__main__:Program started.
2021-04-11 19:29:53,731:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 19:29:53,731:DEBUG:utils:File found.
2021-04-11 19:29:53,731:DEBUG:utils:The function 'read_cfg' took 0.36 milliseconds to run.
2021-04-11 19:29:53,737:DEBUG:utils:The function 'get_ticker_config_data' took 5.81 milliseconds to run.
2021-04-11 19:29:53,737:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 19:29:53,737:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 19:29:53,739:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 19:29:53,739:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 19:29:53,739:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 19:29:53,740:DEBUG:utils:The function 'analyze_output_candles' took 1.97 milliseconds to run.
2021-04-11 19:29:53,741:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 19:29:53,741:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 19:29:53,741:DEBUG:ticker_manager:'BOVA11' minor interval output file was found.
2021-04-11 19:29:53,741:DEBUG:utils:The function 'analyze_output_candles' took 1.79 milliseconds to run.
2021-04-11 19:31:01,623:INFO:__main__:Program started.
2021-04-11 19:31:01,623:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 19:31:01,624:DEBUG:utils:File found.
2021-04-11 19:31:01,624:DEBUG:utils:The function 'read_cfg' took 0.37 milliseconds to run.
2021-04-11 19:31:01,629:DEBUG:utils:The function 'get_ticker_config_data' took 5.56 milliseconds to run.
2021-04-11 19:31:01,630:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 19:31:01,630:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 19:31:01,632:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 19:31:01,632:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 19:31:01,632:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 19:31:01,632:DEBUG:utils:The function 'analyze_output_candles' took 2.05 milliseconds to run.
2021-04-11 19:31:01,634:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 19:31:01,634:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 19:31:01,634:DEBUG:ticker_manager:'BOVA11' minor interval output file was found.
2021-04-11 19:31:01,634:DEBUG:utils:The function 'analyze_output_candles' took 1.87 milliseconds to run.
2021-04-11 19:31:25,135:INFO:__main__:Program started.
2021-04-11 19:31:25,135:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 19:31:25,136:DEBUG:utils:File found.
2021-04-11 19:31:25,136:DEBUG:utils:The function 'read_cfg' took 0.36 milliseconds to run.
2021-04-11 19:31:25,144:DEBUG:utils:The function 'get_ticker_config_data' took 7.74 milliseconds to run.
2021-04-11 19:31:25,144:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 19:31:25,144:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 19:31:25,146:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 19:31:25,146:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 19:31:25,146:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 19:31:25,146:DEBUG:utils:The function 'analyze_output_candles' took 2.40 milliseconds to run.
2021-04-11 19:31:25,148:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 19:31:25,148:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 19:31:25,148:DEBUG:ticker_manager:'BOVA11' minor interval output file was found.
2021-04-11 19:31:25,148:DEBUG:utils:The function 'analyze_output_candles' took 1.85 milliseconds to run.
2021-04-11 19:32:57,125:INFO:__main__:Program started.
2021-04-11 19:32:57,125:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 19:32:57,125:DEBUG:utils:File found.
2021-04-11 19:32:57,125:DEBUG:utils:The function 'read_cfg' took 0.56 milliseconds to run.
2021-04-11 19:32:57,133:DEBUG:utils:The function 'get_ticker_config_data' took 7.21 milliseconds to run.
2021-04-11 19:32:57,133:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 19:32:57,133:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 19:32:57,136:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 19:32:57,136:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 19:32:57,136:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 19:32:57,136:DEBUG:utils:The function 'analyze_output_candles' took 2.87 milliseconds to run.
2021-04-11 19:32:57,139:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 19:32:57,139:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 19:32:57,139:DEBUG:ticker_manager:'BOVA11' minor interval output file was found.
2021-04-11 19:32:57,139:DEBUG:utils:The function 'analyze_output_candles' took 2.80 milliseconds to run.
2021-04-11 19:42:32,169:INFO:__main__:Program started.
2021-04-11 19:42:32,169:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 19:42:32,170:DEBUG:utils:File found.
2021-04-11 19:42:32,170:DEBUG:utils:The function 'read_cfg' took 0.71 milliseconds to run.
2021-04-11 19:42:32,181:DEBUG:utils:The function 'get_ticker_config_data' took 10.61 milliseconds to run.
2021-04-11 19:42:32,181:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 19:42:32,181:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 19:42:32,185:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 19:42:32,185:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 19:42:32,185:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 19:42:32,185:DEBUG:utils:The function 'analyze_output_candles' took 3.74 milliseconds to run.
2021-04-11 19:42:32,188:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 19:42:32,188:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 19:42:32,188:DEBUG:ticker_manager:'BOVA11' minor interval output file was found.
2021-04-11 19:42:32,188:DEBUG:utils:The function 'analyze_output_candles' took 2.64 milliseconds to run.
2021-04-11 23:52:19,310:INFO:__main__:Program started.
2021-04-11 23:52:19,311:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 23:52:19,312:DEBUG:utils:File found.
2021-04-11 23:52:19,312:DEBUG:utils:The function 'read_cfg' took 0.79 milliseconds to run.
2021-04-11 23:52:19,320:DEBUG:utils:The function 'get_ticker_config_data' took 8.04 milliseconds to run.
2021-04-11 23:52:19,320:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 23:52:19,320:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 23:52:19,321:ERROR:ticker_manager:Program aborted. Data source 'ticks_file' not available.
2021-04-11 23:52:27,999:INFO:__main__:Program started.
2021-04-11 23:52:27,999:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 23:52:28,000:DEBUG:utils:File found.
2021-04-11 23:52:28,000:DEBUG:utils:The function 'read_cfg' took 0.36 milliseconds to run.
2021-04-11 23:52:28,005:DEBUG:utils:The function 'get_ticker_config_data' took 5.37 milliseconds to run.
2021-04-11 23:52:28,005:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 23:52:28,005:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 23:52:28,006:ERROR:ticker_manager:Program aborted. Data source 'ticks_file' not available.
2021-04-11 23:52:59,533:INFO:__main__:Program started.
2021-04-11 23:52:59,533:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 23:52:59,533:DEBUG:utils:File found.
2021-04-11 23:52:59,533:DEBUG:utils:The function 'read_cfg' took 0.37 milliseconds to run.
2021-04-11 23:52:59,539:DEBUG:utils:The function 'get_ticker_config_data' took 5.45 milliseconds to run.
2021-04-11 23:52:59,539:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 23:52:59,539:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 23:52:59,539:ERROR:ticker_manager:Program aborted. Data source 'ticks_file' not available.
2021-04-11 23:58:02,670:INFO:__main__:Program started.
2021-04-11 23:58:02,670:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-11 23:58:02,671:DEBUG:utils:File found.
2021-04-11 23:58:02,671:DEBUG:utils:The function 'read_cfg' took 0.76 milliseconds to run.
2021-04-11 23:58:02,680:DEBUG:utils:The function 'get_ticker_config_data' took 8.76 milliseconds to run.
2021-04-11 23:58:02,680:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 23:58:02,680:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-11 23:58:02,684:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-11 23:58:02,684:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-11 23:58:02,685:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-11 23:58:02,685:DEBUG:utils:The function 'analyze_output_candles' took 4.31 milliseconds to run.
2021-04-11 23:58:02,688:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-11 23:58:02,688:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-11 23:58:02,688:DEBUG:ticker_manager:'BOVA11' minor interval output file was found.
2021-04-11 23:58:02,688:DEBUG:utils:The function 'analyze_output_candles' took 3.51 milliseconds to run.
2021-04-12 00:05:19,133:INFO:__main__:Program started.
2021-04-12 00:05:19,133:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-12 00:05:19,134:DEBUG:utils:File found.
2021-04-12 00:05:19,134:DEBUG:utils:The function 'read_cfg' took 0.40 milliseconds to run.
2021-04-12 00:05:19,139:DEBUG:utils:The function 'get_ticker_config_data' took 5.52 milliseconds to run.
2021-04-12 00:05:19,140:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-12 00:05:19,140:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-12 00:05:19,142:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-12 00:05:19,142:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-12 00:05:19,142:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-12 00:05:19,142:DEBUG:utils:The function 'analyze_output_candles' took 2.01 milliseconds to run.
2021-04-12 00:05:19,144:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-12 00:05:19,144:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-12 00:05:19,145:DEBUG:ticker_manager:'BOVA11' minor interval output file was found.
2021-04-12 00:05:19,145:DEBUG:utils:The function 'analyze_output_candles' took 2.83 milliseconds to run.
2021-04-12 00:05:29,356:INFO:__main__:Program started.
2021-04-12 00:05:29,356:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-12 00:05:29,356:DEBUG:utils:File found.
2021-04-12 00:05:29,356:DEBUG:utils:The function 'read_cfg' took 0.38 milliseconds to run.
2021-04-12 00:05:29,363:DEBUG:utils:The function 'get_ticker_config_data' took 6.45 milliseconds to run.
2021-04-12 00:05:29,363:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-12 00:05:29,363:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-12 00:05:29,365:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-12 00:05:29,365:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-12 00:05:29,365:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-12 00:05:29,365:DEBUG:utils:The function 'analyze_output_candles' took 2.14 milliseconds to run.
2021-04-12 00:05:29,368:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-12 00:05:29,368:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-12 00:05:29,368:DEBUG:ticker_manager:'BOVA11' minor interval output file was found.
2021-04-12 00:05:29,368:DEBUG:utils:The function 'analyze_output_candles' took 2.50 milliseconds to run.
2021-04-12 00:09:47,448:INFO:__main__:Program started.
2021-04-12 00:09:47,449:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-12 00:09:47,449:DEBUG:utils:File found.
2021-04-12 00:09:47,449:DEBUG:utils:The function 'read_cfg' took 0.71 milliseconds to run.
2021-04-12 00:09:47,457:DEBUG:utils:The function 'get_ticker_config_data' took 7.80 milliseconds to run.
2021-04-12 00:09:47,457:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-12 00:09:47,458:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-12 00:09:47,461:DEBUG:ticker_manager:'MGLU3' major interval output file was found.
2021-04-12 00:09:47,461:DEBUG:ticker_manager:'MGLU3' main interval output file was found.
2021-04-12 00:09:47,461:DEBUG:ticker_manager:'MGLU3' minor interval output file was found.
2021-04-12 00:09:47,461:DEBUG:utils:The function 'analyze_output_candles' took 3.06 milliseconds to run.
2021-04-12 00:09:47,464:DEBUG:ticker_manager:'BOVA11' major interval output file was found.
2021-04-12 00:09:47,464:DEBUG:ticker_manager:'BOVA11' main interval output file was found.
2021-04-12 00:09:47,464:DEBUG:ticker_manager:'BOVA11' minor interval output file was found.
2021-04-12 00:09:47,464:DEBUG:utils:The function 'analyze_output_candles' took 3.21 milliseconds to run.
2021-04-21 05:01:17,670:INFO:__main__:Program started.
2021-04-21 05:01:17,670:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-21 05:01:17,671:DEBUG:utils:File found.
2021-04-21 05:01:17,671:DEBUG:utils:The function 'read_cfg' took 0.92 milliseconds to run.
2021-04-21 05:01:17,678:DEBUG:utils:The function 'get_ticker_config_data' took 6.64 milliseconds to run.
2021-04-21 05:01:17,678:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-21 05:01:17,678:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-21 05:01:44,565:INFO:__main__:Program started.
2021-04-21 05:01:44,565:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-21 05:01:44,565:DEBUG:utils:File found.
2021-04-21 05:01:44,565:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-04-21 05:01:44,571:DEBUG:utils:The function 'get_ticker_config_data' took 5.83 milliseconds to run.
2021-04-21 05:01:44,571:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-21 05:01:44,571:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:08:06,826:INFO:__main__:Program started.
2021-04-24 01:08:06,826:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-24 01:08:06,826:DEBUG:utils:File found.
2021-04-24 01:08:06,827:DEBUG:utils:The function 'read_cfg' took 0.89 milliseconds to run.
2021-04-24 01:08:06,835:DEBUG:utils:The function 'get_ticker_config_data' took 8.08 milliseconds to run.
2021-04-24 01:08:06,835:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:08:06,835:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:08:21,598:INFO:__main__:Program started.
2021-04-24 01:08:21,598:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-24 01:08:21,599:DEBUG:utils:File found.
2021-04-24 01:08:21,599:DEBUG:utils:The function 'read_cfg' took 0.34 milliseconds to run.
2021-04-24 01:08:21,604:DEBUG:utils:The function 'get_ticker_config_data' took 5.36 milliseconds to run.
2021-04-24 01:08:21,604:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:08:21,605:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:08:21,739:DEBUG:db_model:Database '{DB_NAME}' connected successfully.
2021-04-24 01:09:10,125:INFO:__main__:Program started.
2021-04-24 01:09:10,125:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-24 01:09:10,126:DEBUG:utils:File found.
2021-04-24 01:09:10,126:DEBUG:utils:The function 'read_cfg' took 0.31 milliseconds to run.
2021-04-24 01:09:10,131:DEBUG:utils:The function 'get_ticker_config_data' took 5.28 milliseconds to run.
2021-04-24 01:09:10,131:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:09:10,131:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:09:10,204:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-04-24 01:15:15,969:INFO:__main__:Program started.
2021-04-24 01:15:15,970:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-24 01:15:15,971:DEBUG:utils:File found.
2021-04-24 01:15:15,971:DEBUG:utils:The function 'read_cfg' took 1.01 milliseconds to run.
2021-04-24 01:15:15,977:DEBUG:utils:The function 'get_ticker_config_data' took 5.94 milliseconds to run.
2021-04-24 01:15:15,977:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:15:15,977:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:15:16,098:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-04-24 01:17:28,725:INFO:__main__:Program started.
2021-04-24 01:17:28,725:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-24 01:17:28,725:DEBUG:utils:File found.
2021-04-24 01:17:28,725:DEBUG:utils:The function 'read_cfg' took 0.33 milliseconds to run.
2021-04-24 01:17:28,730:DEBUG:utils:The function 'get_ticker_config_data' took 4.89 milliseconds to run.
2021-04-24 01:17:28,730:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:17:28,730:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:17:28,804:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-04-24 01:17:54,877:INFO:__main__:Program started.
2021-04-24 01:17:54,877:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-24 01:17:54,877:DEBUG:utils:File found.
2021-04-24 01:17:54,878:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-04-24 01:17:54,883:DEBUG:utils:The function 'get_ticker_config_data' took 5.23 milliseconds to run.
2021-04-24 01:17:54,883:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:17:54,883:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:17:54,957:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-04-24 01:18:18,983:INFO:__main__:Program started.
2021-04-24 01:18:18,984:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-24 01:18:18,984:DEBUG:utils:File found.
2021-04-24 01:18:18,984:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-04-24 01:18:18,989:DEBUG:utils:The function 'get_ticker_config_data' took 5.27 milliseconds to run.
2021-04-24 01:18:18,989:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:18:18,989:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:18:19,073:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-04-24 01:18:33,826:INFO:__main__:Program started.
2021-04-24 01:18:33,827:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-24 01:18:33,827:DEBUG:utils:File found.
2021-04-24 01:18:33,827:DEBUG:utils:The function 'read_cfg' took 0.34 milliseconds to run.
2021-04-24 01:18:33,832:DEBUG:utils:The function 'get_ticker_config_data' took 5.21 milliseconds to run.
2021-04-24 01:18:33,832:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:18:33,832:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:18:33,845:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-04-24 01:19:00,853:INFO:__main__:Program started.
2021-04-24 01:19:00,853:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-04-24 01:19:00,853:DEBUG:utils:File found.
2021-04-24 01:19:00,854:DEBUG:utils:The function 'read_cfg' took 0.31 milliseconds to run.
2021-04-24 01:19:00,859:DEBUG:utils:The function 'get_ticker_config_data' took 5.03 milliseconds to run.
2021-04-24 01:19:00,859:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:19:00,859:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-04-24 01:19:00,943:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-08 14:08:50,127:INFO:__main__:Program started.
2021-05-08 14:08:50,128:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-05-08 14:08:50,128:ERROR:utils:Program aborted. Couldn't open configuration file: 'config/config.json'.
Traceback (most recent call last):
  File "/Users/atcha/Github/Projeto-Final/src/utils.py", line 62, in read_cfg
    with open(config_path, 'r') as cfg_file:
FileNotFoundError: [Errno 2] No such file or directory: 'config/config.json'
2021-05-08 14:08:50,129:DEBUG:utils:The function 'read_cfg' took 0.85 milliseconds to run.
2021-05-08 15:00:01,493:INFO:__main__:Program started.
2021-05-08 15:00:01,495:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-05-08 15:00:01,496:DEBUG:utils:File found.
2021-05-08 15:00:01,496:DEBUG:utils:The function 'read_cfg' took 1.01 milliseconds to run.
2021-05-08 15:00:01,502:DEBUG:utils:The function 'get_ticker_config_data' took 6.42 milliseconds to run.
2021-05-08 15:00:01,503:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:00:01,503:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:00:01,671:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-08 15:00:43,357:INFO:__main__:Program started.
2021-05-08 15:00:43,357:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-05-08 15:00:43,358:DEBUG:utils:File found.
2021-05-08 15:00:43,358:DEBUG:utils:The function 'read_cfg' took 0.85 milliseconds to run.
2021-05-08 15:00:43,364:DEBUG:utils:The function 'get_ticker_config_data' took 5.18 milliseconds to run.
2021-05-08 15:00:43,364:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:00:43,364:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:00:43,477:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-08 15:01:22,255:INFO:__main__:Program started.
2021-05-08 15:01:22,255:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-05-08 15:01:22,255:DEBUG:utils:File found.
2021-05-08 15:01:22,255:DEBUG:utils:The function 'read_cfg' took 0.31 milliseconds to run.
2021-05-08 15:01:22,260:DEBUG:utils:The function 'get_ticker_config_data' took 5.12 milliseconds to run.
2021-05-08 15:01:22,260:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:01:22,261:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:01:22,335:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-08 15:01:45,277:INFO:__main__:Program started.
2021-05-08 15:01:45,278:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-05-08 15:01:45,278:DEBUG:utils:File found.
2021-05-08 15:01:45,278:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-05-08 15:01:45,283:DEBUG:utils:The function 'get_ticker_config_data' took 5.06 milliseconds to run.
2021-05-08 15:01:45,283:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:01:45,283:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:01:45,365:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-08 15:03:15,392:INFO:__main__:Program started.
2021-05-08 15:03:15,392:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-05-08 15:03:15,392:DEBUG:utils:File found.
2021-05-08 15:03:15,392:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-05-08 15:03:15,397:DEBUG:utils:The function 'get_ticker_config_data' took 4.82 milliseconds to run.
2021-05-08 15:03:15,397:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:03:15,397:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:03:15,470:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-08 15:04:26,883:INFO:__main__:Program started.
2021-05-08 15:04:26,883:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-05-08 15:04:26,884:DEBUG:utils:File found.
2021-05-08 15:04:26,884:DEBUG:utils:The function 'read_cfg' took 0.82 milliseconds to run.
2021-05-08 15:04:26,889:DEBUG:utils:The function 'get_ticker_config_data' took 5.46 milliseconds to run.
2021-05-08 15:04:26,890:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:04:26,890:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:04:27,004:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-08 15:06:38,476:INFO:__main__:Program started.
2021-05-08 15:06:38,476:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-05-08 15:06:38,477:DEBUG:utils:File found.
2021-05-08 15:06:38,477:DEBUG:utils:The function 'read_cfg' took 0.33 milliseconds to run.
2021-05-08 15:06:38,482:DEBUG:utils:The function 'get_ticker_config_data' took 4.82 milliseconds to run.
2021-05-08 15:06:38,482:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:06:38,482:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:06:38,553:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-08 15:06:55,844:INFO:__main__:Program started.
2021-05-08 15:06:55,845:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-05-08 15:06:55,845:DEBUG:utils:File found.
2021-05-08 15:06:55,845:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-05-08 15:06:55,850:DEBUG:utils:The function 'get_ticker_config_data' took 4.92 milliseconds to run.
2021-05-08 15:06:55,850:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:06:55,850:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:06:55,926:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-08 15:07:14,537:INFO:__main__:Program started.
2021-05-08 15:07:14,538:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-05-08 15:07:14,538:DEBUG:utils:File found.
2021-05-08 15:07:14,538:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-05-08 15:07:14,543:DEBUG:utils:The function 'get_ticker_config_data' took 4.96 milliseconds to run.
2021-05-08 15:07:14,543:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:07:14,543:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:07:14,616:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-08 15:07:22,841:INFO:__main__:Program started.
2021-05-08 15:07:22,841:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-05-08 15:07:22,841:DEBUG:utils:File found.
2021-05-08 15:07:22,842:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-05-08 15:07:22,847:DEBUG:utils:The function 'get_ticker_config_data' took 5.51 milliseconds to run.
2021-05-08 15:07:22,847:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:07:22,847:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:07:22,858:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-08 15:08:06,755:INFO:__main__:Program started.
2021-05-08 15:08:06,755:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-05-08 15:08:06,755:DEBUG:utils:File found.
2021-05-08 15:08:06,755:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-05-08 15:08:06,760:DEBUG:utils:The function 'get_ticker_config_data' took 5.09 milliseconds to run.
2021-05-08 15:08:06,761:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:08:06,761:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:08:06,852:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-08 15:11:12,210:INFO:__main__:Program started.
2021-05-08 15:11:12,210:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-05-08 15:11:12,210:DEBUG:utils:File found.
2021-05-08 15:11:12,211:DEBUG:utils:The function 'read_cfg' took 0.32 milliseconds to run.
2021-05-08 15:11:12,216:DEBUG:utils:The function 'get_ticker_config_data' took 4.93 milliseconds to run.
2021-05-08 15:11:12,216:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:11:12,216:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-08 15:11:12,288:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 22:54:20,015:INFO:__main__:Program started.
2021-05-10 22:54:20,015:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-05-10 22:54:20,016:ERROR:utils:Program aborted. Couldn't open configuration file: 'config/config.json'.
Traceback (most recent call last):
  File "/Users/atcha/Github/Projeto-Final/src/utils.py", line 62, in read_cfg
    with open(config_path, 'r') as cfg_file:
FileNotFoundError: [Errno 2] No such file or directory: 'config/config.json'
2021-05-10 22:54:20,017:DEBUG:utils:The function 'read_cfg' took 1.93 milliseconds to run.
2021-05-10 22:54:43,096:INFO:__main__:Program started.
2021-05-10 22:54:43,097:DEBUG:utils:Searching for config file in 'config/config.json'.
2021-05-10 22:54:43,097:ERROR:utils:Program aborted. Couldn't open configuration file: 'config/config.json'.
Traceback (most recent call last):
  File "/Users/atcha/Github/Projeto-Final/src/utils.py", line 62, in read_cfg
    with open(config_path, 'r') as cfg_file:
FileNotFoundError: [Errno 2] No such file or directory: 'config/config.json'
2021-05-10 22:54:43,097:DEBUG:utils:The function 'read_cfg' took 0.61 milliseconds to run.
2021-05-10 22:58:46,889:INFO:__main__:Program started.
2021-05-10 22:58:46,890:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-10 22:58:46,890:DEBUG:utils:File found.
2021-05-10 22:58:46,891:DEBUG:utils:The function 'read_cfg' took 0.98 milliseconds to run.
2021-05-10 22:58:46,899:DEBUG:utils:The function 'get_ticker_config_data' took 7.66 milliseconds to run.
2021-05-10 22:58:46,899:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 22:58:46,899:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 22:58:47,075:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:00:20,158:INFO:__main__:Program started.
2021-05-10 23:00:20,158:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-10 23:00:20,159:DEBUG:utils:File found.
2021-05-10 23:00:20,159:DEBUG:utils:The function 'read_cfg' took 0.61 milliseconds to run.
2021-05-10 23:00:20,165:DEBUG:utils:The function 'get_ticker_config_data' took 5.91 milliseconds to run.
2021-05-10 23:00:20,165:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:00:20,165:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:00:20,285:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:01:35,576:INFO:__main__:Program started.
2021-05-10 23:01:35,577:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-10 23:01:35,578:DEBUG:utils:File found.
2021-05-10 23:01:35,578:DEBUG:utils:The function 'read_cfg' took 1.01 milliseconds to run.
2021-05-10 23:01:35,584:DEBUG:utils:The function 'get_ticker_config_data' took 5.84 milliseconds to run.
2021-05-10 23:01:35,584:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:01:35,584:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:01:35,726:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:02:14,455:INFO:__main__:Program started.
2021-05-10 23:02:14,455:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-10 23:02:14,456:DEBUG:utils:File found.
2021-05-10 23:02:14,456:DEBUG:utils:The function 'read_cfg' took 0.38 milliseconds to run.
2021-05-10 23:02:14,461:DEBUG:utils:The function 'get_ticker_config_data' took 5.56 milliseconds to run.
2021-05-10 23:02:14,461:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:02:14,462:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:02:14,559:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:20:49,383:INFO:__main__:Program started.
2021-05-10 23:20:49,384:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-10 23:20:49,385:DEBUG:utils:File found.
2021-05-10 23:20:49,385:DEBUG:utils:The function 'read_cfg' took 0.82 milliseconds to run.
2021-05-10 23:20:49,390:DEBUG:utils:The function 'get_ticker_config_data' took 5.27 milliseconds to run.
2021-05-10 23:20:49,391:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:20:49,391:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:21:29,905:INFO:__main__:Program started.
2021-05-10 23:21:29,905:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-10 23:21:29,906:DEBUG:utils:File found.
2021-05-10 23:21:29,906:DEBUG:utils:The function 'read_cfg' took 0.38 milliseconds to run.
2021-05-10 23:21:29,911:DEBUG:utils:The function 'get_ticker_config_data' took 5.13 milliseconds to run.
2021-05-10 23:21:29,911:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:21:29,911:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:21:30,019:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:21:30,028:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:21:30,036:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:23:58,850:INFO:__main__:Program started.
2021-05-10 23:23:58,851:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-10 23:23:58,851:DEBUG:utils:File found.
2021-05-10 23:23:58,851:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-05-10 23:23:58,856:DEBUG:utils:The function 'get_ticker_config_data' took 4.97 milliseconds to run.
2021-05-10 23:23:58,856:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:23:58,856:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:23:58,931:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:23:58,940:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:23:58,948:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:24:16,451:INFO:__main__:Program started.
2021-05-10 23:24:16,452:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-10 23:24:16,452:DEBUG:utils:File found.
2021-05-10 23:24:16,453:DEBUG:utils:The function 'read_cfg' took 0.85 milliseconds to run.
2021-05-10 23:24:16,459:DEBUG:utils:The function 'get_ticker_config_data' took 5.88 milliseconds to run.
2021-05-10 23:24:16,459:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:24:16,459:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:24:16,553:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:24:16,561:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:24:16,570:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:24:29,431:INFO:__main__:Program started.
2021-05-10 23:24:29,431:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-10 23:24:29,432:DEBUG:utils:File found.
2021-05-10 23:24:29,432:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-05-10 23:24:29,437:DEBUG:utils:The function 'get_ticker_config_data' took 4.94 milliseconds to run.
2021-05-10 23:24:29,437:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:24:29,437:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:24:29,450:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:24:29,459:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:24:29,468:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:24:29,468:ERROR:db_model:Error executing query "SELECT economic_sector, economic_subsector, economic_segment FROM company_classification", error: name 'self' is not defined
2021-05-10 23:24:53,105:INFO:__main__:Program started.
2021-05-10 23:24:53,106:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-10 23:24:53,106:DEBUG:utils:File found.
2021-05-10 23:24:53,106:DEBUG:utils:The function 'read_cfg' took 0.37 milliseconds to run.
2021-05-10 23:24:53,111:DEBUG:utils:The function 'get_ticker_config_data' took 5.11 milliseconds to run.
2021-05-10 23:24:53,111:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:24:53,111:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:24:53,211:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:24:53,220:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:24:53,228:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:24:53,229:ERROR:db_model:Error executing query "SELECT economic_sector, economic_subsector, economic_segment FROM company_classification", error: name 'self' is not defined
2021-05-10 23:25:56,120:INFO:__main__:Program started.
2021-05-10 23:25:56,120:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-10 23:25:56,120:DEBUG:utils:File found.
2021-05-10 23:25:56,120:DEBUG:utils:The function 'read_cfg' took 0.37 milliseconds to run.
2021-05-10 23:25:56,126:DEBUG:utils:The function 'get_ticker_config_data' took 5.32 milliseconds to run.
2021-05-10 23:25:56,126:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:25:56,126:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-10 23:25:56,201:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:25:56,209:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-10 23:25:56,217:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:11:37,908:INFO:__main__:Program started.
2021-05-14 17:11:37,909:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:11:37,910:DEBUG:utils:File found.
2021-05-14 17:11:37,910:DEBUG:utils:The function 'read_cfg' took 1.01 milliseconds to run.
2021-05-14 17:11:37,920:DEBUG:utils:The function 'get_ticker_config_data' took 10.11 milliseconds to run.
2021-05-14 17:11:37,920:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:11:37,920:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:11:38,125:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:11:38,136:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:12:27,756:INFO:__main__:Program started.
2021-05-14 17:12:27,757:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:12:27,757:DEBUG:utils:File found.
2021-05-14 17:12:27,757:DEBUG:utils:The function 'read_cfg' took 0.48 milliseconds to run.
2021-05-14 17:12:27,762:DEBUG:utils:The function 'get_ticker_config_data' took 5.05 milliseconds to run.
2021-05-14 17:12:27,763:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:12:27,763:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:12:27,850:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:12:27,858:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:13:07,983:INFO:__main__:Program started.
2021-05-14 17:13:07,983:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:13:07,984:DEBUG:utils:File found.
2021-05-14 17:13:07,984:DEBUG:utils:The function 'read_cfg' took 0.82 milliseconds to run.
2021-05-14 17:13:07,990:DEBUG:utils:The function 'get_ticker_config_data' took 5.93 milliseconds to run.
2021-05-14 17:13:07,990:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:13:07,990:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:13:08,108:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:13:08,117:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:13:38,126:INFO:__main__:Program started.
2021-05-14 17:13:38,127:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:13:38,127:DEBUG:utils:File found.
2021-05-14 17:13:38,127:DEBUG:utils:The function 'read_cfg' took 0.61 milliseconds to run.
2021-05-14 17:13:38,132:DEBUG:utils:The function 'get_ticker_config_data' took 5.01 milliseconds to run.
2021-05-14 17:13:38,132:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:13:38,133:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:13:38,275:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:13:38,286:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:13:38,287:ERROR:db_model:Error executing query "SELECT ticker, initial_date_hourly_candles, final_date_hourly_candles, initial_date_daily_candles, final_date_daily_candles FROM status WHERE ticker = MGLU3;", error: column "mglu3" does not exist
LINE 1: ..., final_date_daily_candles FROM status WHERE ticker = MGLU3;
                                                                 ^

2021-05-14 17:14:40,210:INFO:__main__:Program started.
2021-05-14 17:14:40,210:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:14:40,211:DEBUG:utils:File found.
2021-05-14 17:14:40,211:DEBUG:utils:The function 'read_cfg' took 0.37 milliseconds to run.
2021-05-14 17:14:40,216:DEBUG:utils:The function 'get_ticker_config_data' took 5.55 milliseconds to run.
2021-05-14 17:14:40,216:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:14:40,217:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:14:40,306:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:14:40,315:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:16:50,742:INFO:__main__:Program started.
2021-05-14 17:16:50,742:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:16:50,743:DEBUG:utils:File found.
2021-05-14 17:16:50,743:DEBUG:utils:The function 'read_cfg' took 0.81 milliseconds to run.
2021-05-14 17:16:50,749:DEBUG:utils:The function 'get_ticker_config_data' took 6.19 milliseconds to run.
2021-05-14 17:16:50,749:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:16:50,749:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:16:50,868:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:16:50,878:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:17:17,113:INFO:__main__:Program started.
2021-05-14 17:17:17,113:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:17:17,113:DEBUG:utils:File found.
2021-05-14 17:17:17,113:DEBUG:utils:The function 'read_cfg' took 0.39 milliseconds to run.
2021-05-14 17:17:17,119:DEBUG:utils:The function 'get_ticker_config_data' took 6.00 milliseconds to run.
2021-05-14 17:17:17,120:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:17:17,120:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:17:17,207:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:17:17,215:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:18:29,118:INFO:__main__:Program started.
2021-05-14 17:18:29,118:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:18:29,118:DEBUG:utils:File found.
2021-05-14 17:18:29,119:DEBUG:utils:The function 'read_cfg' took 0.37 milliseconds to run.
2021-05-14 17:18:29,124:DEBUG:utils:The function 'get_ticker_config_data' took 5.09 milliseconds to run.
2021-05-14 17:18:29,124:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:18:29,124:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:18:29,202:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:18:29,210:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:18:59,097:INFO:__main__:Program started.
2021-05-14 17:18:59,097:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:18:59,098:DEBUG:utils:File found.
2021-05-14 17:18:59,098:DEBUG:utils:The function 'read_cfg' took 0.34 milliseconds to run.
2021-05-14 17:18:59,103:DEBUG:utils:The function 'get_ticker_config_data' took 4.91 milliseconds to run.
2021-05-14 17:18:59,103:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:18:59,103:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:18:59,176:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:18:59,184:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:19:25,760:INFO:__main__:Program started.
2021-05-14 17:19:25,760:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:19:25,761:DEBUG:utils:File found.
2021-05-14 17:19:25,761:DEBUG:utils:The function 'read_cfg' took 0.97 milliseconds to run.
2021-05-14 17:19:25,766:DEBUG:utils:The function 'get_ticker_config_data' took 5.23 milliseconds to run.
2021-05-14 17:19:25,767:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:19:25,767:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:19:25,887:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:19:25,899:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:21:12,261:INFO:__main__:Program started.
2021-05-14 17:21:12,262:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:21:12,262:DEBUG:utils:File found.
2021-05-14 17:21:12,262:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-05-14 17:21:12,267:DEBUG:utils:The function 'get_ticker_config_data' took 5.21 milliseconds to run.
2021-05-14 17:21:12,267:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:21:12,267:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:21:12,351:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:21:12,360:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:22:25,687:INFO:__main__:Program started.
2021-05-14 17:22:25,687:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:22:25,687:DEBUG:utils:File found.
2021-05-14 17:22:25,687:DEBUG:utils:The function 'read_cfg' took 0.40 milliseconds to run.
2021-05-14 17:22:25,694:DEBUG:utils:The function 'get_ticker_config_data' took 6.29 milliseconds to run.
2021-05-14 17:22:25,694:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:22:25,694:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:22:25,767:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:22:25,775:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:24:00,198:INFO:__main__:Program started.
2021-05-14 17:24:00,198:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:24:00,198:DEBUG:utils:File found.
2021-05-14 17:24:00,198:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-05-14 17:24:00,203:DEBUG:utils:The function 'get_ticker_config_data' took 4.91 milliseconds to run.
2021-05-14 17:24:00,204:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:24:00,204:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:24:00,276:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:24:00,284:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:25:09,203:INFO:__main__:Program started.
2021-05-14 17:25:09,203:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:25:09,203:DEBUG:utils:File found.
2021-05-14 17:25:09,203:DEBUG:utils:The function 'read_cfg' took 0.42 milliseconds to run.
2021-05-14 17:25:09,208:DEBUG:utils:The function 'get_ticker_config_data' took 4.90 milliseconds to run.
2021-05-14 17:25:09,208:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:25:09,208:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:25:09,283:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:25:09,291:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:25:26,903:INFO:__main__:Program started.
2021-05-14 17:25:26,903:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:25:26,904:DEBUG:utils:File found.
2021-05-14 17:25:26,904:DEBUG:utils:The function 'read_cfg' took 0.50 milliseconds to run.
2021-05-14 17:25:26,909:DEBUG:utils:The function 'get_ticker_config_data' took 4.94 milliseconds to run.
2021-05-14 17:25:26,909:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:25:26,909:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:25:26,992:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:25:27,000:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:25:53,546:INFO:__main__:Program started.
2021-05-14 17:25:53,546:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:25:53,546:DEBUG:utils:File found.
2021-05-14 17:25:53,546:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-05-14 17:25:53,552:DEBUG:utils:The function 'get_ticker_config_data' took 5.18 milliseconds to run.
2021-05-14 17:25:53,552:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:25:53,552:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:25:53,630:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:25:53,639:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:29:34,639:INFO:__main__:Program started.
2021-05-14 17:29:34,640:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:29:34,640:DEBUG:utils:File found.
2021-05-14 17:29:34,640:DEBUG:utils:The function 'read_cfg' took 0.51 milliseconds to run.
2021-05-14 17:29:34,647:DEBUG:utils:The function 'get_ticker_config_data' took 6.85 milliseconds to run.
2021-05-14 17:29:34,647:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:29:34,647:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:29:34,734:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:29:34,743:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:30:01,005:INFO:__main__:Program started.
2021-05-14 17:30:01,006:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-14 17:30:01,006:DEBUG:utils:File found.
2021-05-14 17:30:01,006:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-05-14 17:30:01,011:DEBUG:utils:The function 'get_ticker_config_data' took 5.18 milliseconds to run.
2021-05-14 17:30:01,011:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:30:01,011:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-14 17:30:01,089:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-14 17:30:01,098:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 11:45:34,260:INFO:__main__:Program started.
2021-05-16 11:45:34,261:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 11:45:34,261:ERROR:utils:Program aborted. Expected config file in JSON format. Is it corrupted?
Traceback (most recent call last):
  File "/Users/atcha/Github/Projeto-Final/src/utils.py", line 64, in read_cfg
    config_json = json.load(cfg_file)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 296, in load
    parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 348, in loads
    return _default_decoder.decode(s)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 4 column 19 (char 98)
2021-05-16 11:45:34,265:DEBUG:utils:The function 'read_cfg' took 3.87 milliseconds to run.
2021-05-16 16:08:19,588:INFO:__main__:Program started.
2021-05-16 16:08:19,589:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:08:19,589:ERROR:utils:Program aborted. Expected config file in JSON format. Is it corrupted?
Traceback (most recent call last):
  File "/Users/atcha/Github/Projeto-Final/src/utils.py", line 64, in read_cfg
    config_json = json.load(cfg_file)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 296, in load
    parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 348, in loads
    return _default_decoder.decode(s)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 4 column 19 (char 98)
2021-05-16 16:08:19,594:DEBUG:utils:The function 'read_cfg' took 5.00 milliseconds to run.
2021-05-16 16:08:53,493:INFO:__main__:Program started.
2021-05-16 16:08:53,493:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:08:53,493:ERROR:utils:Program aborted. Expected config file in JSON format. Is it corrupted?
Traceback (most recent call last):
  File "/Users/atcha/Github/Projeto-Final/src/utils.py", line 64, in read_cfg
    config_json = json.load(cfg_file)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 296, in load
    parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 348, in loads
    return _default_decoder.decode(s)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 4 column 19 (char 98)
2021-05-16 16:08:53,494:DEBUG:utils:The function 'read_cfg' took 1.15 milliseconds to run.
2021-05-16 16:09:15,341:INFO:__main__:Program started.
2021-05-16 16:09:15,341:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:09:15,341:ERROR:utils:Program aborted. Expected config file in JSON format. Is it corrupted?
Traceback (most recent call last):
  File "/Users/atcha/Github/Projeto-Final/src/utils.py", line 64, in read_cfg
    config_json = json.load(cfg_file)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 296, in load
    parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 348, in loads
    return _default_decoder.decode(s)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 4 column 19 (char 98)
2021-05-16 16:09:15,342:DEBUG:utils:The function 'read_cfg' took 1.10 milliseconds to run.
2021-05-16 16:09:44,578:INFO:__main__:Program started.
2021-05-16 16:09:44,578:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:09:44,579:ERROR:utils:Program aborted. Expected config file in JSON format. Is it corrupted?
Traceback (most recent call last):
  File "/Users/atcha/Github/Projeto-Final/src/utils.py", line 64, in read_cfg
    config_json = json.load(cfg_file)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 296, in load
    parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 348, in loads
    return _default_decoder.decode(s)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 4 column 19 (char 98)
2021-05-16 16:09:44,580:DEBUG:utils:The function 'read_cfg' took 1.21 milliseconds to run.
2021-05-16 16:10:46,965:INFO:__main__:Program started.
2021-05-16 16:10:46,965:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:10:46,965:ERROR:utils:Program aborted. Expected config file in JSON format. Is it corrupted?
Traceback (most recent call last):
  File "/Users/atcha/Github/Projeto-Final/src/utils.py", line 64, in read_cfg
    config_json = json.load(cfg_file)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 296, in load
    parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 348, in loads
    return _default_decoder.decode(s)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 4 column 19 (char 98)
2021-05-16 16:10:46,966:DEBUG:utils:The function 'read_cfg' took 1.25 milliseconds to run.
2021-05-16 16:12:12,176:INFO:__main__:Program started.
2021-05-16 16:12:12,177:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:12:12,177:ERROR:utils:Program aborted. Expected config file in JSON format. Is it corrupted?
Traceback (most recent call last):
  File "/Users/atcha/Github/Projeto-Final/src/utils.py", line 64, in read_cfg
    config_json = json.load(cfg_file)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 296, in load
    parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 348, in loads
    return _default_decoder.decode(s)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 4 column 19 (char 98)
2021-05-16 16:12:12,178:DEBUG:utils:The function 'read_cfg' took 1.19 milliseconds to run.
2021-05-16 16:12:38,509:INFO:__main__:Program started.
2021-05-16 16:12:38,509:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:12:38,510:DEBUG:utils:File found.
2021-05-16 16:12:38,510:DEBUG:utils:The function 'read_cfg' took 0.54 milliseconds to run.
2021-05-16 16:12:38,516:DEBUG:utils:The function 'get_ticker_config_data' took 6.58 milliseconds to run.
2021-05-16 16:12:38,517:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:12:38,517:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:12:38,704:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:12:38,712:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:13:05,693:INFO:__main__:Program started.
2021-05-16 16:13:05,694:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:13:05,694:DEBUG:utils:File found.
2021-05-16 16:13:05,694:DEBUG:utils:The function 'read_cfg' took 0.37 milliseconds to run.
2021-05-16 16:13:05,699:DEBUG:utils:The function 'get_ticker_config_data' took 5.29 milliseconds to run.
2021-05-16 16:13:05,700:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:13:05,700:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:13:05,768:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:13:05,776:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:13:46,042:INFO:__main__:Program started.
2021-05-16 16:13:46,042:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:13:46,043:DEBUG:utils:File found.
2021-05-16 16:13:46,043:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-05-16 16:13:46,048:DEBUG:utils:The function 'get_ticker_config_data' took 5.62 milliseconds to run.
2021-05-16 16:13:46,049:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:13:46,049:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:13:46,117:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:13:46,125:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:14:42,031:INFO:__main__:Program started.
2021-05-16 16:14:42,033:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:14:42,033:DEBUG:utils:File found.
2021-05-16 16:14:42,033:DEBUG:utils:The function 'read_cfg' took 0.59 milliseconds to run.
2021-05-16 16:14:42,040:DEBUG:utils:The function 'get_ticker_config_data' took 6.57 milliseconds to run.
2021-05-16 16:14:42,040:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:14:42,040:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:14:42,148:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:14:42,156:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:17:24,526:INFO:__main__:Program started.
2021-05-16 16:17:24,526:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:17:24,527:DEBUG:utils:File found.
2021-05-16 16:17:24,527:DEBUG:utils:The function 'read_cfg' took 0.40 milliseconds to run.
2021-05-16 16:17:24,532:DEBUG:utils:The function 'get_ticker_config_data' took 5.23 milliseconds to run.
2021-05-16 16:17:24,532:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:17:24,532:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:17:24,602:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:17:24,611:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:17:57,477:INFO:__main__:Program started.
2021-05-16 16:17:57,477:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:17:57,478:DEBUG:utils:File found.
2021-05-16 16:17:57,478:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-05-16 16:17:57,484:DEBUG:utils:The function 'get_ticker_config_data' took 6.70 milliseconds to run.
2021-05-16 16:17:57,485:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:17:57,485:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:17:57,553:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:17:57,562:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:17:57,570:ERROR:db_manager:Error getting yfinance data, error: name 'msft' is not defined
2021-05-16 16:18:22,304:INFO:__main__:Program started.
2021-05-16 16:18:22,304:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:18:22,305:DEBUG:utils:File found.
2021-05-16 16:18:22,305:DEBUG:utils:The function 'read_cfg' took 0.34 milliseconds to run.
2021-05-16 16:18:22,310:DEBUG:utils:The function 'get_ticker_config_data' took 4.95 milliseconds to run.
2021-05-16 16:18:22,310:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:18:22,310:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:18:22,380:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:18:22,388:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:18:22,396:ERROR:db_manager:Error getting yfinance data, error: name 'msft' is not defined
2021-05-16 16:19:35,017:INFO:__main__:Program started.
2021-05-16 16:19:35,018:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:19:35,018:DEBUG:utils:File found.
2021-05-16 16:19:35,019:DEBUG:utils:The function 'read_cfg' took 1.03 milliseconds to run.
2021-05-16 16:19:35,026:DEBUG:utils:The function 'get_ticker_config_data' took 7.32 milliseconds to run.
2021-05-16 16:19:35,026:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:19:35,026:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:19:35,150:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:19:35,160:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:19:35,169:ERROR:db_manager:Error getting yfinance data, error: 'Ticker' object has no attribute 'upper'
2021-05-16 16:25:34,014:INFO:__main__:Program started.
2021-05-16 16:25:34,015:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:25:34,016:DEBUG:utils:File found.
2021-05-16 16:25:34,016:DEBUG:utils:The function 'read_cfg' took 1.04 milliseconds to run.
2021-05-16 16:25:34,022:DEBUG:utils:The function 'get_ticker_config_data' took 5.45 milliseconds to run.
2021-05-16 16:25:34,022:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:25:34,022:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:25:34,128:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:25:34,141:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:25:34,149:ERROR:db_manager:Error getting yfinance data, error: 'Ticker' object has no attribute 'upper'
2021-05-16 16:31:31,293:INFO:__main__:Program started.
2021-05-16 16:31:31,296:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:31:31,296:DEBUG:utils:File found.
2021-05-16 16:31:31,297:DEBUG:utils:The function 'read_cfg' took 1.43 milliseconds to run.
2021-05-16 16:31:31,307:DEBUG:utils:The function 'get_ticker_config_data' took 9.84 milliseconds to run.
2021-05-16 16:31:31,307:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:31:31,308:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:31:47,523:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:31:48,392:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:31:50,620:ERROR:db_manager:Error getting yfinance data, error: 'Ticker' object has no attribute 'upper'
2021-05-16 16:32:27,342:INFO:__main__:Program started.
2021-05-16 16:32:27,343:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:32:27,343:DEBUG:utils:File found.
2021-05-16 16:32:27,343:DEBUG:utils:The function 'read_cfg' took 0.84 milliseconds to run.
2021-05-16 16:32:27,353:DEBUG:utils:The function 'get_ticker_config_data' took 9.04 milliseconds to run.
2021-05-16 16:32:27,353:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:32:27,353:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:32:27,567:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:32:27,581:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:32:27,590:ERROR:db_manager:Error getting yfinance data, error: 'Ticker' object has no attribute 'upper'
2021-05-16 16:35:15,258:INFO:__main__:Program started.
2021-05-16 16:35:15,258:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:35:15,259:DEBUG:utils:File found.
2021-05-16 16:35:15,259:DEBUG:utils:The function 'read_cfg' took 0.66 milliseconds to run.
2021-05-16 16:35:15,264:DEBUG:utils:The function 'get_ticker_config_data' took 5.52 milliseconds to run.
2021-05-16 16:35:15,265:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:35:15,265:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:35:15,392:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:35:15,406:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:35:15,420:ERROR:db_manager:Error getting yfinance data, error: 'Ticker' object has no attribute 'upper'
2021-05-16 16:36:18,095:INFO:__main__:Program started.
2021-05-16 16:36:18,097:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:36:18,097:DEBUG:utils:File found.
2021-05-16 16:36:18,098:DEBUG:utils:The function 'read_cfg' took 1.19 milliseconds to run.
2021-05-16 16:36:18,114:DEBUG:utils:The function 'get_ticker_config_data' took 15.58 milliseconds to run.
2021-05-16 16:36:18,114:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:36:18,114:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:36:26,812:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:36:33,608:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:36:36,919:ERROR:db_manager:Error getting yfinance data, error: 'Ticker' object has no attribute 'upper'
2021-05-16 16:46:21,534:INFO:__main__:Program started.
2021-05-16 16:46:21,537:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:46:21,537:DEBUG:utils:File found.
2021-05-16 16:46:21,538:DEBUG:utils:The function 'read_cfg' took 1.70 milliseconds to run.
2021-05-16 16:46:21,548:DEBUG:utils:The function 'get_ticker_config_data' took 9.94 milliseconds to run.
2021-05-16 16:46:21,549:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:46:21,549:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:46:37,932:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:46:40,720:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:48:21,032:ERROR:db_manager:Error getting yfinance data, error: 'Ticker' object has no attribute 'upper'
2021-05-16 16:48:44,642:INFO:__main__:Program started.
2021-05-16 16:48:44,643:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:48:44,644:DEBUG:utils:File found.
2021-05-16 16:48:44,645:DEBUG:utils:The function 'read_cfg' took 1.54 milliseconds to run.
2021-05-16 16:48:44,651:DEBUG:utils:The function 'get_ticker_config_data' took 5.75 milliseconds to run.
2021-05-16 16:48:44,651:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:48:44,651:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:48:44,806:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:48:44,830:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:51:51,534:INFO:__main__:Program started.
2021-05-16 16:51:51,534:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:51:51,535:DEBUG:utils:File found.
2021-05-16 16:51:51,535:DEBUG:utils:The function 'read_cfg' took 0.67 milliseconds to run.
2021-05-16 16:51:51,540:DEBUG:utils:The function 'get_ticker_config_data' took 5.42 milliseconds to run.
2021-05-16 16:51:51,541:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:51:51,541:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:51:51,661:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:51:51,681:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:53:45,727:INFO:__main__:Program started.
2021-05-16 16:53:45,728:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:53:45,729:DEBUG:utils:File found.
2021-05-16 16:53:45,729:DEBUG:utils:The function 'read_cfg' took 1.05 milliseconds to run.
2021-05-16 16:53:45,736:DEBUG:utils:The function 'get_ticker_config_data' took 6.74 milliseconds to run.
2021-05-16 16:53:45,736:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:53:45,736:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:53:45,866:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:53:45,889:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:54:40,058:INFO:__main__:Program started.
2021-05-16 16:54:40,058:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:54:40,059:DEBUG:utils:File found.
2021-05-16 16:54:40,059:DEBUG:utils:The function 'read_cfg' took 0.86 milliseconds to run.
2021-05-16 16:54:40,066:DEBUG:utils:The function 'get_ticker_config_data' took 6.90 milliseconds to run.
2021-05-16 16:54:40,066:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:54:40,066:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:54:40,196:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:54:40,218:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:56:40,097:INFO:__main__:Program started.
2021-05-16 16:56:40,098:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 16:56:40,098:DEBUG:utils:File found.
2021-05-16 16:56:40,098:DEBUG:utils:The function 'read_cfg' took 0.66 milliseconds to run.
2021-05-16 16:56:40,104:DEBUG:utils:The function 'get_ticker_config_data' took 5.35 milliseconds to run.
2021-05-16 16:56:40,104:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:56:40,104:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 16:56:40,241:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 16:56:40,263:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:00:21,876:INFO:__main__:Program started.
2021-05-16 17:00:21,876:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:00:21,877:DEBUG:utils:File found.
2021-05-16 17:00:21,877:DEBUG:utils:The function 'read_cfg' took 0.39 milliseconds to run.
2021-05-16 17:00:21,882:DEBUG:utils:The function 'get_ticker_config_data' took 5.31 milliseconds to run.
2021-05-16 17:00:21,882:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:00:21,882:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:00:21,965:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:00:21,985:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:00:46,373:INFO:__main__:Program started.
2021-05-16 17:00:46,373:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:00:46,373:DEBUG:utils:File found.
2021-05-16 17:00:46,374:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-05-16 17:00:46,379:DEBUG:utils:The function 'get_ticker_config_data' took 5.57 milliseconds to run.
2021-05-16 17:00:46,379:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:00:46,380:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:00:46,457:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:00:46,470:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:00:52,301:INFO:__main__:Program started.
2021-05-16 17:00:52,302:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:00:52,303:DEBUG:utils:File found.
2021-05-16 17:00:52,303:DEBUG:utils:The function 'read_cfg' took 1.43 milliseconds to run.
2021-05-16 17:00:52,316:DEBUG:utils:The function 'get_ticker_config_data' took 12.33 milliseconds to run.
2021-05-16 17:00:52,317:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:00:52,317:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:00:52,333:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:00:52,343:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:01:39,982:INFO:__main__:Program started.
2021-05-16 17:01:39,984:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:01:39,984:DEBUG:utils:File found.
2021-05-16 17:01:39,984:DEBUG:utils:The function 'read_cfg' took 0.99 milliseconds to run.
2021-05-16 17:01:39,997:DEBUG:utils:The function 'get_ticker_config_data' took 12.42 milliseconds to run.
2021-05-16 17:01:39,997:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:01:39,998:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:01:40,011:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:01:40,022:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:17:22,388:INFO:__main__:Program started.
2021-05-16 17:17:22,389:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:17:22,390:DEBUG:utils:File found.
2021-05-16 17:17:22,390:DEBUG:utils:The function 'read_cfg' took 0.70 milliseconds to run.
2021-05-16 17:17:22,396:DEBUG:utils:The function 'get_ticker_config_data' took 6.37 milliseconds to run.
2021-05-16 17:17:22,397:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:17:22,397:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:17:22,691:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:17:22,705:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:20:03,112:INFO:__main__:Program started.
2021-05-16 17:20:03,113:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:20:03,113:DEBUG:utils:File found.
2021-05-16 17:20:03,114:DEBUG:utils:The function 'read_cfg' took 1.19 milliseconds to run.
2021-05-16 17:20:03,121:DEBUG:utils:The function 'get_ticker_config_data' took 7.49 milliseconds to run.
2021-05-16 17:20:03,122:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:20:03,122:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:20:03,367:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:20:03,382:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:46:00,436:INFO:__main__:Program started.
2021-05-16 17:46:00,437:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:46:00,438:DEBUG:utils:File found.
2021-05-16 17:46:00,438:DEBUG:utils:The function 'read_cfg' took 0.76 milliseconds to run.
2021-05-16 17:46:00,447:DEBUG:utils:The function 'get_ticker_config_data' took 8.77 milliseconds to run.
2021-05-16 17:46:00,447:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:46:00,447:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:46:00,653:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:46:00,672:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:47:07,297:INFO:__main__:Program started.
2021-05-16 17:47:07,297:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:47:07,297:DEBUG:utils:File found.
2021-05-16 17:47:07,297:DEBUG:utils:The function 'read_cfg' took 0.38 milliseconds to run.
2021-05-16 17:47:07,302:DEBUG:utils:The function 'get_ticker_config_data' took 5.18 milliseconds to run.
2021-05-16 17:47:07,303:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:47:07,303:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:47:07,376:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:47:07,385:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:48:25,296:INFO:__main__:Program started.
2021-05-16 17:48:25,296:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:48:25,296:DEBUG:utils:File found.
2021-05-16 17:48:25,296:DEBUG:utils:The function 'read_cfg' took 0.40 milliseconds to run.
2021-05-16 17:48:25,302:DEBUG:utils:The function 'get_ticker_config_data' took 5.69 milliseconds to run.
2021-05-16 17:48:25,302:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:48:25,302:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:48:25,387:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:48:25,400:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:52:38,711:INFO:__main__:Program started.
2021-05-16 17:52:38,712:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:52:38,712:DEBUG:utils:File found.
2021-05-16 17:52:38,712:DEBUG:utils:The function 'read_cfg' took 0.49 milliseconds to run.
2021-05-16 17:52:38,718:DEBUG:utils:The function 'get_ticker_config_data' took 5.88 milliseconds to run.
2021-05-16 17:52:38,718:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:52:38,718:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:52:38,826:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:52:38,834:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:53:13,145:INFO:__main__:Program started.
2021-05-16 17:53:13,145:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:53:13,146:DEBUG:utils:File found.
2021-05-16 17:53:13,146:DEBUG:utils:The function 'read_cfg' took 0.49 milliseconds to run.
2021-05-16 17:53:13,152:DEBUG:utils:The function 'get_ticker_config_data' took 5.84 milliseconds to run.
2021-05-16 17:53:13,152:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:53:13,152:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:53:13,253:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:53:13,264:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:53:23,023:INFO:__main__:Program started.
2021-05-16 17:53:23,023:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:53:23,024:DEBUG:utils:File found.
2021-05-16 17:53:23,024:DEBUG:utils:The function 'read_cfg' took 0.34 milliseconds to run.
2021-05-16 17:53:23,029:DEBUG:utils:The function 'get_ticker_config_data' took 5.06 milliseconds to run.
2021-05-16 17:53:23,029:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:53:23,029:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:53:23,040:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:53:23,049:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:55:53,726:INFO:__main__:Program started.
2021-05-16 17:55:53,727:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:55:53,727:DEBUG:utils:File found.
2021-05-16 17:55:53,727:DEBUG:utils:The function 'read_cfg' took 0.68 milliseconds to run.
2021-05-16 17:55:53,736:DEBUG:utils:The function 'get_ticker_config_data' took 8.20 milliseconds to run.
2021-05-16 17:55:53,736:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:55:53,736:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:55:53,859:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:55:53,868:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:56:39,147:INFO:__main__:Program started.
2021-05-16 17:56:39,148:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:56:39,149:DEBUG:utils:File found.
2021-05-16 17:56:39,149:DEBUG:utils:The function 'read_cfg' took 1.29 milliseconds to run.
2021-05-16 17:56:39,163:DEBUG:utils:The function 'get_ticker_config_data' took 13.52 milliseconds to run.
2021-05-16 17:56:39,163:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:56:39,163:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:56:39,198:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:56:39,213:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:57:03,016:INFO:__main__:Program started.
2021-05-16 17:57:03,016:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:57:03,017:DEBUG:utils:File found.
2021-05-16 17:57:03,017:DEBUG:utils:The function 'read_cfg' took 0.69 milliseconds to run.
2021-05-16 17:57:03,022:DEBUG:utils:The function 'get_ticker_config_data' took 5.46 milliseconds to run.
2021-05-16 17:57:03,022:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:57:03,023:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:57:03,147:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:57:03,157:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:57:31,930:INFO:__main__:Program started.
2021-05-16 17:57:31,931:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:57:31,931:DEBUG:utils:File found.
2021-05-16 17:57:31,931:DEBUG:utils:The function 'read_cfg' took 0.39 milliseconds to run.
2021-05-16 17:57:31,937:DEBUG:utils:The function 'get_ticker_config_data' took 5.72 milliseconds to run.
2021-05-16 17:57:31,937:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:57:31,937:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:57:32,036:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:57:32,048:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:57:50,542:INFO:__main__:Program started.
2021-05-16 17:57:50,543:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:57:50,544:DEBUG:utils:File found.
2021-05-16 17:57:50,545:DEBUG:utils:The function 'read_cfg' took 1.33 milliseconds to run.
2021-05-16 17:57:50,558:DEBUG:utils:The function 'get_ticker_config_data' took 12.82 milliseconds to run.
2021-05-16 17:57:50,558:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:57:50,558:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:57:50,581:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:57:50,590:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:59:31,595:INFO:__main__:Program started.
2021-05-16 17:59:31,595:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:59:31,595:DEBUG:utils:File found.
2021-05-16 17:59:31,595:DEBUG:utils:The function 'read_cfg' took 0.70 milliseconds to run.
2021-05-16 17:59:31,601:DEBUG:utils:The function 'get_ticker_config_data' took 5.83 milliseconds to run.
2021-05-16 17:59:31,602:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:59:31,602:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:59:31,728:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:59:31,736:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:59:51,591:INFO:__main__:Program started.
2021-05-16 17:59:51,592:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 17:59:51,592:DEBUG:utils:File found.
2021-05-16 17:59:51,592:DEBUG:utils:The function 'read_cfg' took 0.35 milliseconds to run.
2021-05-16 17:59:51,597:DEBUG:utils:The function 'get_ticker_config_data' took 5.46 milliseconds to run.
2021-05-16 17:59:51,598:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:59:51,598:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 17:59:51,670:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 17:59:51,678:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 18:00:54,882:INFO:__main__:Program started.
2021-05-16 18:00:54,884:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 18:00:54,885:DEBUG:utils:File found.
2021-05-16 18:00:54,886:DEBUG:utils:The function 'read_cfg' took 1.78 milliseconds to run.
2021-05-16 18:00:54,897:DEBUG:utils:The function 'get_ticker_config_data' took 10.92 milliseconds to run.
2021-05-16 18:00:54,897:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 18:00:54,897:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 18:00:54,909:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 18:00:54,921:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 18:01:39,191:INFO:__main__:Program started.
2021-05-16 18:01:39,191:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 18:01:39,192:DEBUG:utils:File found.
2021-05-16 18:01:39,192:DEBUG:utils:The function 'read_cfg' took 0.63 milliseconds to run.
2021-05-16 18:01:39,199:DEBUG:utils:The function 'get_ticker_config_data' took 7.12 milliseconds to run.
2021-05-16 18:01:39,199:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 18:01:39,199:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 18:01:39,351:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 18:01:39,361:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 18:03:58,871:INFO:__main__:Program started.
2021-05-16 18:03:58,872:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 18:03:58,872:DEBUG:utils:File found.
2021-05-16 18:03:58,873:DEBUG:utils:The function 'read_cfg' took 0.89 milliseconds to run.
2021-05-16 18:03:58,879:DEBUG:utils:The function 'get_ticker_config_data' took 6.33 milliseconds to run.
2021-05-16 18:03:58,879:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 18:03:58,879:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 18:03:59,003:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 18:03:59,014:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 19:49:22,105:INFO:__main__:Program started.
2021-05-16 19:49:22,106:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 19:49:22,107:DEBUG:utils:File found.
2021-05-16 19:49:22,108:DEBUG:utils:The function 'read_cfg' took 1.36 milliseconds to run.
2021-05-16 19:49:22,118:DEBUG:utils:The function 'get_ticker_config_data' took 9.88 milliseconds to run.
2021-05-16 19:49:22,118:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 19:49:22,118:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 19:49:22,129:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 19:49:22,138:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 20:36:14,083:INFO:__main__:Program started.
2021-05-16 20:36:14,084:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 20:36:14,084:DEBUG:utils:File found.
2021-05-16 20:36:14,085:DEBUG:utils:The function 'read_cfg' took 1.15 milliseconds to run.
2021-05-16 20:36:14,091:DEBUG:utils:The function 'get_ticker_config_data' took 5.92 milliseconds to run.
2021-05-16 20:36:14,091:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 20:36:14,091:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 20:36:14,216:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 20:36:14,226:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 20:44:52,181:INFO:__main__:Program started.
2021-05-16 20:44:52,182:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-16 20:44:52,183:DEBUG:utils:File found.
2021-05-16 20:44:52,183:DEBUG:utils:The function 'read_cfg' took 0.94 milliseconds to run.
2021-05-16 20:44:52,190:DEBUG:utils:The function 'get_ticker_config_data' took 6.94 milliseconds to run.
2021-05-16 20:44:52,190:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 20:44:52,190:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-16 20:44:52,335:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-16 20:44:52,345:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:01:52,691:INFO:__main__:Program started.
2021-05-18 15:01:52,692:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:01:52,693:DEBUG:utils:File found.
2021-05-18 15:01:52,694:DEBUG:utils:The function 'read_cfg' took 1.30 milliseconds to run.
2021-05-18 15:01:52,706:DEBUG:utils:The function 'get_ticker_config_data' took 11.71 milliseconds to run.
2021-05-18 15:01:52,706:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:01:52,706:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:01:52,740:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:01:52,752:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:06:36,742:INFO:__main__:Program started.
2021-05-18 15:06:36,745:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:06:36,745:DEBUG:utils:File found.
2021-05-18 15:06:36,746:DEBUG:utils:The function 'read_cfg' took 1.88 milliseconds to run.
2021-05-18 15:06:36,771:DEBUG:utils:The function 'get_ticker_config_data' took 23.68 milliseconds to run.
2021-05-18 15:06:36,772:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:06:36,772:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:06:36,816:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:06:36,828:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:07:29,873:INFO:__main__:Program started.
2021-05-18 15:07:29,874:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:07:29,874:DEBUG:utils:File found.
2021-05-18 15:07:29,874:DEBUG:utils:The function 'read_cfg' took 0.75 milliseconds to run.
2021-05-18 15:07:29,884:DEBUG:utils:The function 'get_ticker_config_data' took 9.92 milliseconds to run.
2021-05-18 15:07:29,885:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:07:29,885:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:07:29,897:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:07:29,906:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:08:00,653:INFO:__main__:Program started.
2021-05-18 15:08:00,654:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:08:00,654:DEBUG:utils:File found.
2021-05-18 15:08:00,654:DEBUG:utils:The function 'read_cfg' took 0.85 milliseconds to run.
2021-05-18 15:08:00,665:DEBUG:utils:The function 'get_ticker_config_data' took 10.10 milliseconds to run.
2021-05-18 15:08:00,665:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:08:00,666:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:08:00,682:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:08:00,691:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:08:25,674:INFO:__main__:Program started.
2021-05-18 15:08:25,675:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:08:25,676:DEBUG:utils:File found.
2021-05-18 15:08:25,676:DEBUG:utils:The function 'read_cfg' took 0.97 milliseconds to run.
2021-05-18 15:08:25,687:DEBUG:utils:The function 'get_ticker_config_data' took 11.10 milliseconds to run.
2021-05-18 15:08:25,688:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:08:25,688:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:08:25,700:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:08:25,709:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:15:11,319:INFO:__main__:Program started.
2021-05-18 15:15:11,321:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:15:11,322:DEBUG:utils:File found.
2021-05-18 15:15:11,323:DEBUG:utils:The function 'read_cfg' took 2.09 milliseconds to run.
2021-05-18 15:15:11,338:DEBUG:utils:The function 'get_ticker_config_data' took 15.13 milliseconds to run.
2021-05-18 15:15:11,339:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:15:11,339:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:15:11,364:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:15:11,377:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:19:33,084:INFO:__main__:Program started.
2021-05-18 15:19:33,085:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:19:33,086:DEBUG:utils:File found.
2021-05-18 15:19:33,086:DEBUG:utils:The function 'read_cfg' took 1.33 milliseconds to run.
2021-05-18 15:19:33,098:DEBUG:utils:The function 'get_ticker_config_data' took 11.29 milliseconds to run.
2021-05-18 15:19:33,098:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:19:33,099:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:19:33,112:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:19:33,122:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:19:59,366:INFO:__main__:Program started.
2021-05-18 15:19:59,367:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:19:59,367:DEBUG:utils:File found.
2021-05-18 15:19:59,367:DEBUG:utils:The function 'read_cfg' took 0.77 milliseconds to run.
2021-05-18 15:19:59,376:DEBUG:utils:The function 'get_ticker_config_data' took 8.67 milliseconds to run.
2021-05-18 15:19:59,376:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:19:59,377:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:19:59,389:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:19:59,398:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:21:38,769:INFO:__main__:Program started.
2021-05-18 15:21:38,771:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:21:38,771:DEBUG:utils:File found.
2021-05-18 15:21:38,772:DEBUG:utils:The function 'read_cfg' took 1.42 milliseconds to run.
2021-05-18 15:21:38,787:DEBUG:utils:The function 'get_ticker_config_data' took 14.87 milliseconds to run.
2021-05-18 15:21:38,788:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:21:38,788:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:21:38,803:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:21:38,817:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:22:05,638:INFO:__main__:Program started.
2021-05-18 15:22:05,639:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:22:05,639:DEBUG:utils:File found.
2021-05-18 15:22:05,639:DEBUG:utils:The function 'read_cfg' took 0.86 milliseconds to run.
2021-05-18 15:22:05,651:DEBUG:utils:The function 'get_ticker_config_data' took 11.12 milliseconds to run.
2021-05-18 15:22:05,651:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:22:05,651:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:22:05,663:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:22:05,671:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:22:42,026:INFO:__main__:Program started.
2021-05-18 15:22:42,027:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:22:42,027:DEBUG:utils:File found.
2021-05-18 15:22:42,027:DEBUG:utils:The function 'read_cfg' took 0.81 milliseconds to run.
2021-05-18 15:22:42,040:DEBUG:utils:The function 'get_ticker_config_data' took 12.43 milliseconds to run.
2021-05-18 15:22:42,040:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:22:42,041:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:22:42,055:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:22:42,064:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:22:55,591:INFO:__main__:Program started.
2021-05-18 15:22:55,592:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:22:55,592:DEBUG:utils:File found.
2021-05-18 15:22:55,593:DEBUG:utils:The function 'read_cfg' took 0.90 milliseconds to run.
2021-05-18 15:22:55,604:DEBUG:utils:The function 'get_ticker_config_data' took 10.98 milliseconds to run.
2021-05-18 15:22:55,604:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:22:55,604:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:22:55,617:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:22:55,626:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:24:36,426:INFO:__main__:Program started.
2021-05-18 15:24:36,428:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:24:36,428:DEBUG:utils:File found.
2021-05-18 15:24:36,429:DEBUG:utils:The function 'read_cfg' took 1.40 milliseconds to run.
2021-05-18 15:24:36,440:DEBUG:utils:The function 'get_ticker_config_data' took 9.84 milliseconds to run.
2021-05-18 15:24:36,441:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:24:36,441:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:24:36,456:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:24:36,466:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:24:45,039:INFO:__main__:Program started.
2021-05-18 15:24:45,040:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:24:45,041:DEBUG:utils:File found.
2021-05-18 15:24:45,041:DEBUG:utils:The function 'read_cfg' took 1.10 milliseconds to run.
2021-05-18 15:24:45,050:DEBUG:utils:The function 'get_ticker_config_data' took 8.82 milliseconds to run.
2021-05-18 15:24:45,051:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:24:45,051:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:24:45,063:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:24:45,071:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:24:58,136:INFO:__main__:Program started.
2021-05-18 15:24:58,138:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:24:58,139:DEBUG:utils:File found.
2021-05-18 15:24:58,139:DEBUG:utils:The function 'read_cfg' took 1.83 milliseconds to run.
2021-05-18 15:24:58,151:DEBUG:utils:The function 'get_ticker_config_data' took 11.47 milliseconds to run.
2021-05-18 15:24:58,152:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:24:58,152:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:24:58,164:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:24:58,174:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:25:09,699:INFO:__main__:Program started.
2021-05-18 15:25:09,700:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:25:09,701:DEBUG:utils:File found.
2021-05-18 15:25:09,701:DEBUG:utils:The function 'read_cfg' took 1.06 milliseconds to run.
2021-05-18 15:25:09,711:DEBUG:utils:The function 'get_ticker_config_data' took 9.68 milliseconds to run.
2021-05-18 15:25:09,711:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:25:09,711:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:25:09,723:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:25:09,733:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:26:42,756:INFO:__main__:Program started.
2021-05-18 15:26:42,757:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:26:42,758:DEBUG:utils:File found.
2021-05-18 15:26:42,758:DEBUG:utils:The function 'read_cfg' took 0.87 milliseconds to run.
2021-05-18 15:26:42,768:DEBUG:utils:The function 'get_ticker_config_data' took 9.93 milliseconds to run.
2021-05-18 15:26:42,768:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:26:42,769:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:26:42,785:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:26:42,794:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:28:08,433:INFO:__main__:Program started.
2021-05-18 15:28:08,436:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:28:08,438:DEBUG:utils:File found.
2021-05-18 15:28:08,438:DEBUG:utils:The function 'read_cfg' took 4.17 milliseconds to run.
2021-05-18 15:28:08,451:DEBUG:utils:The function 'get_ticker_config_data' took 12.27 milliseconds to run.
2021-05-18 15:28:08,452:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:28:08,452:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:28:08,471:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:28:08,481:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:29:52,287:INFO:__main__:Program started.
2021-05-18 15:29:52,288:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:29:52,289:DEBUG:utils:File found.
2021-05-18 15:29:52,289:DEBUG:utils:The function 'read_cfg' took 1.16 milliseconds to run.
2021-05-18 15:29:52,301:DEBUG:utils:The function 'get_ticker_config_data' took 12.06 milliseconds to run.
2021-05-18 15:29:52,302:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:29:52,302:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:29:52,316:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:29:52,326:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:31:31,899:INFO:__main__:Program started.
2021-05-18 15:31:31,901:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:31:31,901:DEBUG:utils:File found.
2021-05-18 15:31:31,901:DEBUG:utils:The function 'read_cfg' took 0.83 milliseconds to run.
2021-05-18 15:31:31,913:DEBUG:utils:The function 'get_ticker_config_data' took 11.86 milliseconds to run.
2021-05-18 15:31:31,914:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:31:31,914:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:31:31,927:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:31:31,938:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:31:33,036:ERROR:db_model:Error executing query "INSERT INTO daily_candles (ticker, day, open_price, max_price, min_price, close_price, volume)
VALUES
('MGLU3', '2020-09-30', 22.004583, 22.451617, 21.787308, 22.276798, 46979200),
('MGLU3', '2020-10-01', 22.311762, 22.951097, 22.279297, 22.951097, 45613200),
('MGLU3', '2020-10-02', 22.738819, 22.921128, 21.877215, 21.989599, 59527200),
('MGLU3', '2020-10-05', 22.221857, 22.651408, 22.042044, 22.511555, 48107600),
('MGLU3', '2020-10-06', 22.726330, 22.776277, 22.191887, 22.301773, 42778000),
('MGLU3', '2020-10-07', 22.401669, 22.668891, 22.201878, 22.211868, 41633600),
('MGLU3', '2020-10-08', 22.426644, 22.976071, 22.251825, 22.943605, 46569200),
('MGLU3', '2020-10-09', 22.951098, 24.511972, 22.876175, 24.511972, 92367600),
('MGLU3', '2020-10-13', 24.856612, 26.072846, 24.849120, 25.972950, 94711200),
('MGLU3', '2020-10-14', 26.472429, 27.221648, 25.013949, 25.653282, 83598100),
('MGLU3', '2020-10-15', 24.993970, 26.042876, 24.973990, 25.483459, 34750000),
('MGLU3', '2020-10-16', 25.733200, 26.022897, 25.133824, 25.773157, 32673100),
('MGLU3', '2020-10-19', 26.082836, 26.272637, 25.323626, 25.663273, 36433600),
('MGLU3', '2020-10-20', 25.773157, 26.112803, 25.623313, 26.012909, 27788700),
('MGLU3', '2020-10-21', 25.972950, 26.772117, 25.932991, 26.192720, 35433800),
('MGLU3', '2020-10-22', 26.322585, 26.372533, 25.972949, 26.072845, 23097100),
('MGLU3', '2020-10-23', 26.072845, 26.182729, 25.623313, 25.893032, 23943900),
('MGLU3', '2020-10-26', 25.773157, 26.072846, 25.083876, 25.443501, 25781400),
('MGLU3', '2020-10-27', 25.503440, 25.723210, 25.093866, 25.423523, 20697400),
('MGLU3', '2020-10-28', 24.774197, 25.213740, 24.374614, 24.604374, 36016800),
('MGLU3', '2020-10-29', 24.374614, 25.553387, 23.855155, 25.333616, 37853300),
('MGLU3', '2020-10-30', 25.123833, 25.273677, 24.134864, 24.604374, 31118300),
('MGLU3', '2020-11-03', 25.253700, 25.363584, 24.724251, 24.964001, 25250200),
('MGLU3', '2020-11-04', 25.373573, 26.602293, 25.343606, 26.162752, 51188300),
('MGLU3', '2020-11-05', 26.852033, 27.671182, 26.712180, 27.421442, 46382700),
('MGLU3', '2020-11-06', 26.971909, 27.331535, 26.482419, 27.301565, 33294500),
('MGLU3', '2020-11-09', 28.120712, 28.280545, 26.322585, 26.422482, 71761700),
('MGLU3', '2020-11-10', 25.982939, 27.091785, 25.153803, 25.193760, 79060600),
('MGLU3', '2020-11-11', 25.373574, 26.182730, 25.253700, 25.553387, 51171300),
('MGLU3', '2020-11-12', 25.503438, 25.923002, 24.884083, 25.453489, 33819000),
('MGLU3', '2020-11-13', 25.733200, 25.753180, 24.834137, 25.073887, 35563800),
('MGLU3', '2020-11-16', 25.273677, 25.363583, 24.244750, 24.824146, 41356200),
('MGLU3', '2020-11-17', 24.724251, 25.243710, 24.504481, 24.704271, 31907900),
('MGLU3', '2020-11-18', 24.674303, 24.704270, 24.044957, 24.514469, 31523100),
('MGLU3', '2020-11-19', 24.504480, 24.694281, 23.795218, 24.614365, 50040100),
('MGLU3', '2020-11-23', 24.274717, 24.344646, 23.195841, 23.395634, 59639700),
('MGLU3', '2020-11-24', 23.345686, 23.945060, 22.876174, 23.675343, 57465100),
('MGLU3', '2020-11-25', 23.645374, 24.284708, 23.495531, 23.975031, 38914800),
('MGLU3', '2020-11-26', 23.875133, 24.274717, 23.795217, 24.224770, 23108700),
('MGLU3', '2020-11-27', 24.294697, 24.524457, 23.895114, 24.164833, 36125600),
('MGLU3', '2020-11-30', 24.174823, 24.664313, 23.195841, 23.355675, 67110300),
('MGLU3', '2020-12-01', 23.625395, 23.745271, 22.576488, 22.856195, 49280200),
('MGLU3', '2020-12-02', 22.856195, 23.145894, 22.726331, 23.026018, 25575700),
('MGLU3', '2020-12-03', 23.055988, 23.575448, 22.906145, 23.275759, 33183700),
('MGLU3', '2020-12-04', 23.395634, 23.825186, 23.145894, 23.635384, 22737900),
('MGLU3', '2020-12-07', 23.635384, 24.244750, 23.405624, 23.775238, 24571500),
('MGLU3', '2020-12-08', 23.705312, 24.924044, 23.585438, 24.924044, 42095700),
('MGLU3', '2020-12-09', 24.924043, 25.033928, 23.785228, 23.955051, 41174000),
('MGLU3', '2020-12-10', 24.074927, 24.134864, 23.145894, 23.375654, 33674300),
('MGLU3', '2020-12-11', 23.065978, 23.505521, 22.696362, 22.966082, 38144400),
('MGLU3', '2020-12-14', 22.976070, 24.194800, 22.846206, 24.024977, 43300500),
('MGLU3', '2020-12-15', 24.024978, 24.794177, 23.615404, 24.584396, 39496800),
('MGLU3', '2020-12-16', 24.474510, 24.944020, 24.144853, 24.934031, 41309900),
('MGLU3', '2020-12-17', 24.834136, 25.083876, 24.334656, 24.514469, 23427200),
('MGLU3', '2020-12-18', 24.454530, 24.604374, 24.074927, 24.494490, 31019400),
('MGLU3', '2020-12-21', 23.905103, 25.353593, 23.585436, 24.973989, 52188800),
('MGLU3', '2020-12-22', 25.263689, 25.393553, 24.824146, 25.133823, 25236200),
('MGLU3', '2020-12-23', 25.223731, 25.603334, 24.944021, 24.944021, 20558600),
('MGLU3', '2020-12-28', 24.754220, 25.303647, 24.374614, 25.223730, 23099100),
('MGLU3', '2020-12-29', 25.203751, 25.533408, 24.993971, 25.253700, 17789700),
('MGLU3', '2020-12-30', 25.370001, 25.660000, 24.950001, 24.950001, 19188700),
('MGLU3', '2021-01-04', 25.260000, 25.580000, 24.870001, 25.200001, 25706100),
('MGLU3', '2021-01-05', 25.100000, 25.180000, 24.340000, 24.760000, 25431900),
('MGLU3', '2021-01-06', 24.650000, 24.660000, 23.420000, 23.459999, 51799000),
('MGLU3', '2021-01-07', 23.639999, 23.850000, 22.950001, 23.160000, 42146600),
('MGLU3', '2021-01-08', 23.190001, 24.299999, 23.020000, 23.840000, 43988100),
('MGLU3', '2021-01-11', 23.500000, 23.850000, 23.330000, 23.490000, 26648100),
('MGLU3', '2021-01-12', 23.600000, 24.320000, 23.250000, 24.200001, 35040100),
('MGLU3', '2021-01-13', 24.200001, 24.200001, 23.549999, 24.020000, 25610200),
('MGLU3', '2021-01-14', 24.150000, 24.160000, 23.500000, 23.730000, 25548400),
('MGLU3', '2021-01-15', 23.730000, 24.110001, 23.350000, 23.959999, 32761100),
('MGLU3', '2021-01-18', 24.049999, 24.650000, 23.910000, 24.450001, 24257200),
('MGLU3', '2021-01-19', 24.540001, 24.950001, 23.820000, 24.080000, 21025600),
('MGLU3', '2021-01-20', 24.180000, 25.530001, 24.120001, 25.420000, 48089300),
('MGLU3', '2021-01-21', 25.400000, 25.650000, 24.850000, 25.490000, 33038900),
('MGLU3', '2021-01-22', 25.129999, 26.299999, 25.100000, 25.990000, 43004200),
('MGLU3', '2021-01-26', 26.250000, 27.070000, 25.670000, 25.750000, 44474300),
('MGLU3', '2021-01-27', 25.719999, 26.389999, 25.350000, 25.790001, 44942000),
('MGLU3', '2021-01-28', 25.870001, 26.500000, 25.389999, 26.190001, 32819900),
('MGLU3', '2021-01-29', 25.740000, 26.080000, 25.030001, 25.270000, 36141300),
('MGLU3', '2021-02-01', 25.680000, 25.740000, 24.750000, 24.930000, 29267700),
('MGLU3', '2021-02-02', 25.299999, 25.730000, 25.200001, 25.299999, 27563200),
('MGLU3', '2021-02-03', 25.440001, 25.770000, 25.040001, 25.650000, 20963300),
('MGLU3', '2021-02-04', 25.639999, 26.200001, 25.160000, 25.309999, 19706400),
('MGLU3', '2021-02-05', 25.379999, 26.090000, 25.379999, 25.850000, 24918700),
('MGLU3', '2021-02-08', 25.850000, 26.400000, 25.520000, 26.160000, 25773300),
('MGLU3', '2021-02-09', 26.160000, 26.450001, 25.900000, 26.240000, 19348100),
('MGLU3', '2021-02-10', 26.100000, 26.120001, 25.110001, 25.299999, 40037100),
('MGLU3', '2021-02-11', 25.299999, 25.950001, 25.299999, 25.650000, 20569900),
('MGLU3', '2021-02-12', 25.520000, 25.980000, 25.350000, 25.910000, 15132400),
('MGLU3', '2021-02-18', 25.500000, 25.590000, 24.799999, 25.040001, 22577800),
('MGLU3', '2021-02-19', 24.920000, 25.389999, 24.190001, 24.940001, 38672200),
('MGLU3', '2021-02-22', 24.230000, 24.520000, 23.660000, 24.250000, 41412400),
('MGLU3', '2021-02-23', 24.299999, 25.080000, 23.850000, 24.860001, 43889700),
('MGLU3', '2021-02-24', 24.930000, 25.100000, 24.200001, 24.639999, 37411000),
('MGLU3', '2021-02-25', 24.590000, 25.020000, 23.809999, 24.049999, 57969900),
('MGLU3', '2021-02-26', 24.080000, 24.959999, 23.980000, 24.180000, 45690100),
('MGLU3', '2021-03-01', 24.559999, 25.000000, 24.170000, 24.549999, 22131200),
('MGLU3', '2021-03-02', 24.290001, 24.600000, 23.590000, 24.270000, 35351400),
('MGLU3', '2021-03-03', 24.530001, 25.280001, 23.500000, 25.120001, 47195300),
('MGLU3', '2021-03-04', 25.110001, 25.700001, 24.879999, 25.440001, 40538300),
('MGLU3', '2021-03-05', 25.190001, 25.340000, 24.559999, 25.129999, 45992500),
('MGLU3', '2021-03-08', 24.690001, 24.770000, 23.100000, 23.100000, 82907400),
('MGLU3', '2021-03-09', 23.549999, 23.969999, 23.309999, 23.389999, 73816700),
('MGLU3', '2021-03-10', 23.750000, 25.090000, 23.469999, 24.900000, 41874800),
('MGLU3', '2021-03-11', 25.070000, 25.080000, 24.459999, 24.799999, 30648100),
('MGLU3', '2021-03-12', 24.600000, 24.900000, 24.270000, 24.570000, 24567300),
('MGLU3', '2021-03-15', 24.350000, 24.760000, 23.549999, 23.719999, 77116200),
('MGLU3', '2021-03-16', 23.820000, 24.389999, 23.600000, 24.150000, 38217700),
('MGLU3', '2021-03-17', 23.860001, 24.049999, 23.410000, 23.940001, 37571800),
('MGLU3', '2021-03-18', 23.760000, 23.850000, 22.070000, 22.280001, 54327100),
('MGLU3', '2021-03-19', 22.480000, 22.650000, 22.030001, 22.290001, 63771900),
('MGLU3', '2021-03-22', 22.400000, 22.730000, 21.450001, 21.910000, 46283500),
('MGLU3', '2021-03-23', 21.799999, 22.030001, 21.350000, 21.510000, 30972400),
('MGLU3', '2021-03-24', 21.480000, 21.510000, 20.209999, 20.370001, 59851100),
('MGLU3', '2021-03-25', 20.049999, 20.969999, 19.969999, 20.299999, 49084600),
('MGLU3', '2021-03-26', 20.400000, 20.700001, 19.700001, 19.980000, 50504800),
('MGLU3', '2021-03-29', 19.930000, 20.049999, 19.400000, 19.650000, 41482100),
('MGLU3', '2021-03-30', 19.490000, 20.320000, 19.420000, 20.059999, 36267200),
('MGLU3', '2021-03-31', 20.160000, 20.459999, 19.670000, 20.240000, 36377800),
('MGLU3', '2021-04-01', 20.280001, 21.020000, 20.049999, 20.440001, 43136300),
('MGLU3', '2021-04-05', 20.600000, 20.730000, 19.930000, 20.420000, 27289400),
('MGLU3', '2021-04-06', 20.340000, 20.719999, 20.059999, 20.600000, 26541200),
('MGLU3', '2021-04-07', 20.500000, 20.530001, 20.030001, 20.180000, 25362800),
('MGLU3', '2021-04-08', 20.230000, 21.900000, 20.209999, 21.850000, 56482000),
('MGLU3', '2021-04-09', 21.650000, 22.020000, 21.600000, 21.670000, 35804300),
('MGLU3', '2021-04-12', 21.780001, 21.930000, 21.610001, 21.650000, 20807400),
('MGLU3', '2021-04-13', 21.719999, 22.290001, 21.480000, 22.200001, 29003400),
('MGLU3', '2021-04-14', 22.350000, 22.350000, 21.870001, 22.120001, 24257100),
('MGLU3', '2021-04-15', 22.219999, 22.520000, 22.100000, 22.200001, 18452800),
('MGLU3', '2021-04-16', 22.190001, 22.250000, 21.760000, 21.920000, 19863700),
('MGLU3', '2021-04-19', 21.910000, 22.150000, 21.540001, 21.650000, 22104000),
('MGLU3', '2021-04-20', 21.639999, 21.799999, 21.420000, 21.600000, 20527200),
('MGLU3', '2021-04-22', 21.709999, 21.850000, 21.110001, 21.150000, 22627800),
('MGLU3', '2021-04-23', 21.260000, 21.730000, 21.129999, 21.730000, 25864500),
('MGLU3', '2021-04-26', 21.610001, 21.809999, 21.500000, 21.709999, 19630100),
('MGLU3', '2021-04-27', 21.600000, 21.650000, 20.930000, 20.950001, 15920900),
('MGLU3', '2021-04-28', 20.940001, 21.100000, 20.580000, 20.650000, 28538900),
('MGLU3', '2021-04-29', 20.629999, 20.670000, 19.910000, 20.260000, 34394600),
('MGLU3', '2021-04-30', 20.100000, 20.389999, 19.870001, 20.030001, 29426800),
('MGLU3', '2021-05-03', 20.110001, 20.250000, 19.900000, 20.180000, 17801100),
('MGLU3', '2021-05-04', 20.180000, 20.230000, 19.639999, 19.750000, 19458300),
('MGLU3', '2021-05-05', 19.850000, 20.090000, 19.680000, 19.900000, 15035400),
('MGLU3', '2021-05-06', 19.850000, 19.950001, 19.299999, 19.459999, 27062800),
('MGLU3', '2021-05-07', 19.580000, 19.900000, 19.330000, 19.889999, 23586600),
('MGLU3', '2021-05-10', 19.889999, 19.980000, 19.049999, 19.200001, 22189400),
('MGLU3', '2021-05-11', 19.000000, 19.389999, 18.660000, 19.320000, 26674800),
('MGLU3', '2021-05-12', 19.000000, 19.150000, 18.500000, 18.590000, 21900200),
('MGLU3', '2021-05-13', 18.809999, 19.250000, 18.730000, 19.129999, 19821800),
('MGLU3', '2021-05-14', 19.600000, 19.740000, 18.969999, 19.150000, 27030400),
('MGLU3', '2021-05-17', 19.120001, 19.219999, 18.730000, 18.860001, 15761200);
", error: duplicate key value violates unique constraint "daily_data_pkey"
DETAIL:  Key (ticker, day)=(MGLU3  , 2020-09-30 00:00:00) already exists.

2021-05-18 15:36:06,465:INFO:__main__:Program started.
2021-05-18 15:36:06,467:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:36:06,468:DEBUG:utils:File found.
2021-05-18 15:36:06,468:DEBUG:utils:The function 'read_cfg' took 1.17 milliseconds to run.
2021-05-18 15:36:06,481:DEBUG:utils:The function 'get_ticker_config_data' took 12.77 milliseconds to run.
2021-05-18 15:36:06,482:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:36:06,482:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:36:06,499:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:36:06,512:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:36:07,417:ERROR:db_model:Error executing query "INSERT INTO daily_candles (ticker, day, open_price, max_price, min_price, close_price, volume)
VALUES
('MGLU3', '2020-09-30', 22.004583, 22.451617, 21.787308, 22.276798, 46979200),
('MGLU3', '2020-10-01', 22.311762, 22.951097, 22.279297, 22.951097, 45613200),
('MGLU3', '2020-10-02', 22.738819, 22.921128, 21.877215, 21.989599, 59527200),
('MGLU3', '2020-10-05', 22.221857, 22.651408, 22.042044, 22.511555, 48107600),
('MGLU3', '2020-10-06', 22.726330, 22.776277, 22.191887, 22.301773, 42778000),
('MGLU3', '2020-10-07', 22.401669, 22.668891, 22.201878, 22.211868, 41633600),
('MGLU3', '2020-10-08', 22.426644, 22.976071, 22.251825, 22.943605, 46569200),
('MGLU3', '2020-10-09', 22.951098, 24.511972, 22.876175, 24.511972, 92367600),
('MGLU3', '2020-10-13', 24.856612, 26.072846, 24.849120, 25.972950, 94711200),
('MGLU3', '2020-10-14', 26.472429, 27.221648, 25.013949, 25.653282, 83598100),
('MGLU3', '2020-10-15', 24.993970, 26.042876, 24.973990, 25.483459, 34750000),
('MGLU3', '2020-10-16', 25.733200, 26.022897, 25.133824, 25.773157, 32673100),
('MGLU3', '2020-10-19', 26.082836, 26.272637, 25.323626, 25.663273, 36433600),
('MGLU3', '2020-10-20', 25.773157, 26.112803, 25.623313, 26.012909, 27788700),
('MGLU3', '2020-10-21', 25.972950, 26.772117, 25.932991, 26.192720, 35433800),
('MGLU3', '2020-10-22', 26.322585, 26.372533, 25.972949, 26.072845, 23097100),
('MGLU3', '2020-10-23', 26.072845, 26.182729, 25.623313, 25.893032, 23943900),
('MGLU3', '2020-10-26', 25.773157, 26.072846, 25.083876, 25.443501, 25781400),
('MGLU3', '2020-10-27', 25.503440, 25.723210, 25.093866, 25.423523, 20697400),
('MGLU3', '2020-10-28', 24.774197, 25.213740, 24.374614, 24.604374, 36016800),
('MGLU3', '2020-10-29', 24.374614, 25.553387, 23.855155, 25.333616, 37853300),
('MGLU3', '2020-10-30', 25.123833, 25.273677, 24.134864, 24.604374, 31118300),
('MGLU3', '2020-11-03', 25.253700, 25.363584, 24.724251, 24.964001, 25250200),
('MGLU3', '2020-11-04', 25.373573, 26.602293, 25.343606, 26.162752, 51188300),
('MGLU3', '2020-11-05', 26.852033, 27.671182, 26.712180, 27.421442, 46382700),
('MGLU3', '2020-11-06', 26.971909, 27.331535, 26.482419, 27.301565, 33294500),
('MGLU3', '2020-11-09', 28.120712, 28.280545, 26.322585, 26.422482, 71761700),
('MGLU3', '2020-11-10', 25.982939, 27.091785, 25.153803, 25.193760, 79060600),
('MGLU3', '2020-11-11', 25.373574, 26.182730, 25.253700, 25.553387, 51171300),
('MGLU3', '2020-11-12', 25.503438, 25.923002, 24.884083, 25.453489, 33819000),
('MGLU3', '2020-11-13', 25.733200, 25.753180, 24.834137, 25.073887, 35563800),
('MGLU3', '2020-11-16', 25.273677, 25.363583, 24.244750, 24.824146, 41356200),
('MGLU3', '2020-11-17', 24.724251, 25.243710, 24.504481, 24.704271, 31907900),
('MGLU3', '2020-11-18', 24.674303, 24.704270, 24.044957, 24.514469, 31523100),
('MGLU3', '2020-11-19', 24.504480, 24.694281, 23.795218, 24.614365, 50040100),
('MGLU3', '2020-11-23', 24.274717, 24.344646, 23.195841, 23.395634, 59639700),
('MGLU3', '2020-11-24', 23.345686, 23.945060, 22.876174, 23.675343, 57465100),
('MGLU3', '2020-11-25', 23.645374, 24.284708, 23.495531, 23.975031, 38914800),
('MGLU3', '2020-11-26', 23.875133, 24.274717, 23.795217, 24.224770, 23108700),
('MGLU3', '2020-11-27', 24.294697, 24.524457, 23.895114, 24.164833, 36125600),
('MGLU3', '2020-11-30', 24.174823, 24.664313, 23.195841, 23.355675, 67110300),
('MGLU3', '2020-12-01', 23.625395, 23.745271, 22.576488, 22.856195, 49280200),
('MGLU3', '2020-12-02', 22.856195, 23.145894, 22.726331, 23.026018, 25575700),
('MGLU3', '2020-12-03', 23.055988, 23.575448, 22.906145, 23.275759, 33183700),
('MGLU3', '2020-12-04', 23.395634, 23.825186, 23.145894, 23.635384, 22737900),
('MGLU3', '2020-12-07', 23.635384, 24.244750, 23.405624, 23.775238, 24571500),
('MGLU3', '2020-12-08', 23.705312, 24.924044, 23.585438, 24.924044, 42095700),
('MGLU3', '2020-12-09', 24.924043, 25.033928, 23.785228, 23.955051, 41174000),
('MGLU3', '2020-12-10', 24.074927, 24.134864, 23.145894, 23.375654, 33674300),
('MGLU3', '2020-12-11', 23.065978, 23.505521, 22.696362, 22.966082, 38144400),
('MGLU3', '2020-12-14', 22.976070, 24.194800, 22.846206, 24.024977, 43300500),
('MGLU3', '2020-12-15', 24.024978, 24.794177, 23.615404, 24.584396, 39496800),
('MGLU3', '2020-12-16', 24.474510, 24.944020, 24.144853, 24.934031, 41309900),
('MGLU3', '2020-12-17', 24.834136, 25.083876, 24.334656, 24.514469, 23427200),
('MGLU3', '2020-12-18', 24.454530, 24.604374, 24.074927, 24.494490, 31019400),
('MGLU3', '2020-12-21', 23.905103, 25.353593, 23.585436, 24.973989, 52188800),
('MGLU3', '2020-12-22', 25.263689, 25.393553, 24.824146, 25.133823, 25236200),
('MGLU3', '2020-12-23', 25.223731, 25.603334, 24.944021, 24.944021, 20558600),
('MGLU3', '2020-12-28', 24.754220, 25.303647, 24.374614, 25.223730, 23099100),
('MGLU3', '2020-12-29', 25.203751, 25.533408, 24.993971, 25.253700, 17789700),
('MGLU3', '2020-12-30', 25.370001, 25.660000, 24.950001, 24.950001, 19188700),
('MGLU3', '2021-01-04', 25.260000, 25.580000, 24.870001, 25.200001, 25706100),
('MGLU3', '2021-01-05', 25.100000, 25.180000, 24.340000, 24.760000, 25431900),
('MGLU3', '2021-01-06', 24.650000, 24.660000, 23.420000, 23.459999, 51799000),
('MGLU3', '2021-01-07', 23.639999, 23.850000, 22.950001, 23.160000, 42146600),
('MGLU3', '2021-01-08', 23.190001, 24.299999, 23.020000, 23.840000, 43988100),
('MGLU3', '2021-01-11', 23.500000, 23.850000, 23.330000, 23.490000, 26648100),
('MGLU3', '2021-01-12', 23.600000, 24.320000, 23.250000, 24.200001, 35040100),
('MGLU3', '2021-01-13', 24.200001, 24.200001, 23.549999, 24.020000, 25610200),
('MGLU3', '2021-01-14', 24.150000, 24.160000, 23.500000, 23.730000, 25548400),
('MGLU3', '2021-01-15', 23.730000, 24.110001, 23.350000, 23.959999, 32761100),
('MGLU3', '2021-01-18', 24.049999, 24.650000, 23.910000, 24.450001, 24257200),
('MGLU3', '2021-01-19', 24.540001, 24.950001, 23.820000, 24.080000, 21025600),
('MGLU3', '2021-01-20', 24.180000, 25.530001, 24.120001, 25.420000, 48089300),
('MGLU3', '2021-01-21', 25.400000, 25.650000, 24.850000, 25.490000, 33038900),
('MGLU3', '2021-01-22', 25.129999, 26.299999, 25.100000, 25.990000, 43004200),
('MGLU3', '2021-01-26', 26.250000, 27.070000, 25.670000, 25.750000, 44474300),
('MGLU3', '2021-01-27', 25.719999, 26.389999, 25.350000, 25.790001, 44942000),
('MGLU3', '2021-01-28', 25.870001, 26.500000, 25.389999, 26.190001, 32819900),
('MGLU3', '2021-01-29', 25.740000, 26.080000, 25.030001, 25.270000, 36141300),
('MGLU3', '2021-02-01', 25.680000, 25.740000, 24.750000, 24.930000, 29267700),
('MGLU3', '2021-02-02', 25.299999, 25.730000, 25.200001, 25.299999, 27563200),
('MGLU3', '2021-02-03', 25.440001, 25.770000, 25.040001, 25.650000, 20963300),
('MGLU3', '2021-02-04', 25.639999, 26.200001, 25.160000, 25.309999, 19706400),
('MGLU3', '2021-02-05', 25.379999, 26.090000, 25.379999, 25.850000, 24918700),
('MGLU3', '2021-02-08', 25.850000, 26.400000, 25.520000, 26.160000, 25773300),
('MGLU3', '2021-02-09', 26.160000, 26.450001, 25.900000, 26.240000, 19348100),
('MGLU3', '2021-02-10', 26.100000, 26.120001, 25.110001, 25.299999, 40037100),
('MGLU3', '2021-02-11', 25.299999, 25.950001, 25.299999, 25.650000, 20569900),
('MGLU3', '2021-02-12', 25.520000, 25.980000, 25.350000, 25.910000, 15132400),
('MGLU3', '2021-02-18', 25.500000, 25.590000, 24.799999, 25.040001, 22577800),
('MGLU3', '2021-02-19', 24.920000, 25.389999, 24.190001, 24.940001, 38672200),
('MGLU3', '2021-02-22', 24.230000, 24.520000, 23.660000, 24.250000, 41412400),
('MGLU3', '2021-02-23', 24.299999, 25.080000, 23.850000, 24.860001, 43889700),
('MGLU3', '2021-02-24', 24.930000, 25.100000, 24.200001, 24.639999, 37411000),
('MGLU3', '2021-02-25', 24.590000, 25.020000, 23.809999, 24.049999, 57969900),
('MGLU3', '2021-02-26', 24.080000, 24.959999, 23.980000, 24.180000, 45690100),
('MGLU3', '2021-03-01', 24.559999, 25.000000, 24.170000, 24.549999, 22131200),
('MGLU3', '2021-03-02', 24.290001, 24.600000, 23.590000, 24.270000, 35351400),
('MGLU3', '2021-03-03', 24.530001, 25.280001, 23.500000, 25.120001, 47195300),
('MGLU3', '2021-03-04', 25.110001, 25.700001, 24.879999, 25.440001, 40538300),
('MGLU3', '2021-03-05', 25.190001, 25.340000, 24.559999, 25.129999, 45992500),
('MGLU3', '2021-03-08', 24.690001, 24.770000, 23.100000, 23.100000, 82907400),
('MGLU3', '2021-03-09', 23.549999, 23.969999, 23.309999, 23.389999, 73816700),
('MGLU3', '2021-03-10', 23.750000, 25.090000, 23.469999, 24.900000, 41874800),
('MGLU3', '2021-03-11', 25.070000, 25.080000, 24.459999, 24.799999, 30648100),
('MGLU3', '2021-03-12', 24.600000, 24.900000, 24.270000, 24.570000, 24567300),
('MGLU3', '2021-03-15', 24.350000, 24.760000, 23.549999, 23.719999, 77116200),
('MGLU3', '2021-03-16', 23.820000, 24.389999, 23.600000, 24.150000, 38217700),
('MGLU3', '2021-03-17', 23.860001, 24.049999, 23.410000, 23.940001, 37571800),
('MGLU3', '2021-03-18', 23.760000, 23.850000, 22.070000, 22.280001, 54327100),
('MGLU3', '2021-03-19', 22.480000, 22.650000, 22.030001, 22.290001, 63771900),
('MGLU3', '2021-03-22', 22.400000, 22.730000, 21.450001, 21.910000, 46283500),
('MGLU3', '2021-03-23', 21.799999, 22.030001, 21.350000, 21.510000, 30972400),
('MGLU3', '2021-03-24', 21.480000, 21.510000, 20.209999, 20.370001, 59851100),
('MGLU3', '2021-03-25', 20.049999, 20.969999, 19.969999, 20.299999, 49084600),
('MGLU3', '2021-03-26', 20.400000, 20.700001, 19.700001, 19.980000, 50504800),
('MGLU3', '2021-03-29', 19.930000, 20.049999, 19.400000, 19.650000, 41482100),
('MGLU3', '2021-03-30', 19.490000, 20.320000, 19.420000, 20.059999, 36267200),
('MGLU3', '2021-03-31', 20.160000, 20.459999, 19.670000, 20.240000, 36377800),
('MGLU3', '2021-04-01', 20.280001, 21.020000, 20.049999, 20.440001, 43136300),
('MGLU3', '2021-04-05', 20.600000, 20.730000, 19.930000, 20.420000, 27289400),
('MGLU3', '2021-04-06', 20.340000, 20.719999, 20.059999, 20.600000, 26541200),
('MGLU3', '2021-04-07', 20.500000, 20.530001, 20.030001, 20.180000, 25362800),
('MGLU3', '2021-04-08', 20.230000, 21.900000, 20.209999, 21.850000, 56482000),
('MGLU3', '2021-04-09', 21.650000, 22.020000, 21.600000, 21.670000, 35804300),
('MGLU3', '2021-04-12', 21.780001, 21.930000, 21.610001, 21.650000, 20807400),
('MGLU3', '2021-04-13', 21.719999, 22.290001, 21.480000, 22.200001, 29003400),
('MGLU3', '2021-04-14', 22.350000, 22.350000, 21.870001, 22.120001, 24257100),
('MGLU3', '2021-04-15', 22.219999, 22.520000, 22.100000, 22.200001, 18452800),
('MGLU3', '2021-04-16', 22.190001, 22.250000, 21.760000, 21.920000, 19863700),
('MGLU3', '2021-04-19', 21.910000, 22.150000, 21.540001, 21.650000, 22104000),
('MGLU3', '2021-04-20', 21.639999, 21.799999, 21.420000, 21.600000, 20527200),
('MGLU3', '2021-04-22', 21.709999, 21.850000, 21.110001, 21.150000, 22627800),
('MGLU3', '2021-04-23', 21.260000, 21.730000, 21.129999, 21.730000, 25864500),
('MGLU3', '2021-04-26', 21.610001, 21.809999, 21.500000, 21.709999, 19630100),
('MGLU3', '2021-04-27', 21.600000, 21.650000, 20.930000, 20.950001, 15920900),
('MGLU3', '2021-04-28', 20.940001, 21.100000, 20.580000, 20.650000, 28538900),
('MGLU3', '2021-04-29', 20.629999, 20.670000, 19.910000, 20.260000, 34394600),
('MGLU3', '2021-04-30', 20.100000, 20.389999, 19.870001, 20.030001, 29426800),
('MGLU3', '2021-05-03', 20.110001, 20.250000, 19.900000, 20.180000, 17801100),
('MGLU3', '2021-05-04', 20.180000, 20.230000, 19.639999, 19.750000, 19458300),
('MGLU3', '2021-05-05', 19.850000, 20.090000, 19.680000, 19.900000, 15035400),
('MGLU3', '2021-05-06', 19.850000, 19.950001, 19.299999, 19.459999, 27062800),
('MGLU3', '2021-05-07', 19.580000, 19.900000, 19.330000, 19.889999, 23586600),
('MGLU3', '2021-05-10', 19.889999, 19.980000, 19.049999, 19.200001, 22189400),
('MGLU3', '2021-05-11', 19.000000, 19.389999, 18.660000, 19.320000, 26674800),
('MGLU3', '2021-05-12', 19.000000, 19.150000, 18.500000, 18.590000, 21900200),
('MGLU3', '2021-05-13', 18.809999, 19.250000, 18.730000, 19.129999, 19821800),
('MGLU3', '2021-05-14', 19.600000, 19.740000, 18.969999, 19.150000, 27030400),
('MGLU3', '2021-05-17', 19.120001, 19.219999, 18.730000, 18.860001, 15761200);
", error: duplicate key value violates unique constraint "daily_data_pkey"
DETAIL:  Key (ticker, day)=(MGLU3  , 2021-03-22 00:00:00) already exists.

2021-05-18 15:37:35,204:INFO:__main__:Program started.
2021-05-18 15:37:35,207:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:37:35,208:DEBUG:utils:File found.
2021-05-18 15:37:35,209:DEBUG:utils:The function 'read_cfg' took 2.57 milliseconds to run.
2021-05-18 15:37:35,223:DEBUG:utils:The function 'get_ticker_config_data' took 14.28 milliseconds to run.
2021-05-18 15:37:35,224:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:37:35,224:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:37:35,247:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:37:35,257:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:42:01,715:INFO:__main__:Program started.
2021-05-18 15:42:01,720:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:42:01,721:DEBUG:utils:File found.
2021-05-18 15:42:01,721:DEBUG:utils:The function 'read_cfg' took 2.29 milliseconds to run.
2021-05-18 15:42:01,731:DEBUG:utils:The function 'get_ticker_config_data' took 8.84 milliseconds to run.
2021-05-18 15:42:01,731:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:42:01,731:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:42:01,745:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:42:01,753:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:42:02,810:ERROR:db_model:Error executing query "INSERT INTO daily_candles (ticker, day, open_price, max_price, min_price, close_price, volume)
VALUES
('MGLU3', '2021-03-22', 22.400000, 22.730000, 21.450001, 21.910000, 46283500),
('MGLU3', '2021-03-23', 21.799999, 22.030001, 21.350000, 21.510000, 30972400),
('MGLU3', '2021-03-24', 21.480000, 21.510000, 20.209999, 20.370001, 59851100),
('MGLU3', '2021-03-25', 20.049999, 20.969999, 19.969999, 20.299999, 49084600),
('MGLU3', '2021-03-26', 20.400000, 20.700001, 19.700001, 19.980000, 50504800),
('MGLU3', '2021-03-29', 19.930000, 20.049999, 19.400000, 19.650000, 41482100),
('MGLU3', '2021-03-30', 19.490000, 20.320000, 19.420000, 20.059999, 36267200),
('MGLU3', '2021-03-31', 20.160000, 20.459999, 19.670000, 20.240000, 36377800),
('MGLU3', '2021-04-01', 20.280001, 21.020000, 20.049999, 20.440001, 43136300),
('MGLU3', '2021-04-05', 20.600000, 20.730000, 19.930000, 20.420000, 27289400),
('MGLU3', '2021-04-06', 20.340000, 20.719999, 20.059999, 20.600000, 26541200),
('MGLU3', '2021-04-07', 20.500000, 20.530001, 20.030001, 20.180000, 25362800),
('MGLU3', '2021-04-08', 20.230000, 21.900000, 20.209999, 21.850000, 56482000),
('MGLU3', '2021-04-09', 21.650000, 22.020000, 21.600000, 21.670000, 35804300),
('MGLU3', '2021-04-12', 21.780001, 21.930000, 21.610001, 21.650000, 20807400),
('MGLU3', '2021-04-13', 21.719999, 22.290001, 21.480000, 22.200001, 29003400),
('MGLU3', '2021-04-14', 22.350000, 22.350000, 21.870001, 22.120001, 24257100),
('MGLU3', '2021-04-15', 22.219999, 22.520000, 22.100000, 22.200001, 18452800),
('MGLU3', '2021-04-16', 22.190001, 22.250000, 21.760000, 21.920000, 19863700),
('MGLU3', '2021-04-19', 21.910000, 22.150000, 21.540001, 21.650000, 22104000),
('MGLU3', '2021-04-20', 21.639999, 21.799999, 21.420000, 21.600000, 20527200),
('MGLU3', '2021-04-22', 21.709999, 21.850000, 21.110001, 21.150000, 22627800),
('MGLU3', '2021-04-23', 21.260000, 21.730000, 21.129999, 21.730000, 25864500),
('MGLU3', '2021-04-26', 21.610001, 21.809999, 21.500000, 21.709999, 19630100),
('MGLU3', '2021-04-27', 21.600000, 21.650000, 20.930000, 20.950001, 15920900),
('MGLU3', '2021-04-28', 20.940001, 21.100000, 20.580000, 20.650000, 28538900),
('MGLU3', '2021-04-29', 20.629999, 20.670000, 19.910000, 20.260000, 34394600),
('MGLU3', '2021-04-30', 20.100000, 20.389999, 19.870001, 20.030001, 29426800),
('MGLU3', '2021-05-03', 20.110001, 20.250000, 19.900000, 20.180000, 17801100),
('MGLU3', '2021-05-04', 20.180000, 20.230000, 19.639999, 19.750000, 19458300),
('MGLU3', '2021-05-05', 19.850000, 20.090000, 19.680000, 19.900000, 15035400),
('MGLU3', '2021-05-06', 19.850000, 19.950001, 19.299999, 19.459999, 27062800),
('MGLU3', '2021-05-07', 19.580000, 19.900000, 19.330000, 19.889999, 23586600),
('MGLU3', '2021-05-10', 19.889999, 19.980000, 19.049999, 19.200001, 22189400),
('MGLU3', '2021-05-11', 19.000000, 19.389999, 18.660000, 19.320000, 26674800),
('MGLU3', '2021-05-12', 19.000000, 19.150000, 18.500000, 18.590000, 21900200),
('MGLU3', '2021-05-13', 18.809999, 19.250000, 18.730000, 19.129999, 19821800),
('MGLU3', '2021-05-14', 19.600000, 19.740000, 18.969999, 19.150000, 27030400),
('MGLU3', '2021-05-17', 19.120001, 19.219999, 18.730000, 18.860001, 15761200);
", error: duplicate key value violates unique constraint "daily_data_pkey"
DETAIL:  Key (ticker, day)=(MGLU3  , 2021-03-22 00:00:00) already exists.

2021-05-18 15:43:44,013:INFO:__main__:Program started.
2021-05-18 15:43:44,016:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:43:44,017:DEBUG:utils:File found.
2021-05-18 15:43:44,017:DEBUG:utils:The function 'read_cfg' took 2.05 milliseconds to run.
2021-05-18 15:43:44,025:DEBUG:utils:The function 'get_ticker_config_data' took 7.66 milliseconds to run.
2021-05-18 15:43:44,026:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:43:44,026:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:43:44,052:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:43:44,061:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:46:42,977:INFO:__main__:Program started.
2021-05-18 15:46:42,978:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:46:42,979:DEBUG:utils:File found.
2021-05-18 15:46:42,979:DEBUG:utils:The function 'read_cfg' took 0.90 milliseconds to run.
2021-05-18 15:46:42,988:DEBUG:utils:The function 'get_ticker_config_data' took 8.75 milliseconds to run.
2021-05-18 15:46:42,988:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:46:42,989:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:46:43,001:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:46:43,010:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:48:14,340:INFO:__main__:Program started.
2021-05-18 15:48:14,341:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 15:48:14,342:DEBUG:utils:File found.
2021-05-18 15:48:14,342:DEBUG:utils:The function 'read_cfg' took 1.00 milliseconds to run.
2021-05-18 15:48:14,351:DEBUG:utils:The function 'get_ticker_config_data' took 9.15 milliseconds to run.
2021-05-18 15:48:14,352:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:48:14,352:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 15:48:14,364:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 15:48:14,373:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:12:43,488:INFO:__main__:Program started.
2021-05-18 17:12:43,490:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 17:12:43,491:DEBUG:utils:File found.
2021-05-18 17:12:43,492:DEBUG:utils:The function 'read_cfg' took 2.26 milliseconds to run.
2021-05-18 17:12:43,516:DEBUG:utils:The function 'get_ticker_config_data' took 23.70 milliseconds to run.
2021-05-18 17:12:43,517:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:12:43,517:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:12:43,536:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:12:43,554:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:12:44,792:ERROR:db_model:Error executing query "INSERT INTO daily_candles (ticker, day, open_price, max_price, min_price, close_price, volume)
VALUES
", error: syntax error at end of input
LINE 3:
        ^

2021-05-18 17:14:54,576:INFO:__main__:Program started.
2021-05-18 17:14:54,578:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 17:14:54,580:DEBUG:utils:File found.
2021-05-18 17:14:54,581:DEBUG:utils:The function 'read_cfg' took 2.82 milliseconds to run.
2021-05-18 17:14:54,597:DEBUG:utils:The function 'get_ticker_config_data' took 15.92 milliseconds to run.
2021-05-18 17:14:54,597:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:14:54,598:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:14:54,611:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:14:54,622:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:15:41,554:INFO:__main__:Program started.
2021-05-18 17:15:41,555:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 17:15:41,556:DEBUG:utils:File found.
2021-05-18 17:15:41,557:DEBUG:utils:The function 'read_cfg' took 1.73 milliseconds to run.
2021-05-18 17:15:41,569:DEBUG:utils:The function 'get_ticker_config_data' took 12.60 milliseconds to run.
2021-05-18 17:15:41,570:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:15:41,570:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:15:41,584:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:15:41,592:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:27:01,993:INFO:__main__:Program started.
2021-05-18 17:27:01,995:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 17:27:01,996:DEBUG:utils:File found.
2021-05-18 17:27:01,997:DEBUG:utils:The function 'read_cfg' took 2.44 milliseconds to run.
2021-05-18 17:27:02,012:DEBUG:utils:The function 'get_ticker_config_data' took 14.58 milliseconds to run.
2021-05-18 17:27:02,012:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:27:02,013:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:27:02,041:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:27:02,054:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:29:41,859:INFO:__main__:Program started.
2021-05-18 17:29:41,862:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 17:29:41,866:DEBUG:utils:File found.
2021-05-18 17:29:41,867:DEBUG:utils:The function 'read_cfg' took 5.00 milliseconds to run.
2021-05-18 17:29:41,878:DEBUG:utils:The function 'get_ticker_config_data' took 10.91 milliseconds to run.
2021-05-18 17:30:05,384:INFO:__main__:Program started.
2021-05-18 17:30:05,385:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 17:30:05,385:DEBUG:utils:File found.
2021-05-18 17:30:05,385:DEBUG:utils:The function 'read_cfg' took 1.05 milliseconds to run.
2021-05-18 17:30:05,394:DEBUG:utils:The function 'get_ticker_config_data' took 8.55 milliseconds to run.
2021-05-18 17:30:05,395:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:30:05,395:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 31/01/2020
2021-05-18 17:30:05,414:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:30:05,426:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:32:48,502:INFO:__main__:Program started.
2021-05-18 17:32:48,503:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 17:32:48,504:DEBUG:utils:File found.
2021-05-18 17:32:48,504:DEBUG:utils:The function 'read_cfg' took 0.96 milliseconds to run.
2021-05-18 17:32:48,514:DEBUG:utils:The function 'get_ticker_config_data' took 9.46 milliseconds to run.
2021-05-18 17:32:48,514:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:32:48,514:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 31/01/2020
2021-05-18 17:32:48,527:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:32:48,538:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:33:39,532:INFO:__main__:Program started.
2021-05-18 17:33:39,534:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 17:33:39,535:DEBUG:utils:File found.
2021-05-18 17:33:39,536:DEBUG:utils:The function 'read_cfg' took 1.71 milliseconds to run.
2021-05-18 17:33:39,548:DEBUG:utils:The function 'get_ticker_config_data' took 12.12 milliseconds to run.
2021-05-18 17:33:39,549:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:33:39,549:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 31/01/2020
2021-05-18 17:33:39,584:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:33:39,596:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:34:29,059:INFO:__main__:Program started.
2021-05-18 17:34:29,060:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 17:34:29,061:DEBUG:utils:File found.
2021-05-18 17:34:29,061:DEBUG:utils:The function 'read_cfg' took 1.31 milliseconds to run.
2021-05-18 17:34:29,079:DEBUG:utils:The function 'get_ticker_config_data' took 17.41 milliseconds to run.
2021-05-18 17:34:29,081:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:34:29,081:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 31/01/2020
2021-05-18 17:34:29,107:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:34:29,137:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:36:32,543:INFO:__main__:Program started.
2021-05-18 17:36:32,546:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 17:36:32,546:DEBUG:utils:File found.
2021-05-18 17:36:32,547:DEBUG:utils:The function 'read_cfg' took 1.23 milliseconds to run.
2021-05-18 17:36:32,557:DEBUG:utils:The function 'get_ticker_config_data' took 9.90 milliseconds to run.
2021-05-18 17:36:32,557:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:36:32,557:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 31/01/2020
2021-05-18 17:36:32,618:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:36:32,627:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:37:15,561:INFO:__main__:Program started.
2021-05-18 17:37:15,563:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 17:37:15,563:DEBUG:utils:File found.
2021-05-18 17:37:15,564:DEBUG:utils:The function 'read_cfg' took 1.38 milliseconds to run.
2021-05-18 17:37:15,576:DEBUG:utils:The function 'get_ticker_config_data' took 11.95 milliseconds to run.
2021-05-18 17:37:15,577:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:37:15,577:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 31/01/2020
2021-05-18 17:37:15,589:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:37:15,597:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:39:49,998:INFO:__main__:Program started.
2021-05-18 17:39:50,001:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 17:39:50,002:DEBUG:utils:File found.
2021-05-18 17:39:50,003:DEBUG:utils:The function 'read_cfg' took 2.16 milliseconds to run.
2021-05-18 17:39:50,015:DEBUG:utils:The function 'get_ticker_config_data' took 11.82 milliseconds to run.
2021-05-18 17:39:50,015:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:39:50,016:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 31/01/2020
2021-05-18 17:39:50,030:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:39:50,042:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:40:54,318:INFO:__main__:Program started.
2021-05-18 17:40:54,319:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 17:40:54,320:DEBUG:utils:File found.
2021-05-18 17:40:54,320:DEBUG:utils:The function 'read_cfg' took 0.80 milliseconds to run.
2021-05-18 17:40:54,333:DEBUG:utils:The function 'get_ticker_config_data' took 12.96 milliseconds to run.
2021-05-18 17:40:54,334:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:40:54,334:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 31/01/2020
2021-05-18 17:40:54,348:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:40:54,359:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:41:26,915:INFO:__main__:Program started.
2021-05-18 17:41:26,916:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 17:41:26,917:DEBUG:utils:File found.
2021-05-18 17:41:26,917:DEBUG:utils:The function 'read_cfg' took 0.86 milliseconds to run.
2021-05-18 17:41:26,932:DEBUG:utils:The function 'get_ticker_config_data' took 14.68 milliseconds to run.
2021-05-18 17:41:26,932:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:41:26,933:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 31/01/2020
2021-05-18 17:41:26,945:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:41:26,953:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:42:58,363:INFO:__main__:Program started.
2021-05-18 17:42:58,364:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-18 17:42:58,364:DEBUG:utils:File found.
2021-05-18 17:42:58,365:DEBUG:utils:The function 'read_cfg' took 1.26 milliseconds to run.
2021-05-18 17:42:58,381:DEBUG:utils:The function 'get_ticker_config_data' took 14.31 milliseconds to run.
2021-05-18 17:42:58,381:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 30/09/2020
2021-05-18 17:42:58,382:INFO:__main__:Ticker: BOVA11	Inital date: 01/01/2020		Final date: 31/01/2020
2021-05-18 17:42:58,399:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-18 17:42:58,413:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 12:52:11,704:INFO:__main__:Program started.
2021-05-19 12:52:11,707:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-19 12:52:11,708:DEBUG:utils:File found.
2021-05-19 12:52:11,709:DEBUG:utils:The function 'read_cfg' took 2.32 milliseconds to run.
2021-05-19 12:52:11,727:DEBUG:utils:The function 'get_ticker_config_data' took 18.42 milliseconds to run.
2021-05-19 12:52:11,728:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-19 12:52:11,728:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-19 12:52:11,788:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 12:52:11,800:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 12:55:19,694:INFO:__main__:Program started.
2021-05-19 12:55:19,696:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-19 12:55:19,697:DEBUG:utils:File found.
2021-05-19 12:55:19,698:DEBUG:utils:The function 'read_cfg' took 1.64 milliseconds to run.
2021-05-19 12:55:19,707:DEBUG:utils:The function 'get_ticker_config_data' took 9.44 milliseconds to run.
2021-05-19 12:55:19,708:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-19 12:55:19,708:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-19 12:55:19,722:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 12:55:19,731:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 12:56:01,201:INFO:__main__:Program started.
2021-05-19 12:56:01,203:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-19 12:56:01,203:DEBUG:utils:File found.
2021-05-19 12:56:01,203:DEBUG:utils:The function 'read_cfg' took 0.97 milliseconds to run.
2021-05-19 12:56:01,213:DEBUG:utils:The function 'get_ticker_config_data' took 9.97 milliseconds to run.
2021-05-19 12:56:01,214:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-19 12:56:01,214:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-19 12:56:01,229:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 12:56:01,241:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 12:56:09,238:ERROR:db_manager:yfinance has no data to ticker 'PRIO3' ('2020-01-01', '2021-05-19').
2021-05-19 12:57:27,028:INFO:__main__:Program started.
2021-05-19 12:57:27,029:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-19 12:57:27,029:DEBUG:utils:File found.
2021-05-19 12:57:27,030:DEBUG:utils:The function 'read_cfg' took 0.76 milliseconds to run.
2021-05-19 12:57:27,046:DEBUG:utils:The function 'get_ticker_config_data' took 16.41 milliseconds to run.
2021-05-19 12:57:27,047:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-19 12:57:27,047:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-19 12:57:27,067:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 12:57:27,083:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 12:59:55,177:INFO:__main__:Program started.
2021-05-19 12:59:55,180:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-19 12:59:55,180:DEBUG:utils:File found.
2021-05-19 12:59:55,181:DEBUG:utils:The function 'read_cfg' took 1.56 milliseconds to run.
2021-05-19 12:59:55,192:DEBUG:utils:The function 'get_ticker_config_data' took 11.10 milliseconds to run.
2021-05-19 12:59:55,192:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-19 12:59:55,193:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-19 12:59:55,205:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 12:59:55,214:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 13:03:16,380:INFO:__main__:Program started.
2021-05-19 13:03:16,381:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-19 13:03:16,382:DEBUG:utils:File found.
2021-05-19 13:03:16,382:DEBUG:utils:The function 'read_cfg' took 1.33 milliseconds to run.
2021-05-19 13:03:16,393:DEBUG:utils:The function 'get_ticker_config_data' took 10.49 milliseconds to run.
2021-05-19 13:03:16,394:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-19 13:03:16,421:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 13:08:12,277:INFO:__main__:Program started.
2021-05-19 13:08:12,280:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-19 13:08:12,282:DEBUG:utils:File found.
2021-05-19 13:08:12,285:DEBUG:utils:The function 'read_cfg' took 4.98 milliseconds to run.
2021-05-19 13:08:12,295:DEBUG:utils:The function 'get_ticker_config_data' took 10.10 milliseconds to run.
2021-05-19 13:08:12,296:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-19 13:08:12,321:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 13:08:51,703:INFO:__main__:Program started.
2021-05-19 13:08:51,704:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-19 13:08:51,705:DEBUG:utils:File found.
2021-05-19 13:08:51,705:DEBUG:utils:The function 'read_cfg' took 1.00 milliseconds to run.
2021-05-19 13:08:51,717:DEBUG:utils:The function 'get_ticker_config_data' took 11.60 milliseconds to run.
2021-05-19 13:08:51,718:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-19 13:08:51,729:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 13:09:49,529:INFO:__main__:Program started.
2021-05-19 13:09:49,531:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-19 13:09:49,532:DEBUG:utils:File found.
2021-05-19 13:09:49,532:DEBUG:utils:The function 'read_cfg' took 1.28 milliseconds to run.
2021-05-19 13:09:49,545:DEBUG:utils:The function 'get_ticker_config_data' took 12.34 milliseconds to run.
2021-05-19 13:09:49,545:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-19 13:09:49,556:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 13:10:20,562:INFO:__main__:Program started.
2021-05-19 13:10:20,563:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-19 13:10:20,563:DEBUG:utils:File found.
2021-05-19 13:10:20,564:DEBUG:utils:The function 'read_cfg' took 0.78 milliseconds to run.
2021-05-19 13:10:20,579:DEBUG:utils:The function 'get_ticker_config_data' took 15.62 milliseconds to run.
2021-05-19 13:10:20,580:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-19 13:10:20,595:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 13:11:16,535:INFO:__main__:Program started.
2021-05-19 13:11:16,537:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-19 13:11:16,538:DEBUG:utils:File found.
2021-05-19 13:11:16,539:DEBUG:utils:The function 'read_cfg' took 1.92 milliseconds to run.
2021-05-19 13:11:16,555:DEBUG:utils:The function 'get_ticker_config_data' took 15.59 milliseconds to run.
2021-05-19 13:11:16,555:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-19 13:11:16,588:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-19 13:58:44,014:INFO:__main__:Program started.
2021-05-19 13:58:44,016:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-19 13:58:44,017:DEBUG:utils:File found.
2021-05-19 13:58:44,017:DEBUG:utils:The function 'read_cfg' took 1.01 milliseconds to run.
2021-05-19 13:58:44,027:DEBUG:utils:The function 'get_ticker_config_data' took 10.40 milliseconds to run.
2021-05-19 13:58:44,028:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2019		Final date: 19/05/2021
2021-05-19 13:58:44,040:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-20 11:01:38,195:INFO:__main__:Program started.
2021-05-20 11:01:38,198:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-20 11:01:38,200:DEBUG:utils:File found.
2021-05-20 11:01:38,201:DEBUG:utils:The function 'read_cfg' took 2.47 milliseconds to run.
2021-05-20 11:01:38,212:DEBUG:utils:The function 'get_ticker_config_data' took 10.74 milliseconds to run.
2021-05-20 11:01:38,212:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2019		Final date: 19/05/2021
2021-05-20 11:01:38,232:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-20 11:01:55,071:ERROR:db_model:Error executing query "INSERT INTO daily_candles (ticker, day, open_price, max_price, min_price, close_price, volume)
VALUES
('PRIO3', '2019-01-02', 1.960000, 2.077800, 1.942200, 2.071200, 2565000),
('PRIO3', '2019-01-03', 2.089200, 2.089200, 2.046000, 2.075800, 3170000),
('PRIO3', '2019-01-04', 2.080000, 2.115600, 2.080000, 2.093200, 1490000),
('PRIO3', '2019-01-07', 2.120000, 2.148200, 2.088000, 2.091400, 2435000),
('PRIO3', '2019-01-08', 2.148400, 2.148400, 2.091200, 2.141400, 1285000),
('PRIO3', '2019-01-09', 2.148000, 2.199800, 2.148000, 2.167000, 1710000),
('PRIO3', '2019-01-10', 2.180000, 2.212000, 2.138000, 2.179200, 2660000),
('PRIO3', '2019-01-11', 2.199400, 2.206000, 2.168400, 2.205800, 1235000),
('PRIO3', '2019-01-14', 2.196000, 2.230000, 2.169000, 2.189800, 3465000),
('PRIO3', '2019-01-15', 2.189800, 2.229800, 2.184600, 2.200000, 2410000),
('PRIO3', '2019-01-16', 2.219200, 2.226800, 2.145200, 2.196000, 2590000),
('PRIO3', '2019-01-17', 2.170200, 2.223800, 2.100000, 2.200600, 5520000),
('PRIO3', '2019-01-18', 2.210000, 2.236000, 2.187800, 2.236000, 3480000),
('PRIO3', '2019-01-21', 2.240000, 2.334200, 2.240000, 2.334200, 3015000),
('PRIO3', '2019-01-22', 2.330000, 2.349800, 2.240000, 2.287800, 3675000),
('PRIO3', '2019-01-23', 2.319800, 2.319800, 2.260400, 2.277800, 1075000),
('PRIO3', '2019-01-24', 2.275200, 2.303200, 2.225200, 2.235200, 1495000),
('PRIO3', '2019-01-28', 2.235000, 2.273800, 2.137800, 2.146000, 2380000),
('PRIO3', '2019-01-29', 2.185800, 2.198000, 2.143800, 2.173800, 1790000),
('PRIO3', '2019-01-30', 2.200000, 2.486200, 2.200000, 2.360000, 8910000),
('PRIO3', '2019-01-31', 2.399800, 2.400000, 2.270000, 2.300000, 10555000),
('PRIO3', '2019-02-01', 2.340000, 2.356800, 2.219400, 2.240000, 8445000),
('PRIO3', '2019-02-04', 2.270000, 2.286000, 2.183600, 2.212600, 5195000),
('PRIO3', '2019-02-05', 2.230600, 2.231000, 2.160400, 2.184400, 2280000),
('PRIO3', '2019-02-06', 2.229600, 2.379800, 2.229400, 2.319600, 10645000),
('PRIO3', '2019-02-07', 2.310400, 2.351000, 2.240000, 2.264000, 5855000),
('PRIO3', '2019-02-08', 2.278000, 2.313000, 2.233000, 2.241000, 2130000),
('PRIO3', '2019-02-11', 2.279600, 2.350000, 2.243400, 2.320000, 4150000),
('PRIO3', '2019-02-12', 2.339600, 2.348600, 2.282000, 2.317800, 1780000),
('PRIO3', '2019-02-13', 2.344000, 2.524000, 2.344000, 2.524000, 8070000),
('PRIO3', '2019-02-14', 2.535000, 2.840000, 2.500000, 2.699200, 11555000),
('PRIO3', '2019-02-15', 2.714000, 2.820000, 2.657400, 2.700000, 5295000),
('PRIO3', '2019-02-18', 2.701200, 2.748000, 2.622000, 2.698000, 2275000),
('PRIO3', '2019-02-19', 2.707200, 2.760000, 2.707200, 2.712600, 1970000),
('PRIO3', '2019-02-20', 2.753800, 2.812000, 2.685000, 2.760000, 3215000),
('PRIO3', '2019-02-21', 2.800000, 2.872000, 2.764200, 2.773000, 6760000),
('PRIO3', '2019-02-22', 2.790000, 2.917400, 2.735000, 2.852200, 8425000),
('PRIO3', '2019-02-25', 2.871000, 2.919600, 2.814000, 2.858000, 9725000),
('PRIO3', '2019-02-26', 2.858000, 2.860000, 2.782000, 2.836000, 3795000),
('PRIO3', '2019-02-27', 2.839600, 3.065400, 2.810000, 3.048800, 5745000),
('PRIO3', '2019-02-28', 3.100000, 3.139800, 2.964000, 3.019600, 5450000),
('PRIO3', '2019-03-01', 3.044000, 3.360000, 3.012200, 3.360000, 11155000),
('PRIO3', '2019-03-06', nan, nan, nan, nan, nan),
('PRIO3', '2019-03-07', 3.438000, 3.680000, 3.380000, 3.624000, 8729500),
('PRIO3', '2019-03-08', 3.620000, 3.620000, 3.488000, 3.500000, 6198500),
('PRIO3', '2019-03-11', 3.534000, 3.760000, 3.516000, 3.642000, 8300500),
('PRIO3', '2019-03-12', 3.630000, 3.882000, 3.500000, 3.520000, 20171500),
('PRIO3', '2019-03-13', 3.574000, 3.660000, 3.422000, 3.570000, 17534500),
('PRIO3', '2019-03-14', 3.622000, 3.718000, 3.584000, 3.712000, 7636500),
('PRIO3', '2019-03-15', 3.808000, 4.048000, 3.806000, 4.006000, 15854500),
('PRIO3', '2019-03-18', 4.082000, 4.326000, 3.998000, 4.060000, 21579500),
('PRIO3', '2019-03-19', 4.140000, 4.150000, 3.900000, 3.900000, 12290500),
('PRIO3', '2019-03-20', 3.942000, 4.134000, 3.922000, 4.054000, 16006000),
('PRIO3', '2019-03-21', 4.080000, 4.140000, 3.930000, 4.100000, 12989000),
('PRIO3', '2019-03-22', 4.010000, 4.072000, 3.954000, 3.960000, 6822500),
('PRIO3', '2019-03-25', 3.976000, 4.032000, 3.800000, 3.860000, 5976000),
('PRIO3', '2019-03-26', 4.020000, 4.020000, 3.892000, 3.924000, 4851000),
('PRIO3', '2019-03-27', 3.900000, 3.990000, 3.828000, 3.850000, 5621500),
('PRIO3', '2019-03-28', 3.840000, 3.896000, 3.730000, 3.798000, 6713500),
('PRIO3', '2019-03-29', 3.858000, 3.960000, 3.780000, 3.780000, 9040500),
('PRIO3', '2019-04-01', 3.838000, 3.996000, 3.832000, 3.876000, 5906500),
('PRIO3', '2019-04-02', 3.938000, 3.940000, 3.826000, 3.880000, 2732500),
('PRIO3', '2019-04-03', 3.930000, 3.930000, 3.790000, 3.800000, 3537000),
('PRIO3', '2019-04-04', 3.802000, 3.848000, 3.744000, 3.788000, 3078000),
('PRIO3', '2019-04-05', 3.784000, 3.834000, 3.746000, 3.778000, 2101500),
('PRIO3', '2019-04-08', 3.760000, 3.810000, 3.724000, 3.750000, 2646500),
('PRIO3', '2019-04-09', 3.738000, 3.742000, 3.602000, 3.602000, 4736000),
('PRIO3', '2019-04-10', 3.632000, 3.830000, 3.530000, 3.784000, 9648500),
('PRIO3', '2019-04-11', 3.834000, 3.840000, 3.626000, 3.626000, 5855500),
('PRIO3', '2019-04-12', 3.580000, 3.700000, 3.562000, 3.640000, 4515500),
('PRIO3', '2019-04-15', 3.682000, 3.714000, 3.594000, 3.610000, 2536500),
('PRIO3', '2019-04-16', 3.594000, 3.640000, 3.536000, 3.582000, 2660000),
('PRIO3', '2019-04-17', 3.620000, 3.714000, 3.580000, 3.620000, 3313000),
('PRIO3', '2019-04-18', 3.620000, 3.636000, 3.512000, 3.590000, 5202000),
('PRIO3', '2019-04-22', 3.644000, 3.886000, 3.620000, 3.862000, 10414000),
('PRIO3', '2019-04-23', 3.924000, 4.068000, 3.870000, 3.962000, 6865000),
('PRIO3', '2019-04-24', 3.994000, 3.996000, 3.826000, 3.870000, 5161000),
('PRIO3', '2019-04-25', 3.896000, 3.896000, 3.730000, 3.798000, 7782500),
('PRIO3', '2019-04-26', 3.762000, 3.798000, 3.682000, 3.740000, 2030000),
('PRIO3', '2019-04-29', 3.762000, 3.780000, 3.656000, 3.660000, 2491000),
('PRIO3', '2019-04-30', 3.696000, 3.758000, 3.668000, 3.690000, 3215500),
('PRIO3', '2019-05-02', 3.640000, 3.674000, 3.520000, 3.530000, 7332000),
('PRIO3', '2019-05-03', 3.538000, 3.594000, 3.454000, 3.516000, 4630000),
('PRIO3', '2019-05-06', 3.454000, 3.530000, 3.410000, 3.490000, 3052500),
('PRIO3', '2019-05-07', 3.496000, 3.510000, 3.432000, 3.460000, 1883000),
('PRIO3', '2019-05-08', 3.460000, 3.598000, 3.460000, 3.560000, 2822000),
('PRIO3', '2019-05-09', 3.568000, 3.568000, 3.474000, 3.486000, 1518000),
('PRIO3', '2019-05-10', 3.486000, 3.558000, 3.442000, 3.504000, 2307500),
('PRIO3', '2019-05-13', 3.500000, 3.544000, 3.318000, 3.318000, 4051000),
('PRIO3', '2019-05-14', 3.368000, 3.458000, 3.342000, 3.410000, 3053000),
('PRIO3', '2019-05-15', 3.388000, 3.550000, 3.300000, 3.422000, 4180500),
('PRIO3', '2019-05-16', 3.320000, 3.760000, 3.320000, 3.760000, 7901000),
('PRIO3', '2019-05-17', 3.700000, 3.874000, 3.650000, 3.738000, 7852000),
('PRIO3', '2019-05-20', 3.750000, 3.854000, 3.696000, 3.766000, 3955000),
('PRIO3', '2019-05-21', 3.782000, 3.850000, 3.642000, 3.728000, 5196000),
('PRIO3', '2019-05-22', 3.738000, 3.798000, 3.654000, 3.674000, 3702500),
('PRIO3', '2019-05-23', 3.640000, 3.678000, 3.484000, 3.506000, 6655500),
('PRIO3', '2019-05-24', 3.560000, 3.588000, 3.422000, 3.474000, 3737000),
('PRIO3', '2019-05-27', 3.506000, 3.672000, 3.462000, 3.596000, 4847500),
('PRIO3', '2019-05-28', 3.602000, 3.772000, 3.602000, 3.696000, 11953500),
('PRIO3', '2019-05-29', 3.658000, 3.718000, 3.566000, 3.600000, 5137000),
('PRIO3', '2019-05-30', 3.618000, 3.650000, 3.548000, 3.548000, 3117000),
('PRIO3', '2019-05-31', 3.480000, 3.550000, 3.440000, 3.474000, 4938000),
('PRIO3', '2019-06-03', 3.496000, 3.572000, 3.482000, 3.500000, 3171500),
('PRIO3', '2019-06-04', 3.538000, 3.542000, 3.456000, 3.476000, 2685000),
('PRIO3', '2019-06-05', 3.450000, 3.476000, 3.354000, 3.390000, 4341500),
('PRIO3', '2019-06-06', 3.428000, 3.428000, 3.344000, 3.378000, 2377000),
('PRIO3', '2019-06-07', 3.384000, 3.456000, 3.360000, 3.360000, 3757500),
('PRIO3', '2019-06-10', 3.400000, 3.400000, 3.326000, 3.346000, 2876500),
('PRIO3', '2019-06-11', 3.380000, 3.394000, 3.244000, 3.260000, 4131000),
('PRIO3', '2019-06-12', 3.252000, 3.252000, 3.102000, 3.144000, 8516000),
('PRIO3', '2019-06-13', 3.220000, 3.290000, 3.170000, 3.230000, 5285000),
('PRIO3', '2019-06-14', 3.220000, 3.258000, 3.174000, 3.204000, 2417500),
('PRIO3', '2019-06-17', 3.208000, 3.274000, 3.142000, 3.224000, 2614500),
('PRIO3', '2019-06-18', 3.240000, 3.262000, 3.190000, 3.210000, 3437500),
('PRIO3', '2019-06-19', 3.208000, 3.240000, 3.182000, 3.182000, 2106500),
('PRIO3', '2019-06-21', 3.276000, 3.388000, 3.260000, 3.266000, 7574000),
('PRIO3', '2019-06-24', 3.320000, 3.328000, 3.200000, 3.202000, 4198500),
('PRIO3', '2019-06-25', 3.200000, 3.218000, 3.126000, 3.136000, 4249500),
('PRIO3', '2019-06-26', 3.200000, 3.240000, 3.134000, 3.140000, 4059500),
('PRIO3', '2019-06-27', 3.148000, 3.168000, 3.062000, 3.090000, 4993500),
('PRIO3', '2019-06-28', 3.164000, 3.196000, 3.074000, 3.154000, 6187000),
('PRIO3', '2019-07-01', 3.240000, 3.260000, 3.160000, 3.182000, 4456500),
('PRIO3', '2019-07-02', 3.188000, 3.218000, 3.120000, 3.134000, 3729000),
('PRIO3', '2019-07-03', 3.162000, 3.218000, 3.096000, 3.218000, 2907000),
('PRIO3', '2019-07-04', 3.228000, 3.280000, 3.184000, 3.210000, 3608500),
('PRIO3', '2019-07-05', 3.212000, 3.280000, 3.176000, 3.280000, 2725500),
('PRIO3', '2019-07-08', 3.330000, 3.620000, 3.304000, 3.600000, 10450500),
('PRIO3', '2019-07-10', 3.700000, 3.796000, 3.486000, 3.634000, 12614000),
('PRIO3', '2019-07-11', 3.690000, 3.730000, 3.544000, 3.656000, 5272500),
('PRIO3', '2019-07-12', 3.690000, 3.840000, 3.664000, 3.754000, 11337500),
('PRIO3', '2019-07-15', 3.798000, 3.888000, 3.740000, 3.852000, 8141000),
('PRIO3', '2019-07-16', 3.860000, 3.908000, 3.638000, 3.660000, 9931500),
('PRIO3', '2019-07-17', 3.680000, 3.710000, 3.602000, 3.646000, 5223000),
('PRIO3', '2019-07-18', 3.670000, 3.676000, 3.546000, 3.634000, 3911000),
('PRIO3', '2019-07-19', 3.622000, 3.648000, 3.548000, 3.580000, 3424000),
('PRIO3', '2019-07-22', 3.580000, 3.640000, 3.450000, 3.584000, 5663000),
('PRIO3', '2019-07-23', 3.562000, 3.598000, 3.520000, 3.580000, 2633000),
('PRIO3', '2019-07-24', 3.596000, 3.790000, 3.554000, 3.654000, 7423500),
('PRIO3', '2019-07-25', 3.698000, 3.728000, 3.510000, 3.560000, 7168500),
('PRIO3', '2019-07-26', 3.548000, 3.638000, 3.512000, 3.552000, 4486000),
('PRIO3', '2019-07-29', 3.554000, 3.590000, 3.522000, 3.532000, 2377500),
('PRIO3', '2019-07-30', 3.500000, 3.580000, 3.476000, 3.568000, 3559000),
('PRIO3', '2019-07-31', 3.574000, 3.638000, 3.482000, 3.520000, 5419000),
('PRIO3', '2019-08-01', 3.540000, 3.572000, 3.382000, 3.430000, 6989000),
('PRIO3', '2019-08-02', 3.460000, 3.560000, 3.430000, 3.560000, 5078000),
('PRIO3', '2019-08-05', 3.506000, 3.586000, 3.488000, 3.524000, 4747000),
('PRIO3', '2019-08-06', 3.530000, 3.580000, 3.510000, 3.520000, 3247000),
('PRIO3', '2019-08-07', 3.520000, 3.536000, 3.396000, 3.486000, 3915500),
('PRIO3', '2019-08-08', 3.500000, 3.528000, 3.442000, 3.496000, 3783500),
('PRIO3', '2019-08-09', 3.460000, 3.600000, 3.460000, 3.522000, 5638000),
('PRIO3', '2019-08-12', 3.530000, 3.598000, 3.442000, 3.478000, 5288500),
('PRIO3', '2019-08-13', 3.478000, 3.556000, 3.424000, 3.510000, 5018000),
('PRIO3', '2019-08-14', 3.444000, 3.478000, 3.318000, 3.426000, 6777500),
('PRIO3', '2019-08-15', 3.520000, 3.620000, 3.170000, 3.340000, 15233500),
('PRIO3', '2019-08-16', 3.400000, 3.430000, 3.162000, 3.216000, 10329500),
('PRIO3', '2019-08-19', 3.240000, 3.280000, 3.120000, 3.240000, 7879500),
('PRIO3', '2019-08-20', 3.236000, 3.240000, 3.124000, 3.136000, 6865500),
('PRIO3', '2019-08-21', 3.172000, 3.226000, 3.128000, 3.226000, 6399000),
('PRIO3', '2019-08-22', 3.202000, 3.260000, 3.162000, 3.220000, 3986000),
('PRIO3', '2019-08-23', 3.154000, 3.182000, 2.978000, 3.030000, 10204500),
('PRIO3', '2019-08-26', 3.050000, 3.072000, 2.896000, 2.914000, 4973000),
('PRIO3', '2019-08-27', 2.920000, 2.976000, 2.796000, 2.888000, 9099000),
('PRIO3', '2019-08-28', 2.890000, 3.118000, 2.880000, 3.100000, 7771000),
('PRIO3', '2019-08-29', 3.130000, 3.226000, 3.068000, 3.220000, 5175500),
('PRIO3', '2019-08-30', 3.250000, 3.380000, 3.172000, 3.380000, 6250500),
('PRIO3', '2019-09-02', 3.340000, 3.420000, 3.316000, 3.330000, 3518000),
('PRIO3', '2019-09-03', 3.346000, 3.392000, 3.280000, 3.370000, 3904500),
('PRIO3', '2019-09-04', 3.404000, 3.450000, 3.370000, 3.384000, 6009000),
('PRIO3', '2019-09-05', 3.410000, 3.428000, 3.350000, 3.370000, 3217000),
('PRIO3', '2019-09-06', 3.370000, 3.420000, 3.336000, 3.404000, 3335000),
('PRIO3', '2019-09-09', 3.420000, 3.438000, 3.350000, 3.406000, 4049000),
('PRIO3', '2019-09-10', 3.408000, 3.440000, 3.364000, 3.386000, 3355500),
('PRIO3', '2019-09-11', 3.410000, 3.502000, 3.390000, 3.430000, 7864000),
('PRIO3', '2019-09-12', 3.430000, 3.464000, 3.380000, 3.424000, 6207000),
('PRIO3', '2019-09-13', 3.432000, 3.454000, 3.352000, 3.406000, 4544500),
('PRIO3', '2019-09-16', 3.562000, 3.586000, 3.462000, 3.498000, 12970500),
('PRIO3', '2019-09-17', 3.484000, 3.496000, 3.380000, 3.418000, 6001000),
('PRIO3', '2019-09-18', 3.416000, 3.558000, 3.402000, 3.520000, 4728500),
('PRIO3', '2019-09-19', 3.550000, 3.704000, 3.550000, 3.624000, 8389000),
('PRIO3', '2019-09-20', 3.648000, 3.664000, 3.564000, 3.646000, 4638000),
('PRIO3', '2019-09-23', 3.638000, 3.696000, 3.592000, 3.650000, 3130000),
('PRIO3', '2019-09-24', 3.658000, 3.668000, 3.592000, 3.622000, 2386500),
('PRIO3', '2019-09-25', 3.582000, 3.636000, 3.502000, 3.620000, 3928000),
('PRIO3', '2019-09-26', 3.608000, 3.608000, 3.486000, 3.502000, 7998500),
('PRIO3', '2019-09-27', 3.480000, 3.504000, 3.390000, 3.400000, 7121000),
('PRIO3', '2019-09-30', 3.402000, 3.484000, 3.320000, 3.484000, 4910500),
('PRIO3', '2019-10-01', 3.508000, 3.516000, 3.400000, 3.410000, 6542500),
('PRIO3', '2019-10-02', 3.412000, 3.412000, 3.330000, 3.380000, 4157000),
('PRIO3', '2019-10-03', 3.380000, 3.398000, 3.302000, 3.382000, 3161500),
('PRIO3', '2019-10-04', 3.390000, 3.442000, 3.364000, 3.420000, 2528500),
('PRIO3', '2019-10-07', 3.410000, 3.428000, 3.292000, 3.332000, 6075000),
('PRIO3', '2019-10-08', 3.330000, 3.336000, 3.200000, 3.200000, 5688500),
('PRIO3', '2019-10-09', 3.242000, 3.254000, 3.172000, 3.234000, 3807000),
('PRIO3', '2019-10-10', 3.200000, 3.296000, 3.200000, 3.238000, 3298000),
('PRIO3', '2019-10-11', 3.270000, 3.438000, 3.270000, 3.400000, 6148500),
('PRIO3', '2019-10-14', 3.390000, 3.408000, 3.372000, 3.398000, 2328000),
('PRIO3', '2019-10-15', 3.396000, 3.420000, 3.376000, 3.388000, 3604500),
('PRIO3', '2019-10-16', 3.398000, 3.414000, 3.340000, 3.400000, 2629000),
('PRIO3', '2019-10-17', 3.404000, 3.472000, 3.404000, 3.452000, 6098000),
('PRIO3', '2019-10-18', 3.464000, 3.500000, 3.406000, 3.424000, 4759000),
('PRIO3', '2019-10-21', 3.448000, 3.450000, 3.406000, 3.416000, 3660000),
('PRIO3', '2019-10-22', 3.426000, 3.524000, 3.404000, 3.520000, 12214000),
('PRIO3', '2019-10-23', 3.524000, 3.586000, 3.476000, 3.506000, 6605500),
('PRIO3', '2019-10-24', 3.506000, 3.560000, 3.442000, 3.560000, 5091500),
('PRIO3', '2019-10-25', 3.578000, 3.658000, 3.572000, 3.584000, 6466000),
('PRIO3', '2019-10-28', 3.574000, 3.690000, 3.574000, 3.632000, 6239500),
('PRIO3', '2019-10-29', 3.656000, 3.678000, 3.584000, 3.676000, 5162500),
('PRIO3', '2019-10-30', 3.672000, 3.776000, 3.636000, 3.700000, 6110500),
('PRIO3', '2019-10-31', 3.700000, 3.750000, 3.584000, 3.700000, 4549500),
('PRIO3', '2019-11-01', 3.600000, 3.790000, 3.562000, 3.764000, 10034500),
('PRIO3', '2019-11-04', 3.790000, 3.908000, 3.784000, 3.872000, 8134500),
('PRIO3', '2019-11-05', 3.872000, 3.960000, 3.776000, 3.806000, 5386000),
('PRIO3', '2019-11-06', 3.806000, 3.890000, 3.704000, 3.832000, 6748000),
('PRIO3', '2019-11-07', 3.836000, 3.990000, 3.818000, 3.946000, 6773000),
('PRIO3', '2019-11-08', 3.920000, 3.960000, 3.856000, 3.960000, 5726500),
('PRIO3', '2019-11-11', 3.946000, 3.986000, 3.886000, 3.908000, 4601000),
('PRIO3', '2019-11-12', 3.918000, 3.958000, 3.840000, 3.872000, 5224500),
('PRIO3', '2019-11-13', 3.862000, 3.914000, 3.802000, 3.856000, 4269000),
('PRIO3', '2019-11-14', 3.860000, 3.948000, 3.856000, 3.892000, 4367500),
('PRIO3', '2019-11-18', 3.920000, 4.000000, 3.814000, 3.878000, 6628500),
('PRIO3', '2019-11-19', 3.866000, 3.900000, 3.828000, 3.848000, 4888500),
('PRIO3', '2019-11-21', 3.860000, 3.956000, 3.820000, 3.950000, 5734000),
('PRIO3', '2019-11-22', 3.936000, 4.138000, 3.926000, 4.124000, 9723000),
('PRIO3', '2019-11-25', 4.118000, 4.198000, 4.074000, 4.080000, 5291500),
('PRIO3', '2019-11-26', 4.080000, 4.290000, 4.056000, 4.262000, 7603000),
('PRIO3', '2019-11-27', 4.238000, 4.316000, 4.148000, 4.230000, 4708500),
('PRIO3', '2019-11-28', 4.202000, 4.400000, 4.200000, 4.400000, 4594500),
('PRIO3', '2019-11-29', 4.600000, 4.780000, 4.506000, 4.652000, 14519000),
('PRIO3', '2019-12-02', 4.700000, 4.790000, 4.580000, 4.616000, 9836500),
('PRIO3', '2019-12-03', 4.628000, 4.752000, 4.540000, 4.696000, 8911500),
('PRIO3', '2019-12-04', 4.710000, 5.114000, 4.710000, 5.098000, 16626500),
('PRIO3', '2019-12-05', 5.102000, 5.242000, 4.960000, 4.990000, 9798000),
('PRIO3', '2019-12-06', 5.008000, 5.366000, 5.004000, 5.316000, 10928000),
('PRIO3', '2019-12-09', 5.316000, 5.388000, 5.210000, 5.362000, 5865500),
('PRIO3', '2019-12-10', 5.380000, 5.424000, 5.282000, 5.398000, 6190500),
('PRIO3', '2019-12-11', 5.400000, 5.676000, 5.368000, 5.480000, 9595000),
('PRIO3', '2019-12-12', 5.480000, 5.656000, 5.480000, 5.600000, 7601000),
('PRIO3', '2019-12-13', 5.700000, 5.970000, 5.628000, 5.866000, 10882000),
('PRIO3', '2019-12-16', 6.000000, 6.194000, 5.886000, 5.886000, 12225500),
('PRIO3', '2019-12-17', 5.900000, 6.024000, 5.646000, 5.980000, 12378500),
('PRIO3', '2019-12-18', 6.026000, 6.056000, 5.902000, 5.924000, 7718500),
('PRIO3', '2019-12-19', 5.926000, 6.076000, 5.926000, 6.000000, 6630000),
('PRIO3', '2019-12-20', 6.010000, 6.228000, 5.996000, 6.182000, 6827000),
('PRIO3', '2019-12-23', 6.230000, 6.728000, 6.200000, 6.660000, 17167500),
('PRIO3', '2019-12-26', 6.738000, 6.960000, 6.628000, 6.868000, 10446500),
('PRIO3', '2019-12-27', 6.970000, 7.080000, 6.746000, 6.780000, 10323500),
('PRIO3', '2019-12-30', 6.780000, 6.832000, 6.570000, 6.612000, 8933500),
('PRIO3', '2020-01-02', 6.740000, 7.176000, 6.658000, 7.156000, 9317500),
('PRIO3', '2020-01-03', 7.400000, 7.720000, 7.180000, 7.570000, 17031000),
('PRIO3', '2020-01-06', 7.730000, 7.950000, 7.454000, 7.718000, 25412000),
('PRIO3', '2020-01-07', 7.760000, 7.866000, 7.550000, 7.728000, 11539500),
('PRIO3', '2020-01-08', 7.740000, 7.830000, 7.570000, 7.570000, 9843500),
('PRIO3', '2020-01-09', 7.680000, 7.680000, 7.200000, 7.280000, 14933500),
('PRIO3', '2020-01-10', 7.260000, 7.594000, 7.076000, 7.444000, 13672000),
('PRIO3', '2020-01-13', 7.444000, 7.830000, 7.360000, 7.764000, 12750500),
('PRIO3', '2020-01-14', 7.842000, 8.222000, 7.780000, 8.222000, 14416000),
('PRIO3', '2020-01-15', 8.300000, 8.500000, 8.120000, 8.260000, 14057000),
('PRIO3', '2020-01-16', 8.292000, 8.520000, 8.230000, 8.276000, 14933500),
('PRIO3', '2020-01-17', 8.340000, 8.404000, 7.980000, 8.202000, 15219500),
('PRIO3', '2020-01-20', 8.300000, 8.612000, 8.140000, 8.612000, 9215000),
('PRIO3', '2020-01-21', 8.500000, 8.998000, 8.482000, 8.944000, 11411000),
('PRIO3', '2020-01-22', 9.018000, 9.380000, 9.018000, 9.240000, 14293000),
('PRIO3', '2020-01-23', 9.240000, 9.336000, 9.040000, 9.306000, 10740500),
('PRIO3', '2020-01-24', 9.306000, 9.496000, 9.100000, 9.100000, 13569500),
('PRIO3', '2020-01-27', 8.800000, 9.234000, 8.626000, 8.956000, 14783000),
('PRIO3', '2020-01-28', 9.100000, 9.520000, 9.100000, 9.520000, 17235500),
('PRIO3', '2020-01-29', 9.502000, 9.588000, 9.000000, 9.152000, 27216500),
('PRIO3', '2020-01-30', 8.800000, 9.470000, 8.660000, 9.460000, 26921000),
('PRIO3', '2020-01-31', 9.380000, 9.972000, 9.278000, 9.586000, 29119000),
('PRIO3', '2020-02-03', 9.700000, 9.894000, 9.462000, 9.594000, 18492500),
('PRIO3', '2020-02-04', 10.200000, 10.300000, 9.582000, 9.760000, 35390500),
('PRIO3', '2020-02-05', 9.950000, 10.000000, 9.420000, 9.600000, 19998000),
('PRIO3', '2020-02-06', 9.710000, 9.740000, 9.428000, 9.578000, 11920500),
('PRIO3', '2020-02-07', 9.480000, 9.860000, 9.298000, 9.662000, 20120000),
('PRIO3', '2020-02-10', 9.588000, 9.660000, 8.704000, 8.730000, 33001000),
('PRIO3', '2020-02-11', 8.990000, 9.126000, 8.092000, 9.098000, 24940000),
('PRIO3', '2020-02-12', 9.300000, 9.360000, 8.860000, 9.030000, 17112000),
('PRIO3', '2020-02-13', 8.798000, 9.070000, 8.710000, 8.970000, 8652500),
('PRIO3', '2020-02-14', 9.020000, 9.298000, 8.974000, 9.100000, 10468500),
('PRIO3', '2020-02-17', 9.190000, 9.280000, 8.960000, 9.000000, 8936500),
('PRIO3', '2020-02-18', 8.960000, 9.420000, 8.850000, 9.390000, 13921000),
('PRIO3', '2020-02-19', 9.488000, 9.558000, 9.140000, 9.410000, 14141000),
('PRIO3', '2020-02-20', 9.700000, 9.996000, 9.502000, 9.596000, 26730000),
('PRIO3', '2020-02-21', 9.600000, 9.880000, 9.456000, 9.592000, 10528000),
('PRIO3', '2020-02-27', 7.874000, 8.492000, 7.532000, 7.960000, 27311500),
('PRIO3', '2020-02-28', 7.778000, 7.932000, 7.560000, 7.880000, 25533000),
('PRIO3', '2020-03-02', 7.874000, 8.588000, 7.862000, 8.460000, 16556500),
('PRIO3', '2020-03-03', 8.700000, 8.996000, 8.312000, 8.356000, 22213000),
('PRIO3', '2020-03-04', 8.780000, 8.780000, 8.162000, 8.266000, 16563000),
('PRIO3', '2020-03-05', 8.148000, 8.452000, 7.746000, 7.910000, 12669500),
('PRIO3', '2020-03-06', 7.400000, 7.576000, 7.020000, 7.088000, 18805000),
('PRIO3', '2020-03-09', 4.560000, 5.520000, 4.434000, 4.498000, 36263000),
('PRIO3', '2020-03-10', 5.560000, 5.586000, 4.646000, 5.106000, 34331000),
('PRIO3', '2020-03-11', 4.800000, 5.096000, 4.400000, 4.662000, 22727500),
('PRIO3', '2020-03-12', 3.720000, 3.720000, 3.138000, 3.138000, 22238000),
('PRIO3', '2020-03-13', 4.010000, 4.010000, 3.068000, 3.734000, 28930500),
('PRIO3', '2020-03-16', 2.796000, 3.434000, 2.770000, 3.100000, 17996500),
('PRIO3', '2020-03-17', 3.200000, 3.258000, 2.902000, 2.938000, 18813000),
('PRIO3', '2020-03-18', 2.576000, 2.714000, 1.820000, 2.070000, 32222500),
('PRIO3', '2020-03-19', 2.080000, 2.560000, 1.874000, 2.366000, 27371000),
('PRIO3', '2020-03-20', 2.640000, 2.920000, 2.460000, 2.480000, 46994500),
('PRIO3', '2020-03-23', 2.400000, 2.468000, 2.162000, 2.376000, 21759000),
('PRIO3', '2020-03-24', 2.740000, 2.776000, 2.520000, 2.614000, 23621000),
('PRIO3', '2020-03-25', 2.656000, 3.680000, 2.630000, 3.458000, 37678500),
('PRIO3', '2020-03-26', 3.302000, 4.436000, 3.300000, 3.786000, 45235000),
('PRIO3', '2020-03-27', 3.450000, 3.940000, 3.390000, 3.620000, 28267500),
('PRIO3', '2020-03-30', 3.600000, 3.776000, 3.312000, 3.400000, 30852000),
('PRIO3', '2020-03-31', 3.530000, 3.640000, 3.260000, 3.340000, 25460500),
('PRIO3', '2020-04-01', 3.160000, 3.320000, 3.014000, 3.296000, 19625500),
('PRIO3', '2020-04-02', 3.630000, 3.948000, 3.464000, 3.900000, 48635000),
('PRIO3', '2020-04-03', 4.146000, 4.300000, 3.732000, 4.166000, 47891000),
('PRIO3', '2020-04-06', 4.334000, 5.144000, 4.242000, 5.144000, 51498000),
('PRIO3', '2020-04-07', 5.800000, 5.978000, 5.422000, 5.500000, 40758000),
('PRIO3', '2020-04-08', 5.380000, 5.820000, 5.326000, 5.598000, 41442000),
('PRIO3', '2020-04-09', 5.780000, 5.860000, 4.772000, 4.940000, 45063000),
('PRIO3', '2020-04-13', 4.954000, 5.076000, 4.590000, 4.692000, 27668000),
('PRIO3', '2020-04-14', 4.800000, 4.980000, 4.650000, 4.738000, 19645000),
('PRIO3', '2020-04-15', 4.400000, 4.730000, 4.324000, 4.700000, 19167000),
('PRIO3', '2020-04-16', 4.910000, 4.976000, 4.500000, 4.500000, 17058000),
('PRIO3', '2020-04-17', 4.568000, 4.596000, 4.394000, 4.402000, 13802000),
('PRIO3', '2020-04-20', 4.100000, 4.298000, 4.044000, 4.120000, 31161500),
('PRIO3', '2020-04-22', 3.904000, 4.080000, 3.820000, 3.962000, 38229500),
('PRIO3', '2020-04-23', 4.176000, 4.288000, 3.856000, 3.990000, 26066000),
('PRIO3', '2020-04-24', 3.900000, 3.964000, 3.540000, 3.710000, 23914000),
('PRIO3', '2020-04-27', 3.760000, 3.840000, 3.566000, 3.750000, 14922000),
('PRIO3', '2020-04-28', 3.896000, 4.400000, 3.808000, 4.358000, 34538000),
('PRIO3', '2020-04-29', 4.640000, 4.768000, 4.178000, 4.302000, 41152000),
('PRIO3', '2020-04-30', 4.300000, 4.400000, 4.082000, 4.090000, 20615000),
('PRIO3', '2020-05-04', 3.860000, 4.018000, 3.820000, 3.946000, 12919000),
('PRIO3', '2020-05-05', 4.160000, 4.356000, 4.132000, 4.236000, 23469500),
('PRIO3', '2020-05-06', 4.200000, 4.254000, 4.000000, 4.158000, 15893000),
('PRIO3', '2020-05-07', 4.360000, 4.382000, 4.110000, 4.156000, 23446000),
('PRIO3', '2020-05-08', 4.250000, 4.294000, 4.026000, 4.044000, 11140000),
('PRIO3', '2020-05-11', 4.020000, 4.234000, 3.940000, 4.220000, 16471000),
('PRIO3', '2020-05-12', 4.310000, 4.492000, 4.060000, 4.160000, 22610000),
('PRIO3', '2020-05-13', 4.202000, 4.236000, 3.950000, 4.052000, 12580500),
('PRIO3', '2020-05-14', 3.968000, 4.238000, 3.874000, 4.204000, 20706000),
('PRIO3', '2020-05-15', 4.266000, 4.384000, 4.164000, 4.164000, 22017500),
('PRIO3', '2020-05-18', 4.422000, 5.000000, 4.374000, 5.000000, 42178500),
('PRIO3', '2020-05-19', 4.990000, 5.412000, 4.932000, 5.400000, 41974500),
('PRIO3', '2020-05-20', 5.518000, 5.660000, 5.242000, 5.252000, 28028000),
('PRIO3', '2020-05-21', 5.358000, 5.556000, 5.246000, 5.500000, 30466000),
('PRIO3', '2020-05-22', 5.320000, 5.440000, 5.154000, 5.380000, 22925500),
('PRIO3', '2020-05-25', 5.550000, 5.890000, 5.550000, 5.796000, 23934500),
('PRIO3', '2020-05-26', 6.114000, 6.270000, 5.750000, 5.760000, 25939500),
('PRIO3', '2020-05-27', 5.770000, 5.970000, 5.578000, 5.950000, 19348000),
('PRIO3', '2020-05-28', 5.952000, 6.050000, 5.790000, 5.846000, 14740000),
('PRIO3', '2020-05-29', 5.790000, 6.196000, 5.702000, 6.196000, 15279000),
('PRIO3', '2020-06-01', 6.342000, 6.392000, 6.162000, 6.258000, 17478500),
('PRIO3', '2020-06-02', 6.398000, 6.720000, 6.380000, 6.718000, 19810500),
('PRIO3', '2020-06-03', 6.820000, 6.928000, 6.322000, 6.496000, 23072000),
('PRIO3', '2020-06-04', 6.382000, 6.800000, 6.322000, 6.784000, 18396500),
('PRIO3', '2020-06-05', 7.042000, 7.620000, 6.974000, 7.454000, 29239500),
('PRIO3', '2020-06-08', 7.696000, 7.708000, 7.360000, 7.472000, 23103500),
('PRIO3', '2020-06-09', 7.222000, 7.380000, 7.010000, 7.040000, 19798000),
('PRIO3', '2020-06-10', 7.184000, 7.184000, 6.564000, 6.584000, 25620000),
('PRIO3', '2020-06-12', 6.196000, 6.656000, 6.048000, 6.168000, 27565000),
('PRIO3', '2020-06-15', 5.824000, 6.720000, 5.750000, 6.700000, 25916000),
('PRIO3', '2020-06-16', 7.040000, 7.224000, 6.440000, 6.626000, 26651500),
('PRIO3', '2020-06-17', 6.720000, 6.856000, 6.524000, 6.666000, 12096500),
('PRIO3', '2020-06-18', 6.638000, 7.038000, 6.616000, 7.034000, 17947000),
('PRIO3', '2020-06-19', 7.240000, 7.356000, 6.850000, 7.024000, 23489000),
('PRIO3', '2020-06-22', 7.072000, 7.170000, 6.838000, 6.920000, 10013500),
('PRIO3', '2020-06-23', 7.100000, 7.288000, 6.920000, 7.132000, 17200500),
('PRIO3', '2020-06-24', 7.000000, 7.032000, 6.470000, 6.716000, 21306000),
('PRIO3', '2020-06-25', 6.634000, 7.088000, 6.550000, 7.088000, 20444500),
('PRIO3', '2020-06-26', 6.998000, 7.088000, 6.822000, 6.890000, 13622000),
('PRIO3', '2020-06-29', 6.978000, 7.032000, 6.824000, 6.990000, 11035500),
('PRIO3', '2020-06-30', 6.900000, 7.078000, 6.842000, 7.078000, 11433000),
('PRIO3', '2020-07-01', 7.084000, 7.330000, 6.900000, 6.900000, 20198000),
('PRIO3', '2020-07-02', 7.130000, 7.190000, 6.908000, 7.084000, 18604500),
('PRIO3', '2020-07-03', 7.028000, 7.036000, 6.868000, 6.966000, 10453000),
('PRIO3', '2020-07-06', 7.080000, 7.460000, 7.050000, 7.432000, 31797000),
('PRIO3', '2020-07-07', 7.318000, 7.492000, 7.270000, 7.430000, 13814000),
('PRIO3', '2020-07-08', 7.498000, 7.684000, 7.330000, 7.330000, 20526500),
('PRIO3', '2020-07-09', 7.428000, 7.448000, 7.104000, 7.328000, 23111500),
('PRIO3', '2020-07-10', 7.320000, 7.360000, 7.168000, 7.224000, 12803000),
('PRIO3', '2020-07-13', 7.300000, 7.870000, 7.260000, 7.728000, 31708500),
('PRIO3', '2020-07-14', 7.600000, 8.070000, 7.502000, 7.974000, 25490500),
('PRIO3', '2020-07-15', 8.158000, 8.216000, 7.900000, 8.026000, 16513500),
('PRIO3', '2020-07-16', 7.960000, 8.140000, 7.906000, 7.934000, 9055500),
('PRIO3', '2020-07-17', 8.010000, 8.140000, 7.792000, 7.832000, 21974500),
('PRIO3', '2020-07-20', 7.854000, 8.126000, 7.850000, 8.024000, 14944000),
('PRIO3', '2020-07-21', 8.228000, 8.440000, 8.128000, 8.230000, 23530000),
('PRIO3', '2020-07-22', 8.220000, 8.220000, 7.960000, 8.124000, 12995500),
('PRIO3', '2020-07-23', 8.118000, 8.230000, 7.738000, 7.900000, 13510500),
('PRIO3', '2020-07-24', 7.860000, 7.868000, 7.566000, 7.698000, 13692000),
('PRIO3', '2020-07-27', 7.758000, 8.078000, 7.710000, 8.028000, 12841500),
('PRIO3', '2020-07-28', 8.028000, 8.186000, 7.810000, 7.874000, 13316000),
('PRIO3', '2020-07-29', 7.980000, 8.060000, 7.868000, 7.874000, 8377500),
('PRIO3', '2020-07-30', 7.764000, 7.970000, 7.614000, 7.932000, 10235000),
('PRIO3', '2020-07-31', 7.970000, 8.040000, 7.732000, 7.918000, 11177000),
('PRIO3', '2020-08-03', 7.962000, 8.006000, 7.800000, 7.902000, 8472500),
('PRIO3', '2020-08-04', 7.700000, 7.946000, 7.648000, 7.658000, 11629500),
('PRIO3', '2020-08-05', 7.840000, 8.774000, 7.830000, 8.698000, 48037000),
('PRIO3', '2020-08-06', 8.680000, 8.784000, 8.400000, 8.436000, 18104500),
('PRIO3', '2020-08-07', 8.406000, 8.800000, 8.280000, 8.778000, 18658500),
('PRIO3', '2020-08-10', 8.778000, 9.202000, 8.728000, 9.082000, 21706000),
('PRIO3', '2020-08-11', 9.278000, 9.352000, 8.706000, 8.760000, 16075000),
('PRIO3', '2020-08-12', 8.900000, 8.956000, 8.570000, 8.880000, 13456500),
('PRIO3', '2020-08-13', 8.880000, 9.016000, 8.620000, 8.716000, 11656500),
('PRIO3', '2020-08-14', 8.740000, 8.810000, 8.486000, 8.618000, 9661500),
('PRIO3', '2020-08-17', 8.522000, 8.742000, 8.172000, 8.414000, 11884000),
('PRIO3', '2020-08-18', 8.606000, 8.828000, 8.526000, 8.810000, 13368000),
('PRIO3', '2020-08-19', 8.898000, 9.462000, 8.844000, 9.342000, 31808000),
('PRIO3', '2020-08-20', 9.110000, 9.544000, 9.030000, 9.178000, 19630000),
('PRIO3', '2020-08-21', 9.192000, 9.250000, 8.862000, 8.954000, 15401000),
('PRIO3', '2020-08-24', 9.110000, 9.200000, 8.770000, 8.856000, 13294500),
('PRIO3', '2020-08-25', 8.968000, 9.024000, 8.782000, 8.860000, 10792500),
('PRIO3', '2020-08-26', 8.860000, 8.938000, 8.614000, 8.766000, 10992500),
('PRIO3', '2020-08-27', 8.766000, 8.880000, 8.564000, 8.614000, 9201000),
('PRIO3', '2020-08-28', 8.820000, 8.848000, 8.532000, 8.598000, 11779500),
('PRIO3', '2020-08-31', 8.620000, 8.680000, 8.362000, 8.378000, 11390000),
('PRIO3', '2020-09-01', 8.460000, 8.840000, 8.282000, 8.800000, 21676500),
('PRIO3', '2020-09-02', 8.864000, 8.920000, 8.504000, 8.676000, 18271000),
('PRIO3', '2020-09-03', 8.568000, 8.828000, 8.524000, 8.674000, 20912500),
('PRIO3', '2020-09-04', 8.656000, 9.018000, 8.300000, 8.810000, 49525000),
('PRIO3', '2020-09-08', 8.500000, 8.600000, 8.104000, 8.274000, 28681000),
('PRIO3', '2020-09-09', 8.454000, 8.526000, 8.248000, 8.262000, 16166500),
('PRIO3', '2020-09-10', 8.242000, 8.270000, 7.868000, 7.918000, 17197000),
('PRIO3', '2020-09-11', 7.918000, 8.046000, 7.702000, 7.922000, 16852000),
('PRIO3', '2020-09-14', 7.924000, 7.980000, 7.760000, 7.800000, 10367000),
('PRIO3', '2020-09-15', 7.874000, 7.978000, 7.760000, 7.798000, 11218000),
('PRIO3', '2020-09-16', 7.924000, 7.940000, 7.742000, 7.754000, 10415000),
('PRIO3', '2020-09-17', 7.702000, 7.906000, 7.620000, 7.832000, 10464500),
('PRIO3', '2020-09-18', 7.762000, 7.960000, 7.506000, 7.622000, 11901000),
('PRIO3', '2020-09-21', 7.400000, 7.568000, 7.248000, 7.422000, 8928000),
('PRIO3', '2020-09-22', 7.442000, 7.506000, 7.274000, 7.300000, 7379500),
('PRIO3', '2020-09-23', 7.284000, 7.338000, 6.960000, 6.970000, 10641000),
('PRIO3', '2020-09-24', 6.970000, 7.434000, 6.864000, 7.300000, 16166500),
('PRIO3', '2020-09-25', 7.266000, 7.266000, 7.004000, 7.100000, 10880000),
('PRIO3', '2020-09-28', 7.256000, 7.296000, 6.922000, 6.960000, 9739500),
('PRIO3', '2020-09-29', 6.960000, 7.062000, 6.824000, 6.868000, 10749500),
('PRIO3', '2020-09-30', 6.900000, 7.090000, 6.872000, 6.978000, 7698000),
('PRIO3', '2020-10-01', 6.872000, 7.140000, 6.776000, 7.106000, 11629500),
('PRIO3', '2020-10-02', 6.966000, 7.000000, 6.834000, 6.854000, 9471500),
('PRIO3', '2020-10-05', 7.010000, 7.330000, 6.910000, 7.306000, 16451000),
('PRIO3', '2020-10-06', 7.422000, 7.508000, 7.120000, 7.146000, 17855500),
('PRIO3', '2020-10-07', 7.186000, 7.398000, 7.006000, 7.296000, 16012000),
('PRIO3', '2020-10-08', 7.440000, 7.488000, 7.178000, 7.240000, 17297500),
('PRIO3', '2020-10-09', 7.220000, 7.300000, 7.114000, 7.114000, 9491500),
('PRIO3', '2020-10-13', 7.130000, 7.260000, 6.962000, 7.106000, 12067000),
('PRIO3', '2020-10-14', 7.116000, 7.700000, 7.094000, 7.676000, 25178500),
('PRIO3', '2020-10-15', 7.490000, 7.490000, 7.202000, 7.246000, 28695000),
('PRIO3', '2020-10-16', 7.272000, 7.286000, 7.052000, 7.090000, 12081000),
('PRIO3', '2020-10-19', 7.134000, 7.462000, 7.104000, 7.172000, 19285000),
('PRIO3', '2020-10-20', 7.232000, 7.278000, 7.110000, 7.170000, 11280500),
('PRIO3', '2020-10-21', 7.120000, 7.326000, 7.096000, 7.182000, 10664000),
('PRIO3', '2020-10-22', 7.182000, 7.614000, 7.160000, 7.536000, 25534000),
('PRIO3', '2020-10-23', 7.560000, 7.630000, 7.234000, 7.260000, 17828500),
('PRIO3', '2020-10-26', 7.200000, 7.230000, 7.000000, 7.100000, 12188500),
('PRIO3', '2020-10-27', 7.136000, 7.170000, 6.922000, 6.940000, 11242500),
('PRIO3', '2020-10-28', 6.600000, 6.720000, 6.402000, 6.428000, 20785500),
('PRIO3', '2020-10-29', 6.296000, 6.640000, 6.112000, 6.600000, 19233500),
('PRIO3', '2020-10-30', 6.558000, 6.564000, 6.210000, 6.264000, 13506500),
('PRIO3', '2020-11-03', 6.608000, 6.608000, 6.328000, 6.486000, 14744000),
('PRIO3', '2020-11-04', 6.558000, 6.602000, 6.334000, 6.440000, 15708000),
('PRIO3', '2020-11-05', 6.524000, 6.550000, 6.362000, 6.470000, 12877500),
('PRIO3', '2020-11-06', 6.380000, 6.868000, 6.308000, 6.800000, 24335000),
('PRIO3', '2020-11-09', 7.206000, 7.252000, 6.820000, 7.048000, 27858500),
('PRIO3', '2020-11-10', 7.048000, 7.550000, 6.880000, 6.906000, 41159000),
('PRIO3', '2020-11-11', 7.066000, 7.070000, 6.582000, 6.676000, 24156500),
('PRIO3', '2020-11-12', 6.670000, 6.776000, 6.372000, 6.412000, 26280500),
('PRIO3', '2020-11-13', 6.438000, 6.808000, 6.428000, 6.800000, 19157000),
('PRIO3', '2020-11-16', 6.940000, 7.116000, 6.890000, 6.930000, 26428000),
('PRIO3', '2020-11-17', 6.872000, 7.220000, 6.840000, 7.054000, 19975500),
('PRIO3', '2020-11-18', 7.140000, 7.392000, 7.058000, 7.080000, 22399500),
('PRIO3', '2020-11-19', 7.620000, 9.200000, 7.600000, 9.200000, 161938000),
('PRIO3', '2020-11-23', 8.804000, 9.380000, 8.600000, 9.302000, 47696500),
('PRIO3', '2020-11-24', 9.298000, 9.550000, 9.020000, 9.060000, 37865000),
('PRIO3', '2020-11-25', 9.062000, 9.856000, 9.060000, 9.600000, 47446000),
('PRIO3', '2020-11-26', 9.474000, 10.096000, 9.402000, 10.096000, 29322500),
('PRIO3', '2020-11-27', 10.056000, 10.754000, 9.976000, 10.350000, 38553500),
('PRIO3', '2020-11-30', 10.326000, 10.536000, 9.858000, 10.034000, 22847500),
('PRIO3', '2020-12-01', 10.202000, 10.700000, 10.202000, 10.690000, 29599000),
('PRIO3', '2020-12-02', 10.624000, 10.636000, 10.146000, 10.178000, 26202000),
('PRIO3', '2020-12-03', 10.300000, 10.520000, 10.018000, 10.320000, 25346000),
('PRIO3', '2020-12-04', 10.472000, 11.800000, 10.472000, 11.156000, 65127000),
('PRIO3', '2020-12-07', 11.122000, 11.546000, 10.882000, 11.104000, 30632500),
('PRIO3', '2020-12-08', 11.106000, 11.318000, 10.734000, 10.800000, 20991500),
('PRIO3', '2020-12-09', 10.876000, 11.298000, 10.690000, 10.890000, 30584000),
('PRIO3', '2020-12-10', 11.086000, 11.780000, 10.884000, 11.552000, 40956500),
('PRIO3', '2020-12-11', 11.440000, 11.470000, 10.946000, 11.140000, 24979500),
('PRIO3', '2020-12-14', 11.354000, 11.440000, 10.940000, 11.100000, 21517500),
('PRIO3', '2020-12-15', 11.100000, 11.436000, 11.076000, 11.108000, 21522000),
('PRIO3', '2020-12-16', 11.040000, 11.374000, 10.836000, 11.230000, 35612000),
('PRIO3', '2020-12-17', 11.240000, 11.748000, 11.170000, 11.650000, 39898000),
('PRIO3', '2020-12-18', 11.656000, 11.886000, 11.314000, 11.350000, 34632000),
('PRIO3', '2020-12-21', 10.888000, 11.436000, 10.672000, 11.320000, 28398500),
('PRIO3', '2020-12-22', 11.434000, 11.942000, 11.420000, 11.936000, 42850500),
('PRIO3', '2020-12-23', 11.950000, 13.226000, 11.948000, 13.226000, 48030000),
('PRIO3', '2020-12-28', 13.596000, 14.274000, 13.264000, 13.308000, 39518500),
('PRIO3', '2020-12-29', 13.562000, 13.780000, 13.308000, 13.564000, 27027500),
('PRIO3', '2020-12-30', 13.744000, 14.046000, 13.564000, 14.038000, 21464500),
('PRIO3', '2021-01-04', 14.200000, 15.280000, 14.140000, 14.960000, 30372500),
('PRIO3', '2021-01-05', 15.480000, 15.580000, 14.310000, 14.758000, 47454500),
('PRIO3', '2021-01-06', 15.060000, 15.200000, 14.462000, 14.590000, 23827500),
('PRIO3', '2021-01-07', 14.724000, 15.158000, 14.724000, 14.806000, 22207500),
('PRIO3', '2021-01-08', 15.084000, 15.280000, 14.700000, 14.890000, 20296000),
('PRIO3', '2021-01-11', 14.732000, 16.920000, 14.600000, 15.570000, 59799000),
('PRIO3', '2021-01-12', 16.180000, 16.548000, 15.178000, 15.300000, 38187500),
('PRIO3', '2021-01-13', 15.360000, 16.030001, 14.842000, 15.896000, 42463500),
('PRIO3', '2021-01-14', 15.962000, 16.180000, 15.404000, 15.600000, 24654500),
('PRIO3', '2021-01-15', 15.300000, 15.600000, 14.722000, 14.856000, 19421500),
('PRIO3', '2021-01-18', 15.004000, 15.230000, 14.442000, 14.568000, 19358500),
('PRIO3', '2021-01-19', 14.830000, 14.942000, 13.900000, 14.700000, 30198500),
('PRIO3', '2021-01-20', 14.978000, 15.050000, 14.092000, 14.162000, 17976000),
('PRIO3', '2021-01-21', 14.162000, 15.134000, 14.162000, 14.856000, 33964500),
('PRIO3', '2021-01-22', 14.600000, 14.700000, 14.284000, 14.400000, 18105000),
('PRIO3', '2021-01-26', 14.442000, 14.760000, 13.956000, 14.120000, 19194000),
('PRIO3', '2021-01-27', 14.176000, 14.362000, 13.604000, 13.680000, 23483500),
('PRIO3', '2021-01-28', 13.824000, 14.396000, 13.508000, 14.356000, 17366000),
('PRIO3', '2021-01-29', 14.058000, 14.942000, 13.744000, 14.098000, 47635000),
('PRIO3', '2021-02-01', 14.442000, 14.760000, 13.940000, 14.694000, 37862500),
('PRIO3', '2021-02-02', 14.962000, 15.876000, 14.962000, 15.566000, 42682000),
('PRIO3', '2021-02-03', 15.756000, 15.844000, 15.128000, 15.376000, 26285500),
('PRIO3', '2021-02-04', 15.458000, 15.570000, 15.026000, 15.176000, 21440500),
('PRIO3', '2021-02-05', 15.312000, 16.150000, 15.060000, 15.700000, 44441000),
('PRIO3', '2021-02-08', 15.852000, 16.535999, 15.852000, 16.218000, 33790000),
('PRIO3', '2021-02-09', 16.200001, 16.370001, 15.272000, 15.548000, 37640500),
('PRIO3', '2021-02-10', 15.706000, 15.886000, 15.346000, 15.886000, 25919000),
('PRIO3', '2021-02-11', 15.982000, 16.020000, 15.300000, 15.466000, 22267000),
('PRIO3', '2021-02-12', 15.376000, 15.998000, 15.116000, 15.918000, 24224000),
('PRIO3', '2021-02-18', 17.524000, 18.408001, 17.521999, 17.681999, 38806500),
('PRIO3', '2021-02-19', 17.601999, 17.850000, 17.260000, 17.778000, 16894000),
('PRIO3', '2021-02-22', 17.500000, 18.450001, 16.900000, 18.438000, 40229000),
('PRIO3', '2021-02-23', 18.610001, 18.799999, 16.976000, 17.750000, 50106500),
('PRIO3', '2021-02-24', 17.992001, 18.398001, 17.472000, 17.472000, 33690500),
('PRIO3', '2021-02-25', 18.000000, 18.180000, 16.548000, 16.782000, 37175000),
('PRIO3', '2021-02-26', 17.000000, 17.250000, 16.420000, 16.722000, 28046000),
('PRIO3', '2021-03-01', 17.122000, 17.902000, 17.004000, 17.646000, 38751000),
('PRIO3', '2021-03-02', 17.194000, 17.778000, 16.718000, 17.134001, 38135500),
('PRIO3', '2021-03-03', 17.202000, 17.997999, 16.632000, 17.924000, 47689000),
('PRIO3', '2021-03-04', 17.920000, 18.598000, 17.440001, 18.598000, 51010500),
('PRIO3', '2021-03-05', 18.902000, 20.011999, 18.601999, 20.011999, 52429000),
('PRIO3', '2021-03-08', 19.704000, 20.278000, 18.997999, 19.000000, 43108000),
('PRIO3', '2021-03-09', 19.400000, 20.101999, 18.840000, 19.746000, 40084000),
('PRIO3', '2021-03-10', 19.860001, 19.892000, 18.410000, 18.879999, 42504000),
('PRIO3', '2021-03-11', 19.180000, 19.538000, 18.268000, 18.570000, 39436500),
('PRIO3', '2021-03-12', 18.562000, 18.993999, 18.309999, 18.702000, 27984000),
('PRIO3', '2021-03-15', 18.716000, 18.856001, 18.059999, 18.160000, 22538000),
('PRIO3', '2021-03-16', 18.266001, 18.532000, 17.968000, 18.200001, 25830500),
('PRIO3', '2021-03-17', 18.139999, 19.312000, 17.900000, 19.299999, 37547000),
('PRIO3', '2021-03-18', 19.148001, 19.398001, 17.299999, 17.639999, 47657500),
('PRIO3', '2021-03-19', 17.978001, 19.110001, 17.658001, 18.785999, 57369500),
('PRIO3', '2021-03-22', 18.629999, 18.738001, 17.908001, 18.110001, 27695000),
('PRIO3', '2021-03-23', 17.752001, 18.000000, 17.312000, 17.406000, 34163500),
('PRIO3', '2021-03-24', 17.820000, 18.379999, 17.601999, 17.601999, 39781500),
('PRIO3', '2021-03-25', 17.586000, 18.080000, 17.059999, 17.882000, 37597000),
('PRIO3', '2021-03-26', 18.278000, 18.940001, 17.924000, 18.502001, 47531000),
('PRIO3', '2021-03-29', 18.480000, 18.990000, 18.271999, 18.879999, 27968500),
('PRIO3', '2021-03-30', 18.916000, 18.916000, 18.232000, 18.454000, 29503000),
('PRIO3', '2021-03-31', 18.454000, 18.840000, 18.158001, 18.455999, 35841500),
('PRIO3', '2021-04-01', 18.566000, 18.708000, 18.191999, 18.195999, 23773000),
('PRIO3', '2021-04-05', 18.400000, 18.459999, 17.760000, 18.124001, 20827500),
('PRIO3', '2021-04-06', 18.299999, 18.900000, 18.132000, 18.698000, 30725000),
('PRIO3', '2021-04-07', 18.700001, 19.034000, 18.374001, 18.920000, 25850500),
('PRIO3', '2021-04-08', 19.072001, 19.378000, 18.450001, 18.950001, 26908000),
('PRIO3', '2021-04-09', 18.718000, 19.136000, 18.520000, 18.898001, 24417500),
('PRIO3', '2021-04-12', 19.072001, 19.528000, 18.974001, 19.382000, 34052000),
('PRIO3', '2021-04-13', 19.524000, 20.360001, 19.497999, 20.100000, 39009000),
('PRIO3', '2021-04-14', 20.480000, 20.638000, 20.268000, 20.360001, 26506500),
('PRIO3', '2021-04-15', 20.538000, 20.670000, 19.441999, 19.520000, 29695000),
('PRIO3', '2021-04-16', 19.680000, 19.719999, 19.059999, 19.628000, 24420000),
('PRIO3', '2021-04-19', 19.629999, 19.680000, 19.200001, 19.200001, 27859000),
('PRIO3', '2021-04-20', 19.312000, 19.420000, 18.459999, 18.591999, 29233500),
('PRIO3', '2021-04-22', 18.770000, 18.790001, 18.194000, 18.194000, 22487000),
('PRIO3', '2021-04-23', 18.322001, 18.760000, 18.205999, 18.370001, 21424000),
('PRIO3', '2021-04-26', 18.309999, 18.341999, 17.959999, 18.059999, 16832000),
('PRIO3', '2021-04-27', 18.139999, 18.389999, 17.972000, 18.016001, 18429500),
('PRIO3', '2021-04-28', 18.186001, 18.691999, 18.181999, 18.454000, 21598000),
('PRIO3', '2021-04-29', 18.742001, 18.858000, 18.274000, 18.520000, 19745000),
('PRIO3', '2021-04-30', 18.330000, 18.330000, 17.972000, 18.316000, 19956000),
('PRIO3', '2021-05-03', 18.582001, 18.610001, 18.150000, 18.372000, 17250500),
('PRIO3', '2021-05-04', 18.636000, 19.370001, 18.548000, 19.052000, 34762000),
('PRIO3', '2021-05-05', 19.219999, 19.629999, 19.120001, 19.400000, 18687000),
('PRIO3', '2021-05-06', 19.680000, 19.680000, 18.520000, 19.200001, 16160300),
('PRIO3', '2021-05-07', 19.090000, 19.219999, 18.670000, 19.209999, 14081100),
('PRIO3', '2021-05-10', 19.360001, 19.530001, 18.459999, 18.480000, 15316400),
('PRIO3', '2021-05-11', 18.520000, 18.520000, 17.790001, 18.170000, 10240500),
('PRIO3', '2021-05-12', 18.200001, 18.410000, 17.549999, 17.809999, 10339200),
('PRIO3', '2021-05-13', 17.700001, 17.889999, 17.080000, 17.330000, 14154400),
('PRIO3', '2021-05-14', 17.650000, 18.350000, 17.400000, 18.320000, 10652100),
('PRIO3', '2021-05-17', 18.139999, 18.969999, 18.000000, 18.809999, 10037800),
('PRIO3', '2021-05-18', 18.799999, 19.100000, 18.570000, 18.629999, 6087700)
ON CONFLICT ON CONSTRAINT split_pkey DO NOTHING;", error: column "nan" does not exist
LINE 45: ('PRIO3', '2019-03-06', nan, nan, nan, nan, nan),
                                 ^

2021-05-20 11:07:34,072:INFO:__main__:Program started.
2021-05-20 11:07:34,075:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-20 11:07:34,075:DEBUG:utils:File found.
2021-05-20 11:07:34,076:DEBUG:utils:The function 'read_cfg' took 1.30 milliseconds to run.
2021-05-20 11:07:34,084:DEBUG:utils:The function 'get_ticker_config_data' took 8.45 milliseconds to run.
2021-05-20 11:07:34,085:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2019		Final date: 19/05/2021
2021-05-20 11:07:34,097:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-20 11:07:41,780:ERROR:db_model:Error executing query "INSERT INTO daily_candles (ticker, day, open_price, max_price, min_price, close_price, volume)
VALUES
('PRIO3', '2019-01-02', 1.960000, 2.077800, 1.942200, 2.071200, 2565000),
('PRIO3', '2019-01-03', 2.089200, 2.089200, 2.046000, 2.075800, 3170000),
('PRIO3', '2019-01-04', 2.080000, 2.115600, 2.080000, 2.093200, 1490000),
('PRIO3', '2019-01-07', 2.120000, 2.148200, 2.088000, 2.091400, 2435000),
('PRIO3', '2019-01-08', 2.148400, 2.148400, 2.091200, 2.141400, 1285000),
('PRIO3', '2019-01-09', 2.148000, 2.199800, 2.148000, 2.167000, 1710000),
('PRIO3', '2019-01-10', 2.180000, 2.212000, 2.138000, 2.179200, 2660000),
('PRIO3', '2019-01-11', 2.199400, 2.206000, 2.168400, 2.205800, 1235000),
('PRIO3', '2019-01-14', 2.196000, 2.230000, 2.169000, 2.189800, 3465000),
('PRIO3', '2019-01-15', 2.189800, 2.229800, 2.184600, 2.200000, 2410000),
('PRIO3', '2019-01-16', 2.219200, 2.226800, 2.145200, 2.196000, 2590000),
('PRIO3', '2019-01-17', 2.170200, 2.223800, 2.100000, 2.200600, 5520000),
('PRIO3', '2019-01-18', 2.210000, 2.236000, 2.187800, 2.236000, 3480000),
('PRIO3', '2019-01-21', 2.240000, 2.334200, 2.240000, 2.334200, 3015000),
('PRIO3', '2019-01-22', 2.330000, 2.349800, 2.240000, 2.287800, 3675000),
('PRIO3', '2019-01-23', 2.319800, 2.319800, 2.260400, 2.277800, 1075000),
('PRIO3', '2019-01-24', 2.275200, 2.303200, 2.225200, 2.235200, 1495000),
('PRIO3', '2019-01-28', 2.235000, 2.273800, 2.137800, 2.146000, 2380000),
('PRIO3', '2019-01-29', 2.185800, 2.198000, 2.143800, 2.173800, 1790000),
('PRIO3', '2019-01-30', 2.200000, 2.486200, 2.200000, 2.360000, 8910000),
('PRIO3', '2019-01-31', 2.399800, 2.400000, 2.270000, 2.300000, 10555000),
('PRIO3', '2019-02-01', 2.340000, 2.356800, 2.219400, 2.240000, 8445000),
('PRIO3', '2019-02-04', 2.270000, 2.286000, 2.183600, 2.212600, 5195000),
('PRIO3', '2019-02-05', 2.230600, 2.231000, 2.160400, 2.184400, 2280000),
('PRIO3', '2019-02-06', 2.229600, 2.379800, 2.229400, 2.319600, 10645000),
('PRIO3', '2019-02-07', 2.310400, 2.351000, 2.240000, 2.264000, 5855000),
('PRIO3', '2019-02-08', 2.278000, 2.313000, 2.233000, 2.241000, 2130000),
('PRIO3', '2019-02-11', 2.279600, 2.350000, 2.243400, 2.320000, 4150000),
('PRIO3', '2019-02-12', 2.339600, 2.348600, 2.282000, 2.317800, 1780000),
('PRIO3', '2019-02-13', 2.344000, 2.524000, 2.344000, 2.524000, 8070000),
('PRIO3', '2019-02-14', 2.535000, 2.840000, 2.500000, 2.699200, 11555000),
('PRIO3', '2019-02-15', 2.714000, 2.820000, 2.657400, 2.700000, 5295000),
('PRIO3', '2019-02-18', 2.701200, 2.748000, 2.622000, 2.698000, 2275000),
('PRIO3', '2019-02-19', 2.707200, 2.760000, 2.707200, 2.712600, 1970000),
('PRIO3', '2019-02-20', 2.753800, 2.812000, 2.685000, 2.760000, 3215000),
('PRIO3', '2019-02-21', 2.800000, 2.872000, 2.764200, 2.773000, 6760000),
('PRIO3', '2019-02-22', 2.790000, 2.917400, 2.735000, 2.852200, 8425000),
('PRIO3', '2019-02-25', 2.871000, 2.919600, 2.814000, 2.858000, 9725000),
('PRIO3', '2019-02-26', 2.858000, 2.860000, 2.782000, 2.836000, 3795000),
('PRIO3', '2019-02-27', 2.839600, 3.065400, 2.810000, 3.048800, 5745000),
('PRIO3', '2019-02-28', 3.100000, 3.139800, 2.964000, 3.019600, 5450000),
('PRIO3', '2019-03-01', 3.044000, 3.360000, 3.012200, 3.360000, 11155000),
('PRIO3', '2019-03-07', 3.438000, 3.680000, 3.380000, 3.624000, 8729500),
('PRIO3', '2019-03-08', 3.620000, 3.620000, 3.488000, 3.500000, 6198500),
('PRIO3', '2019-03-11', 3.534000, 3.760000, 3.516000, 3.642000, 8300500),
('PRIO3', '2019-03-12', 3.630000, 3.882000, 3.500000, 3.520000, 20171500),
('PRIO3', '2019-03-13', 3.574000, 3.660000, 3.422000, 3.570000, 17534500),
('PRIO3', '2019-03-14', 3.622000, 3.718000, 3.584000, 3.712000, 7636500),
('PRIO3', '2019-03-15', 3.808000, 4.048000, 3.806000, 4.006000, 15854500),
('PRIO3', '2019-03-18', 4.082000, 4.326000, 3.998000, 4.060000, 21579500),
('PRIO3', '2019-03-19', 4.140000, 4.150000, 3.900000, 3.900000, 12290500),
('PRIO3', '2019-03-20', 3.942000, 4.134000, 3.922000, 4.054000, 16006000),
('PRIO3', '2019-03-21', 4.080000, 4.140000, 3.930000, 4.100000, 12989000),
('PRIO3', '2019-03-22', 4.010000, 4.072000, 3.954000, 3.960000, 6822500),
('PRIO3', '2019-03-25', 3.976000, 4.032000, 3.800000, 3.860000, 5976000),
('PRIO3', '2019-03-26', 4.020000, 4.020000, 3.892000, 3.924000, 4851000),
('PRIO3', '2019-03-27', 3.900000, 3.990000, 3.828000, 3.850000, 5621500),
('PRIO3', '2019-03-28', 3.840000, 3.896000, 3.730000, 3.798000, 6713500),
('PRIO3', '2019-03-29', 3.858000, 3.960000, 3.780000, 3.780000, 9040500),
('PRIO3', '2019-04-01', 3.838000, 3.996000, 3.832000, 3.876000, 5906500),
('PRIO3', '2019-04-02', 3.938000, 3.940000, 3.826000, 3.880000, 2732500),
('PRIO3', '2019-04-03', 3.930000, 3.930000, 3.790000, 3.800000, 3537000),
('PRIO3', '2019-04-04', 3.802000, 3.848000, 3.744000, 3.788000, 3078000),
('PRIO3', '2019-04-05', 3.784000, 3.834000, 3.746000, 3.778000, 2101500),
('PRIO3', '2019-04-08', 3.760000, 3.810000, 3.724000, 3.750000, 2646500),
('PRIO3', '2019-04-09', 3.738000, 3.742000, 3.602000, 3.602000, 4736000),
('PRIO3', '2019-04-10', 3.632000, 3.830000, 3.530000, 3.784000, 9648500),
('PRIO3', '2019-04-11', 3.834000, 3.840000, 3.626000, 3.626000, 5855500),
('PRIO3', '2019-04-12', 3.580000, 3.700000, 3.562000, 3.640000, 4515500),
('PRIO3', '2019-04-15', 3.682000, 3.714000, 3.594000, 3.610000, 2536500),
('PRIO3', '2019-04-16', 3.594000, 3.640000, 3.536000, 3.582000, 2660000),
('PRIO3', '2019-04-17', 3.620000, 3.714000, 3.580000, 3.620000, 3313000),
('PRIO3', '2019-04-18', 3.620000, 3.636000, 3.512000, 3.590000, 5202000),
('PRIO3', '2019-04-22', 3.644000, 3.886000, 3.620000, 3.862000, 10414000),
('PRIO3', '2019-04-23', 3.924000, 4.068000, 3.870000, 3.962000, 6865000),
('PRIO3', '2019-04-24', 3.994000, 3.996000, 3.826000, 3.870000, 5161000),
('PRIO3', '2019-04-25', 3.896000, 3.896000, 3.730000, 3.798000, 7782500),
('PRIO3', '2019-04-26', 3.762000, 3.798000, 3.682000, 3.740000, 2030000),
('PRIO3', '2019-04-29', 3.762000, 3.780000, 3.656000, 3.660000, 2491000),
('PRIO3', '2019-04-30', 3.696000, 3.758000, 3.668000, 3.690000, 3215500),
('PRIO3', '2019-05-02', 3.640000, 3.674000, 3.520000, 3.530000, 7332000),
('PRIO3', '2019-05-03', 3.538000, 3.594000, 3.454000, 3.516000, 4630000),
('PRIO3', '2019-05-06', 3.454000, 3.530000, 3.410000, 3.490000, 3052500),
('PRIO3', '2019-05-07', 3.496000, 3.510000, 3.432000, 3.460000, 1883000),
('PRIO3', '2019-05-08', 3.460000, 3.598000, 3.460000, 3.560000, 2822000),
('PRIO3', '2019-05-09', 3.568000, 3.568000, 3.474000, 3.486000, 1518000),
('PRIO3', '2019-05-10', 3.486000, 3.558000, 3.442000, 3.504000, 2307500),
('PRIO3', '2019-05-13', 3.500000, 3.544000, 3.318000, 3.318000, 4051000),
('PRIO3', '2019-05-14', 3.368000, 3.458000, 3.342000, 3.410000, 3053000),
('PRIO3', '2019-05-15', 3.388000, 3.550000, 3.300000, 3.422000, 4180500),
('PRIO3', '2019-05-16', 3.320000, 3.760000, 3.320000, 3.760000, 7901000),
('PRIO3', '2019-05-17', 3.700000, 3.874000, 3.650000, 3.738000, 7852000),
('PRIO3', '2019-05-20', 3.750000, 3.854000, 3.696000, 3.766000, 3955000),
('PRIO3', '2019-05-21', 3.782000, 3.850000, 3.642000, 3.728000, 5196000),
('PRIO3', '2019-05-22', 3.738000, 3.798000, 3.654000, 3.674000, 3702500),
('PRIO3', '2019-05-23', 3.640000, 3.678000, 3.484000, 3.506000, 6655500),
('PRIO3', '2019-05-24', 3.560000, 3.588000, 3.422000, 3.474000, 3737000),
('PRIO3', '2019-05-27', 3.506000, 3.672000, 3.462000, 3.596000, 4847500),
('PRIO3', '2019-05-28', 3.602000, 3.772000, 3.602000, 3.696000, 11953500),
('PRIO3', '2019-05-29', 3.658000, 3.718000, 3.566000, 3.600000, 5137000),
('PRIO3', '2019-05-30', 3.618000, 3.650000, 3.548000, 3.548000, 3117000),
('PRIO3', '2019-05-31', 3.480000, 3.550000, 3.440000, 3.474000, 4938000),
('PRIO3', '2019-06-03', 3.496000, 3.572000, 3.482000, 3.500000, 3171500),
('PRIO3', '2019-06-04', 3.538000, 3.542000, 3.456000, 3.476000, 2685000),
('PRIO3', '2019-06-05', 3.450000, 3.476000, 3.354000, 3.390000, 4341500),
('PRIO3', '2019-06-06', 3.428000, 3.428000, 3.344000, 3.378000, 2377000),
('PRIO3', '2019-06-07', 3.384000, 3.456000, 3.360000, 3.360000, 3757500),
('PRIO3', '2019-06-10', 3.400000, 3.400000, 3.326000, 3.346000, 2876500),
('PRIO3', '2019-06-11', 3.380000, 3.394000, 3.244000, 3.260000, 4131000),
('PRIO3', '2019-06-12', 3.252000, 3.252000, 3.102000, 3.144000, 8516000),
('PRIO3', '2019-06-13', 3.220000, 3.290000, 3.170000, 3.230000, 5285000),
('PRIO3', '2019-06-14', 3.220000, 3.258000, 3.174000, 3.204000, 2417500),
('PRIO3', '2019-06-17', 3.208000, 3.274000, 3.142000, 3.224000, 2614500),
('PRIO3', '2019-06-18', 3.240000, 3.262000, 3.190000, 3.210000, 3437500),
('PRIO3', '2019-06-19', 3.208000, 3.240000, 3.182000, 3.182000, 2106500),
('PRIO3', '2019-06-21', 3.276000, 3.388000, 3.260000, 3.266000, 7574000),
('PRIO3', '2019-06-24', 3.320000, 3.328000, 3.200000, 3.202000, 4198500),
('PRIO3', '2019-06-25', 3.200000, 3.218000, 3.126000, 3.136000, 4249500),
('PRIO3', '2019-06-26', 3.200000, 3.240000, 3.134000, 3.140000, 4059500),
('PRIO3', '2019-06-27', 3.148000, 3.168000, 3.062000, 3.090000, 4993500),
('PRIO3', '2019-06-28', 3.164000, 3.196000, 3.074000, 3.154000, 6187000),
('PRIO3', '2019-07-01', 3.240000, 3.260000, 3.160000, 3.182000, 4456500),
('PRIO3', '2019-07-02', 3.188000, 3.218000, 3.120000, 3.134000, 3729000),
('PRIO3', '2019-07-03', 3.162000, 3.218000, 3.096000, 3.218000, 2907000),
('PRIO3', '2019-07-04', 3.228000, 3.280000, 3.184000, 3.210000, 3608500),
('PRIO3', '2019-07-05', 3.212000, 3.280000, 3.176000, 3.280000, 2725500),
('PRIO3', '2019-07-08', 3.330000, 3.620000, 3.304000, 3.600000, 10450500),
('PRIO3', '2019-07-10', 3.700000, 3.796000, 3.486000, 3.634000, 12614000),
('PRIO3', '2019-07-11', 3.690000, 3.730000, 3.544000, 3.656000, 5272500),
('PRIO3', '2019-07-12', 3.690000, 3.840000, 3.664000, 3.754000, 11337500),
('PRIO3', '2019-07-15', 3.798000, 3.888000, 3.740000, 3.852000, 8141000),
('PRIO3', '2019-07-16', 3.860000, 3.908000, 3.638000, 3.660000, 9931500),
('PRIO3', '2019-07-17', 3.680000, 3.710000, 3.602000, 3.646000, 5223000),
('PRIO3', '2019-07-18', 3.670000, 3.676000, 3.546000, 3.634000, 3911000),
('PRIO3', '2019-07-19', 3.622000, 3.648000, 3.548000, 3.580000, 3424000),
('PRIO3', '2019-07-22', 3.580000, 3.640000, 3.450000, 3.584000, 5663000),
('PRIO3', '2019-07-23', 3.562000, 3.598000, 3.520000, 3.580000, 2633000),
('PRIO3', '2019-07-24', 3.596000, 3.790000, 3.554000, 3.654000, 7423500),
('PRIO3', '2019-07-25', 3.698000, 3.728000, 3.510000, 3.560000, 7168500),
('PRIO3', '2019-07-26', 3.548000, 3.638000, 3.512000, 3.552000, 4486000),
('PRIO3', '2019-07-29', 3.554000, 3.590000, 3.522000, 3.532000, 2377500),
('PRIO3', '2019-07-30', 3.500000, 3.580000, 3.476000, 3.568000, 3559000),
('PRIO3', '2019-07-31', 3.574000, 3.638000, 3.482000, 3.520000, 5419000),
('PRIO3', '2019-08-01', 3.540000, 3.572000, 3.382000, 3.430000, 6989000),
('PRIO3', '2019-08-02', 3.460000, 3.560000, 3.430000, 3.560000, 5078000),
('PRIO3', '2019-08-05', 3.506000, 3.586000, 3.488000, 3.524000, 4747000),
('PRIO3', '2019-08-06', 3.530000, 3.580000, 3.510000, 3.520000, 3247000),
('PRIO3', '2019-08-07', 3.520000, 3.536000, 3.396000, 3.486000, 3915500),
('PRIO3', '2019-08-08', 3.500000, 3.528000, 3.442000, 3.496000, 3783500),
('PRIO3', '2019-08-09', 3.460000, 3.600000, 3.460000, 3.522000, 5638000),
('PRIO3', '2019-08-12', 3.530000, 3.598000, 3.442000, 3.478000, 5288500),
('PRIO3', '2019-08-13', 3.478000, 3.556000, 3.424000, 3.510000, 5018000),
('PRIO3', '2019-08-14', 3.444000, 3.478000, 3.318000, 3.426000, 6777500),
('PRIO3', '2019-08-15', 3.520000, 3.620000, 3.170000, 3.340000, 15233500),
('PRIO3', '2019-08-16', 3.400000, 3.430000, 3.162000, 3.216000, 10329500),
('PRIO3', '2019-08-19', 3.240000, 3.280000, 3.120000, 3.240000, 7879500),
('PRIO3', '2019-08-20', 3.236000, 3.240000, 3.124000, 3.136000, 6865500),
('PRIO3', '2019-08-21', 3.172000, 3.226000, 3.128000, 3.226000, 6399000),
('PRIO3', '2019-08-22', 3.202000, 3.260000, 3.162000, 3.220000, 3986000),
('PRIO3', '2019-08-23', 3.154000, 3.182000, 2.978000, 3.030000, 10204500),
('PRIO3', '2019-08-26', 3.050000, 3.072000, 2.896000, 2.914000, 4973000),
('PRIO3', '2019-08-27', 2.920000, 2.976000, 2.796000, 2.888000, 9099000),
('PRIO3', '2019-08-28', 2.890000, 3.118000, 2.880000, 3.100000, 7771000),
('PRIO3', '2019-08-29', 3.130000, 3.226000, 3.068000, 3.220000, 5175500),
('PRIO3', '2019-08-30', 3.250000, 3.380000, 3.172000, 3.380000, 6250500),
('PRIO3', '2019-09-02', 3.340000, 3.420000, 3.316000, 3.330000, 3518000),
('PRIO3', '2019-09-03', 3.346000, 3.392000, 3.280000, 3.370000, 3904500),
('PRIO3', '2019-09-04', 3.404000, 3.450000, 3.370000, 3.384000, 6009000),
('PRIO3', '2019-09-05', 3.410000, 3.428000, 3.350000, 3.370000, 3217000),
('PRIO3', '2019-09-06', 3.370000, 3.420000, 3.336000, 3.404000, 3335000),
('PRIO3', '2019-09-09', 3.420000, 3.438000, 3.350000, 3.406000, 4049000),
('PRIO3', '2019-09-10', 3.408000, 3.440000, 3.364000, 3.386000, 3355500),
('PRIO3', '2019-09-11', 3.410000, 3.502000, 3.390000, 3.430000, 7864000),
('PRIO3', '2019-09-12', 3.430000, 3.464000, 3.380000, 3.424000, 6207000),
('PRIO3', '2019-09-13', 3.432000, 3.454000, 3.352000, 3.406000, 4544500),
('PRIO3', '2019-09-16', 3.562000, 3.586000, 3.462000, 3.498000, 12970500),
('PRIO3', '2019-09-17', 3.484000, 3.496000, 3.380000, 3.418000, 6001000),
('PRIO3', '2019-09-18', 3.416000, 3.558000, 3.402000, 3.520000, 4728500),
('PRIO3', '2019-09-19', 3.550000, 3.704000, 3.550000, 3.624000, 8389000),
('PRIO3', '2019-09-20', 3.648000, 3.664000, 3.564000, 3.646000, 4638000),
('PRIO3', '2019-09-23', 3.638000, 3.696000, 3.592000, 3.650000, 3130000),
('PRIO3', '2019-09-24', 3.658000, 3.668000, 3.592000, 3.622000, 2386500),
('PRIO3', '2019-09-25', 3.582000, 3.636000, 3.502000, 3.620000, 3928000),
('PRIO3', '2019-09-26', 3.608000, 3.608000, 3.486000, 3.502000, 7998500),
('PRIO3', '2019-09-27', 3.480000, 3.504000, 3.390000, 3.400000, 7121000),
('PRIO3', '2019-09-30', 3.402000, 3.484000, 3.320000, 3.484000, 4910500),
('PRIO3', '2019-10-01', 3.508000, 3.516000, 3.400000, 3.410000, 6542500),
('PRIO3', '2019-10-02', 3.412000, 3.412000, 3.330000, 3.380000, 4157000),
('PRIO3', '2019-10-03', 3.380000, 3.398000, 3.302000, 3.382000, 3161500),
('PRIO3', '2019-10-04', 3.390000, 3.442000, 3.364000, 3.420000, 2528500),
('PRIO3', '2019-10-07', 3.410000, 3.428000, 3.292000, 3.332000, 6075000),
('PRIO3', '2019-10-08', 3.330000, 3.336000, 3.200000, 3.200000, 5688500),
('PRIO3', '2019-10-09', 3.242000, 3.254000, 3.172000, 3.234000, 3807000),
('PRIO3', '2019-10-10', 3.200000, 3.296000, 3.200000, 3.238000, 3298000),
('PRIO3', '2019-10-11', 3.270000, 3.438000, 3.270000, 3.400000, 6148500),
('PRIO3', '2019-10-14', 3.390000, 3.408000, 3.372000, 3.398000, 2328000),
('PRIO3', '2019-10-15', 3.396000, 3.420000, 3.376000, 3.388000, 3604500),
('PRIO3', '2019-10-16', 3.398000, 3.414000, 3.340000, 3.400000, 2629000),
('PRIO3', '2019-10-17', 3.404000, 3.472000, 3.404000, 3.452000, 6098000),
('PRIO3', '2019-10-18', 3.464000, 3.500000, 3.406000, 3.424000, 4759000),
('PRIO3', '2019-10-21', 3.448000, 3.450000, 3.406000, 3.416000, 3660000),
('PRIO3', '2019-10-22', 3.426000, 3.524000, 3.404000, 3.520000, 12214000),
('PRIO3', '2019-10-23', 3.524000, 3.586000, 3.476000, 3.506000, 6605500),
('PRIO3', '2019-10-24', 3.506000, 3.560000, 3.442000, 3.560000, 5091500),
('PRIO3', '2019-10-25', 3.578000, 3.658000, 3.572000, 3.584000, 6466000),
('PRIO3', '2019-10-28', 3.574000, 3.690000, 3.574000, 3.632000, 6239500),
('PRIO3', '2019-10-29', 3.656000, 3.678000, 3.584000, 3.676000, 5162500),
('PRIO3', '2019-10-30', 3.672000, 3.776000, 3.636000, 3.700000, 6110500),
('PRIO3', '2019-10-31', 3.700000, 3.750000, 3.584000, 3.700000, 4549500),
('PRIO3', '2019-11-01', 3.600000, 3.790000, 3.562000, 3.764000, 10034500),
('PRIO3', '2019-11-04', 3.790000, 3.908000, 3.784000, 3.872000, 8134500),
('PRIO3', '2019-11-05', 3.872000, 3.960000, 3.776000, 3.806000, 5386000),
('PRIO3', '2019-11-06', 3.806000, 3.890000, 3.704000, 3.832000, 6748000),
('PRIO3', '2019-11-07', 3.836000, 3.990000, 3.818000, 3.946000, 6773000),
('PRIO3', '2019-11-08', 3.920000, 3.960000, 3.856000, 3.960000, 5726500),
('PRIO3', '2019-11-11', 3.946000, 3.986000, 3.886000, 3.908000, 4601000),
('PRIO3', '2019-11-12', 3.918000, 3.958000, 3.840000, 3.872000, 5224500),
('PRIO3', '2019-11-13', 3.862000, 3.914000, 3.802000, 3.856000, 4269000),
('PRIO3', '2019-11-14', 3.860000, 3.948000, 3.856000, 3.892000, 4367500),
('PRIO3', '2019-11-18', 3.920000, 4.000000, 3.814000, 3.878000, 6628500),
('PRIO3', '2019-11-19', 3.866000, 3.900000, 3.828000, 3.848000, 4888500),
('PRIO3', '2019-11-21', 3.860000, 3.956000, 3.820000, 3.950000, 5734000),
('PRIO3', '2019-11-22', 3.936000, 4.138000, 3.926000, 4.124000, 9723000),
('PRIO3', '2019-11-25', 4.118000, 4.198000, 4.074000, 4.080000, 5291500),
('PRIO3', '2019-11-26', 4.080000, 4.290000, 4.056000, 4.262000, 7603000),
('PRIO3', '2019-11-27', 4.238000, 4.316000, 4.148000, 4.230000, 4708500),
('PRIO3', '2019-11-28', 4.202000, 4.400000, 4.200000, 4.400000, 4594500),
('PRIO3', '2019-11-29', 4.600000, 4.780000, 4.506000, 4.652000, 14519000),
('PRIO3', '2019-12-02', 4.700000, 4.790000, 4.580000, 4.616000, 9836500),
('PRIO3', '2019-12-03', 4.628000, 4.752000, 4.540000, 4.696000, 8911500),
('PRIO3', '2019-12-04', 4.710000, 5.114000, 4.710000, 5.098000, 16626500),
('PRIO3', '2019-12-05', 5.102000, 5.242000, 4.960000, 4.990000, 9798000),
('PRIO3', '2019-12-06', 5.008000, 5.366000, 5.004000, 5.316000, 10928000),
('PRIO3', '2019-12-09', 5.316000, 5.388000, 5.210000, 5.362000, 5865500),
('PRIO3', '2019-12-10', 5.380000, 5.424000, 5.282000, 5.398000, 6190500),
('PRIO3', '2019-12-11', 5.400000, 5.676000, 5.368000, 5.480000, 9595000),
('PRIO3', '2019-12-12', 5.480000, 5.656000, 5.480000, 5.600000, 7601000),
('PRIO3', '2019-12-13', 5.700000, 5.970000, 5.628000, 5.866000, 10882000),
('PRIO3', '2019-12-16', 6.000000, 6.194000, 5.886000, 5.886000, 12225500),
('PRIO3', '2019-12-17', 5.900000, 6.024000, 5.646000, 5.980000, 12378500),
('PRIO3', '2019-12-18', 6.026000, 6.056000, 5.902000, 5.924000, 7718500),
('PRIO3', '2019-12-19', 5.926000, 6.076000, 5.926000, 6.000000, 6630000),
('PRIO3', '2019-12-20', 6.010000, 6.228000, 5.996000, 6.182000, 6827000),
('PRIO3', '2019-12-23', 6.230000, 6.728000, 6.200000, 6.660000, 17167500),
('PRIO3', '2019-12-26', 6.738000, 6.960000, 6.628000, 6.868000, 10446500),
('PRIO3', '2019-12-27', 6.970000, 7.080000, 6.746000, 6.780000, 10323500),
('PRIO3', '2019-12-30', 6.780000, 6.832000, 6.570000, 6.612000, 8933500),
('PRIO3', '2020-01-02', 6.740000, 7.176000, 6.658000, 7.156000, 9317500),
('PRIO3', '2020-01-03', 7.400000, 7.720000, 7.180000, 7.570000, 17031000),
('PRIO3', '2020-01-06', 7.730000, 7.950000, 7.454000, 7.718000, 25412000),
('PRIO3', '2020-01-07', 7.760000, 7.866000, 7.550000, 7.728000, 11539500),
('PRIO3', '2020-01-08', 7.740000, 7.830000, 7.570000, 7.570000, 9843500),
('PRIO3', '2020-01-09', 7.680000, 7.680000, 7.200000, 7.280000, 14933500),
('PRIO3', '2020-01-10', 7.260000, 7.594000, 7.076000, 7.444000, 13672000),
('PRIO3', '2020-01-13', 7.444000, 7.830000, 7.360000, 7.764000, 12750500),
('PRIO3', '2020-01-14', 7.842000, 8.222000, 7.780000, 8.222000, 14416000),
('PRIO3', '2020-01-15', 8.300000, 8.500000, 8.120000, 8.260000, 14057000),
('PRIO3', '2020-01-16', 8.292000, 8.520000, 8.230000, 8.276000, 14933500),
('PRIO3', '2020-01-17', 8.340000, 8.404000, 7.980000, 8.202000, 15219500),
('PRIO3', '2020-01-20', 8.300000, 8.612000, 8.140000, 8.612000, 9215000),
('PRIO3', '2020-01-21', 8.500000, 8.998000, 8.482000, 8.944000, 11411000),
('PRIO3', '2020-01-22', 9.018000, 9.380000, 9.018000, 9.240000, 14293000),
('PRIO3', '2020-01-23', 9.240000, 9.336000, 9.040000, 9.306000, 10740500),
('PRIO3', '2020-01-24', 9.306000, 9.496000, 9.100000, 9.100000, 13569500),
('PRIO3', '2020-01-27', 8.800000, 9.234000, 8.626000, 8.956000, 14783000),
('PRIO3', '2020-01-28', 9.100000, 9.520000, 9.100000, 9.520000, 17235500),
('PRIO3', '2020-01-29', 9.502000, 9.588000, 9.000000, 9.152000, 27216500),
('PRIO3', '2020-01-30', 8.800000, 9.470000, 8.660000, 9.460000, 26921000),
('PRIO3', '2020-01-31', 9.380000, 9.972000, 9.278000, 9.586000, 29119000),
('PRIO3', '2020-02-03', 9.700000, 9.894000, 9.462000, 9.594000, 18492500),
('PRIO3', '2020-02-04', 10.200000, 10.300000, 9.582000, 9.760000, 35390500),
('PRIO3', '2020-02-05', 9.950000, 10.000000, 9.420000, 9.600000, 19998000),
('PRIO3', '2020-02-06', 9.710000, 9.740000, 9.428000, 9.578000, 11920500),
('PRIO3', '2020-02-07', 9.480000, 9.860000, 9.298000, 9.662000, 20120000),
('PRIO3', '2020-02-10', 9.588000, 9.660000, 8.704000, 8.730000, 33001000),
('PRIO3', '2020-02-11', 8.990000, 9.126000, 8.092000, 9.098000, 24940000),
('PRIO3', '2020-02-12', 9.300000, 9.360000, 8.860000, 9.030000, 17112000),
('PRIO3', '2020-02-13', 8.798000, 9.070000, 8.710000, 8.970000, 8652500),
('PRIO3', '2020-02-14', 9.020000, 9.298000, 8.974000, 9.100000, 10468500),
('PRIO3', '2020-02-17', 9.190000, 9.280000, 8.960000, 9.000000, 8936500),
('PRIO3', '2020-02-18', 8.960000, 9.420000, 8.850000, 9.390000, 13921000),
('PRIO3', '2020-02-19', 9.488000, 9.558000, 9.140000, 9.410000, 14141000),
('PRIO3', '2020-02-20', 9.700000, 9.996000, 9.502000, 9.596000, 26730000),
('PRIO3', '2020-02-21', 9.600000, 9.880000, 9.456000, 9.592000, 10528000),
('PRIO3', '2020-02-27', 7.874000, 8.492000, 7.532000, 7.960000, 27311500),
('PRIO3', '2020-02-28', 7.778000, 7.932000, 7.560000, 7.880000, 25533000),
('PRIO3', '2020-03-02', 7.874000, 8.588000, 7.862000, 8.460000, 16556500),
('PRIO3', '2020-03-03', 8.700000, 8.996000, 8.312000, 8.356000, 22213000),
('PRIO3', '2020-03-04', 8.780000, 8.780000, 8.162000, 8.266000, 16563000),
('PRIO3', '2020-03-05', 8.148000, 8.452000, 7.746000, 7.910000, 12669500),
('PRIO3', '2020-03-06', 7.400000, 7.576000, 7.020000, 7.088000, 18805000),
('PRIO3', '2020-03-09', 4.560000, 5.520000, 4.434000, 4.498000, 36263000),
('PRIO3', '2020-03-10', 5.560000, 5.586000, 4.646000, 5.106000, 34331000),
('PRIO3', '2020-03-11', 4.800000, 5.096000, 4.400000, 4.662000, 22727500),
('PRIO3', '2020-03-12', 3.720000, 3.720000, 3.138000, 3.138000, 22238000),
('PRIO3', '2020-03-13', 4.010000, 4.010000, 3.068000, 3.734000, 28930500),
('PRIO3', '2020-03-16', 2.796000, 3.434000, 2.770000, 3.100000, 17996500),
('PRIO3', '2020-03-17', 3.200000, 3.258000, 2.902000, 2.938000, 18813000),
('PRIO3', '2020-03-18', 2.576000, 2.714000, 1.820000, 2.070000, 32222500),
('PRIO3', '2020-03-19', 2.080000, 2.560000, 1.874000, 2.366000, 27371000),
('PRIO3', '2020-03-20', 2.640000, 2.920000, 2.460000, 2.480000, 46994500),
('PRIO3', '2020-03-23', 2.400000, 2.468000, 2.162000, 2.376000, 21759000),
('PRIO3', '2020-03-24', 2.740000, 2.776000, 2.520000, 2.614000, 23621000),
('PRIO3', '2020-03-25', 2.656000, 3.680000, 2.630000, 3.458000, 37678500),
('PRIO3', '2020-03-26', 3.302000, 4.436000, 3.300000, 3.786000, 45235000),
('PRIO3', '2020-03-27', 3.450000, 3.940000, 3.390000, 3.620000, 28267500),
('PRIO3', '2020-03-30', 3.600000, 3.776000, 3.312000, 3.400000, 30852000),
('PRIO3', '2020-03-31', 3.530000, 3.640000, 3.260000, 3.340000, 25460500),
('PRIO3', '2020-04-01', 3.160000, 3.320000, 3.014000, 3.296000, 19625500),
('PRIO3', '2020-04-02', 3.630000, 3.948000, 3.464000, 3.900000, 48635000),
('PRIO3', '2020-04-03', 4.146000, 4.300000, 3.732000, 4.166000, 47891000),
('PRIO3', '2020-04-06', 4.334000, 5.144000, 4.242000, 5.144000, 51498000),
('PRIO3', '2020-04-07', 5.800000, 5.978000, 5.422000, 5.500000, 40758000),
('PRIO3', '2020-04-08', 5.380000, 5.820000, 5.326000, 5.598000, 41442000),
('PRIO3', '2020-04-09', 5.780000, 5.860000, 4.772000, 4.940000, 45063000),
('PRIO3', '2020-04-13', 4.954000, 5.076000, 4.590000, 4.692000, 27668000),
('PRIO3', '2020-04-14', 4.800000, 4.980000, 4.650000, 4.738000, 19645000),
('PRIO3', '2020-04-15', 4.400000, 4.730000, 4.324000, 4.700000, 19167000),
('PRIO3', '2020-04-16', 4.910000, 4.976000, 4.500000, 4.500000, 17058000),
('PRIO3', '2020-04-17', 4.568000, 4.596000, 4.394000, 4.402000, 13802000),
('PRIO3', '2020-04-20', 4.100000, 4.298000, 4.044000, 4.120000, 31161500),
('PRIO3', '2020-04-22', 3.904000, 4.080000, 3.820000, 3.962000, 38229500),
('PRIO3', '2020-04-23', 4.176000, 4.288000, 3.856000, 3.990000, 26066000),
('PRIO3', '2020-04-24', 3.900000, 3.964000, 3.540000, 3.710000, 23914000),
('PRIO3', '2020-04-27', 3.760000, 3.840000, 3.566000, 3.750000, 14922000),
('PRIO3', '2020-04-28', 3.896000, 4.400000, 3.808000, 4.358000, 34538000),
('PRIO3', '2020-04-29', 4.640000, 4.768000, 4.178000, 4.302000, 41152000),
('PRIO3', '2020-04-30', 4.300000, 4.400000, 4.082000, 4.090000, 20615000),
('PRIO3', '2020-05-04', 3.860000, 4.018000, 3.820000, 3.946000, 12919000),
('PRIO3', '2020-05-05', 4.160000, 4.356000, 4.132000, 4.236000, 23469500),
('PRIO3', '2020-05-06', 4.200000, 4.254000, 4.000000, 4.158000, 15893000),
('PRIO3', '2020-05-07', 4.360000, 4.382000, 4.110000, 4.156000, 23446000),
('PRIO3', '2020-05-08', 4.250000, 4.294000, 4.026000, 4.044000, 11140000),
('PRIO3', '2020-05-11', 4.020000, 4.234000, 3.940000, 4.220000, 16471000),
('PRIO3', '2020-05-12', 4.310000, 4.492000, 4.060000, 4.160000, 22610000),
('PRIO3', '2020-05-13', 4.202000, 4.236000, 3.950000, 4.052000, 12580500),
('PRIO3', '2020-05-14', 3.968000, 4.238000, 3.874000, 4.204000, 20706000),
('PRIO3', '2020-05-15', 4.266000, 4.384000, 4.164000, 4.164000, 22017500),
('PRIO3', '2020-05-18', 4.422000, 5.000000, 4.374000, 5.000000, 42178500),
('PRIO3', '2020-05-19', 4.990000, 5.412000, 4.932000, 5.400000, 41974500),
('PRIO3', '2020-05-20', 5.518000, 5.660000, 5.242000, 5.252000, 28028000),
('PRIO3', '2020-05-21', 5.358000, 5.556000, 5.246000, 5.500000, 30466000),
('PRIO3', '2020-05-22', 5.320000, 5.440000, 5.154000, 5.380000, 22925500),
('PRIO3', '2020-05-25', 5.550000, 5.890000, 5.550000, 5.796000, 23934500),
('PRIO3', '2020-05-26', 6.114000, 6.270000, 5.750000, 5.760000, 25939500),
('PRIO3', '2020-05-27', 5.770000, 5.970000, 5.578000, 5.950000, 19348000),
('PRIO3', '2020-05-28', 5.952000, 6.050000, 5.790000, 5.846000, 14740000),
('PRIO3', '2020-05-29', 5.790000, 6.196000, 5.702000, 6.196000, 15279000),
('PRIO3', '2020-06-01', 6.342000, 6.392000, 6.162000, 6.258000, 17478500),
('PRIO3', '2020-06-02', 6.398000, 6.720000, 6.380000, 6.718000, 19810500),
('PRIO3', '2020-06-03', 6.820000, 6.928000, 6.322000, 6.496000, 23072000),
('PRIO3', '2020-06-04', 6.382000, 6.800000, 6.322000, 6.784000, 18396500),
('PRIO3', '2020-06-05', 7.042000, 7.620000, 6.974000, 7.454000, 29239500),
('PRIO3', '2020-06-08', 7.696000, 7.708000, 7.360000, 7.472000, 23103500),
('PRIO3', '2020-06-09', 7.222000, 7.380000, 7.010000, 7.040000, 19798000),
('PRIO3', '2020-06-10', 7.184000, 7.184000, 6.564000, 6.584000, 25620000),
('PRIO3', '2020-06-12', 6.196000, 6.656000, 6.048000, 6.168000, 27565000),
('PRIO3', '2020-06-15', 5.824000, 6.720000, 5.750000, 6.700000, 25916000),
('PRIO3', '2020-06-16', 7.040000, 7.224000, 6.440000, 6.626000, 26651500),
('PRIO3', '2020-06-17', 6.720000, 6.856000, 6.524000, 6.666000, 12096500),
('PRIO3', '2020-06-18', 6.638000, 7.038000, 6.616000, 7.034000, 17947000),
('PRIO3', '2020-06-19', 7.240000, 7.356000, 6.850000, 7.024000, 23489000),
('PRIO3', '2020-06-22', 7.072000, 7.170000, 6.838000, 6.920000, 10013500),
('PRIO3', '2020-06-23', 7.100000, 7.288000, 6.920000, 7.132000, 17200500),
('PRIO3', '2020-06-24', 7.000000, 7.032000, 6.470000, 6.716000, 21306000),
('PRIO3', '2020-06-25', 6.634000, 7.088000, 6.550000, 7.088000, 20444500),
('PRIO3', '2020-06-26', 6.998000, 7.088000, 6.822000, 6.890000, 13622000),
('PRIO3', '2020-06-29', 6.978000, 7.032000, 6.824000, 6.990000, 11035500),
('PRIO3', '2020-06-30', 6.900000, 7.078000, 6.842000, 7.078000, 11433000),
('PRIO3', '2020-07-01', 7.084000, 7.330000, 6.900000, 6.900000, 20198000),
('PRIO3', '2020-07-02', 7.130000, 7.190000, 6.908000, 7.084000, 18604500),
('PRIO3', '2020-07-03', 7.028000, 7.036000, 6.868000, 6.966000, 10453000),
('PRIO3', '2020-07-06', 7.080000, 7.460000, 7.050000, 7.432000, 31797000),
('PRIO3', '2020-07-07', 7.318000, 7.492000, 7.270000, 7.430000, 13814000),
('PRIO3', '2020-07-08', 7.498000, 7.684000, 7.330000, 7.330000, 20526500),
('PRIO3', '2020-07-09', 7.428000, 7.448000, 7.104000, 7.328000, 23111500),
('PRIO3', '2020-07-10', 7.320000, 7.360000, 7.168000, 7.224000, 12803000),
('PRIO3', '2020-07-13', 7.300000, 7.870000, 7.260000, 7.728000, 31708500),
('PRIO3', '2020-07-14', 7.600000, 8.070000, 7.502000, 7.974000, 25490500),
('PRIO3', '2020-07-15', 8.158000, 8.216000, 7.900000, 8.026000, 16513500),
('PRIO3', '2020-07-16', 7.960000, 8.140000, 7.906000, 7.934000, 9055500),
('PRIO3', '2020-07-17', 8.010000, 8.140000, 7.792000, 7.832000, 21974500),
('PRIO3', '2020-07-20', 7.854000, 8.126000, 7.850000, 8.024000, 14944000),
('PRIO3', '2020-07-21', 8.228000, 8.440000, 8.128000, 8.230000, 23530000),
('PRIO3', '2020-07-22', 8.220000, 8.220000, 7.960000, 8.124000, 12995500),
('PRIO3', '2020-07-23', 8.118000, 8.230000, 7.738000, 7.900000, 13510500),
('PRIO3', '2020-07-24', 7.860000, 7.868000, 7.566000, 7.698000, 13692000),
('PRIO3', '2020-07-27', 7.758000, 8.078000, 7.710000, 8.028000, 12841500),
('PRIO3', '2020-07-28', 8.028000, 8.186000, 7.810000, 7.874000, 13316000),
('PRIO3', '2020-07-29', 7.980000, 8.060000, 7.868000, 7.874000, 8377500),
('PRIO3', '2020-07-30', 7.764000, 7.970000, 7.614000, 7.932000, 10235000),
('PRIO3', '2020-07-31', 7.970000, 8.040000, 7.732000, 7.918000, 11177000),
('PRIO3', '2020-08-03', 7.962000, 8.006000, 7.800000, 7.902000, 8472500),
('PRIO3', '2020-08-04', 7.700000, 7.946000, 7.648000, 7.658000, 11629500),
('PRIO3', '2020-08-05', 7.840000, 8.774000, 7.830000, 8.698000, 48037000),
('PRIO3', '2020-08-06', 8.680000, 8.784000, 8.400000, 8.436000, 18104500),
('PRIO3', '2020-08-07', 8.406000, 8.800000, 8.280000, 8.778000, 18658500),
('PRIO3', '2020-08-10', 8.778000, 9.202000, 8.728000, 9.082000, 21706000),
('PRIO3', '2020-08-11', 9.278000, 9.352000, 8.706000, 8.760000, 16075000),
('PRIO3', '2020-08-12', 8.900000, 8.956000, 8.570000, 8.880000, 13456500),
('PRIO3', '2020-08-13', 8.880000, 9.016000, 8.620000, 8.716000, 11656500),
('PRIO3', '2020-08-14', 8.740000, 8.810000, 8.486000, 8.618000, 9661500),
('PRIO3', '2020-08-17', 8.522000, 8.742000, 8.172000, 8.414000, 11884000),
('PRIO3', '2020-08-18', 8.606000, 8.828000, 8.526000, 8.810000, 13368000),
('PRIO3', '2020-08-19', 8.898000, 9.462000, 8.844000, 9.342000, 31808000),
('PRIO3', '2020-08-20', 9.110000, 9.544000, 9.030000, 9.178000, 19630000),
('PRIO3', '2020-08-21', 9.192000, 9.250000, 8.862000, 8.954000, 15401000),
('PRIO3', '2020-08-24', 9.110000, 9.200000, 8.770000, 8.856000, 13294500),
('PRIO3', '2020-08-25', 8.968000, 9.024000, 8.782000, 8.860000, 10792500),
('PRIO3', '2020-08-26', 8.860000, 8.938000, 8.614000, 8.766000, 10992500),
('PRIO3', '2020-08-27', 8.766000, 8.880000, 8.564000, 8.614000, 9201000),
('PRIO3', '2020-08-28', 8.820000, 8.848000, 8.532000, 8.598000, 11779500),
('PRIO3', '2020-08-31', 8.620000, 8.680000, 8.362000, 8.378000, 11390000),
('PRIO3', '2020-09-01', 8.460000, 8.840000, 8.282000, 8.800000, 21676500),
('PRIO3', '2020-09-02', 8.864000, 8.920000, 8.504000, 8.676000, 18271000),
('PRIO3', '2020-09-03', 8.568000, 8.828000, 8.524000, 8.674000, 20912500),
('PRIO3', '2020-09-04', 8.656000, 9.018000, 8.300000, 8.810000, 49525000),
('PRIO3', '2020-09-08', 8.500000, 8.600000, 8.104000, 8.274000, 28681000),
('PRIO3', '2020-09-09', 8.454000, 8.526000, 8.248000, 8.262000, 16166500),
('PRIO3', '2020-09-10', 8.242000, 8.270000, 7.868000, 7.918000, 17197000),
('PRIO3', '2020-09-11', 7.918000, 8.046000, 7.702000, 7.922000, 16852000),
('PRIO3', '2020-09-14', 7.924000, 7.980000, 7.760000, 7.800000, 10367000),
('PRIO3', '2020-09-15', 7.874000, 7.978000, 7.760000, 7.798000, 11218000),
('PRIO3', '2020-09-16', 7.924000, 7.940000, 7.742000, 7.754000, 10415000),
('PRIO3', '2020-09-17', 7.702000, 7.906000, 7.620000, 7.832000, 10464500),
('PRIO3', '2020-09-18', 7.762000, 7.960000, 7.506000, 7.622000, 11901000),
('PRIO3', '2020-09-21', 7.400000, 7.568000, 7.248000, 7.422000, 8928000),
('PRIO3', '2020-09-22', 7.442000, 7.506000, 7.274000, 7.300000, 7379500),
('PRIO3', '2020-09-23', 7.284000, 7.338000, 6.960000, 6.970000, 10641000),
('PRIO3', '2020-09-24', 6.970000, 7.434000, 6.864000, 7.300000, 16166500),
('PRIO3', '2020-09-25', 7.266000, 7.266000, 7.004000, 7.100000, 10880000),
('PRIO3', '2020-09-28', 7.256000, 7.296000, 6.922000, 6.960000, 9739500),
('PRIO3', '2020-09-29', 6.960000, 7.062000, 6.824000, 6.868000, 10749500),
('PRIO3', '2020-09-30', 6.900000, 7.090000, 6.872000, 6.978000, 7698000),
('PRIO3', '2020-10-01', 6.872000, 7.140000, 6.776000, 7.106000, 11629500),
('PRIO3', '2020-10-02', 6.966000, 7.000000, 6.834000, 6.854000, 9471500),
('PRIO3', '2020-10-05', 7.010000, 7.330000, 6.910000, 7.306000, 16451000),
('PRIO3', '2020-10-06', 7.422000, 7.508000, 7.120000, 7.146000, 17855500),
('PRIO3', '2020-10-07', 7.186000, 7.398000, 7.006000, 7.296000, 16012000),
('PRIO3', '2020-10-08', 7.440000, 7.488000, 7.178000, 7.240000, 17297500),
('PRIO3', '2020-10-09', 7.220000, 7.300000, 7.114000, 7.114000, 9491500),
('PRIO3', '2020-10-13', 7.130000, 7.260000, 6.962000, 7.106000, 12067000),
('PRIO3', '2020-10-14', 7.116000, 7.700000, 7.094000, 7.676000, 25178500),
('PRIO3', '2020-10-15', 7.490000, 7.490000, 7.202000, 7.246000, 28695000),
('PRIO3', '2020-10-16', 7.272000, 7.286000, 7.052000, 7.090000, 12081000),
('PRIO3', '2020-10-19', 7.134000, 7.462000, 7.104000, 7.172000, 19285000),
('PRIO3', '2020-10-20', 7.232000, 7.278000, 7.110000, 7.170000, 11280500),
('PRIO3', '2020-10-21', 7.120000, 7.326000, 7.096000, 7.182000, 10664000),
('PRIO3', '2020-10-22', 7.182000, 7.614000, 7.160000, 7.536000, 25534000),
('PRIO3', '2020-10-23', 7.560000, 7.630000, 7.234000, 7.260000, 17828500),
('PRIO3', '2020-10-26', 7.200000, 7.230000, 7.000000, 7.100000, 12188500),
('PRIO3', '2020-10-27', 7.136000, 7.170000, 6.922000, 6.940000, 11242500),
('PRIO3', '2020-10-28', 6.600000, 6.720000, 6.402000, 6.428000, 20785500),
('PRIO3', '2020-10-29', 6.296000, 6.640000, 6.112000, 6.600000, 19233500),
('PRIO3', '2020-10-30', 6.558000, 6.564000, 6.210000, 6.264000, 13506500),
('PRIO3', '2020-11-03', 6.608000, 6.608000, 6.328000, 6.486000, 14744000),
('PRIO3', '2020-11-04', 6.558000, 6.602000, 6.334000, 6.440000, 15708000),
('PRIO3', '2020-11-05', 6.524000, 6.550000, 6.362000, 6.470000, 12877500),
('PRIO3', '2020-11-06', 6.380000, 6.868000, 6.308000, 6.800000, 24335000),
('PRIO3', '2020-11-09', 7.206000, 7.252000, 6.820000, 7.048000, 27858500),
('PRIO3', '2020-11-10', 7.048000, 7.550000, 6.880000, 6.906000, 41159000),
('PRIO3', '2020-11-11', 7.066000, 7.070000, 6.582000, 6.676000, 24156500),
('PRIO3', '2020-11-12', 6.670000, 6.776000, 6.372000, 6.412000, 26280500),
('PRIO3', '2020-11-13', 6.438000, 6.808000, 6.428000, 6.800000, 19157000),
('PRIO3', '2020-11-16', 6.940000, 7.116000, 6.890000, 6.930000, 26428000),
('PRIO3', '2020-11-17', 6.872000, 7.220000, 6.840000, 7.054000, 19975500),
('PRIO3', '2020-11-18', 7.140000, 7.392000, 7.058000, 7.080000, 22399500),
('PRIO3', '2020-11-19', 7.620000, 9.200000, 7.600000, 9.200000, 161938000),
('PRIO3', '2020-11-23', 8.804000, 9.380000, 8.600000, 9.302000, 47696500),
('PRIO3', '2020-11-24', 9.298000, 9.550000, 9.020000, 9.060000, 37865000),
('PRIO3', '2020-11-25', 9.062000, 9.856000, 9.060000, 9.600000, 47446000),
('PRIO3', '2020-11-26', 9.474000, 10.096000, 9.402000, 10.096000, 29322500),
('PRIO3', '2020-11-27', 10.056000, 10.754000, 9.976000, 10.350000, 38553500),
('PRIO3', '2020-11-30', 10.326000, 10.536000, 9.858000, 10.034000, 22847500),
('PRIO3', '2020-12-01', 10.202000, 10.700000, 10.202000, 10.690000, 29599000),
('PRIO3', '2020-12-02', 10.624000, 10.636000, 10.146000, 10.178000, 26202000),
('PRIO3', '2020-12-03', 10.300000, 10.520000, 10.018000, 10.320000, 25346000),
('PRIO3', '2020-12-04', 10.472000, 11.800000, 10.472000, 11.156000, 65127000),
('PRIO3', '2020-12-07', 11.122000, 11.546000, 10.882000, 11.104000, 30632500),
('PRIO3', '2020-12-08', 11.106000, 11.318000, 10.734000, 10.800000, 20991500),
('PRIO3', '2020-12-09', 10.876000, 11.298000, 10.690000, 10.890000, 30584000),
('PRIO3', '2020-12-10', 11.086000, 11.780000, 10.884000, 11.552000, 40956500),
('PRIO3', '2020-12-11', 11.440000, 11.470000, 10.946000, 11.140000, 24979500),
('PRIO3', '2020-12-14', 11.354000, 11.440000, 10.940000, 11.100000, 21517500),
('PRIO3', '2020-12-15', 11.100000, 11.436000, 11.076000, 11.108000, 21522000),
('PRIO3', '2020-12-16', 11.040000, 11.374000, 10.836000, 11.230000, 35612000),
('PRIO3', '2020-12-17', 11.240000, 11.748000, 11.170000, 11.650000, 39898000),
('PRIO3', '2020-12-18', 11.656000, 11.886000, 11.314000, 11.350000, 34632000),
('PRIO3', '2020-12-21', 10.888000, 11.436000, 10.672000, 11.320000, 28398500),
('PRIO3', '2020-12-22', 11.434000, 11.942000, 11.420000, 11.936000, 42850500),
('PRIO3', '2020-12-23', 11.950000, 13.226000, 11.948000, 13.226000, 48030000),
('PRIO3', '2020-12-28', 13.596000, 14.274000, 13.264000, 13.308000, 39518500),
('PRIO3', '2020-12-29', 13.562000, 13.780000, 13.308000, 13.564000, 27027500),
('PRIO3', '2020-12-30', 13.744000, 14.046000, 13.564000, 14.038000, 21464500),
('PRIO3', '2021-01-04', 14.200000, 15.280000, 14.140000, 14.960000, 30372500),
('PRIO3', '2021-01-05', 15.480000, 15.580000, 14.310000, 14.758000, 47454500),
('PRIO3', '2021-01-06', 15.060000, 15.200000, 14.462000, 14.590000, 23827500),
('PRIO3', '2021-01-07', 14.724000, 15.158000, 14.724000, 14.806000, 22207500),
('PRIO3', '2021-01-08', 15.084000, 15.280000, 14.700000, 14.890000, 20296000),
('PRIO3', '2021-01-11', 14.732000, 16.920000, 14.600000, 15.570000, 59799000),
('PRIO3', '2021-01-12', 16.180000, 16.548000, 15.178000, 15.300000, 38187500),
('PRIO3', '2021-01-13', 15.360000, 16.030001, 14.842000, 15.896000, 42463500),
('PRIO3', '2021-01-14', 15.962000, 16.180000, 15.404000, 15.600000, 24654500),
('PRIO3', '2021-01-15', 15.300000, 15.600000, 14.722000, 14.856000, 19421500),
('PRIO3', '2021-01-18', 15.004000, 15.230000, 14.442000, 14.568000, 19358500),
('PRIO3', '2021-01-19', 14.830000, 14.942000, 13.900000, 14.700000, 30198500),
('PRIO3', '2021-01-20', 14.978000, 15.050000, 14.092000, 14.162000, 17976000),
('PRIO3', '2021-01-21', 14.162000, 15.134000, 14.162000, 14.856000, 33964500),
('PRIO3', '2021-01-22', 14.600000, 14.700000, 14.284000, 14.400000, 18105000),
('PRIO3', '2021-01-26', 14.442000, 14.760000, 13.956000, 14.120000, 19194000),
('PRIO3', '2021-01-27', 14.176000, 14.362000, 13.604000, 13.680000, 23483500),
('PRIO3', '2021-01-28', 13.824000, 14.396000, 13.508000, 14.356000, 17366000),
('PRIO3', '2021-01-29', 14.058000, 14.942000, 13.744000, 14.098000, 47635000),
('PRIO3', '2021-02-01', 14.442000, 14.760000, 13.940000, 14.694000, 37862500),
('PRIO3', '2021-02-02', 14.962000, 15.876000, 14.962000, 15.566000, 42682000),
('PRIO3', '2021-02-03', 15.756000, 15.844000, 15.128000, 15.376000, 26285500),
('PRIO3', '2021-02-04', 15.458000, 15.570000, 15.026000, 15.176000, 21440500),
('PRIO3', '2021-02-05', 15.312000, 16.150000, 15.060000, 15.700000, 44441000),
('PRIO3', '2021-02-08', 15.852000, 16.535999, 15.852000, 16.218000, 33790000),
('PRIO3', '2021-02-09', 16.200001, 16.370001, 15.272000, 15.548000, 37640500),
('PRIO3', '2021-02-10', 15.706000, 15.886000, 15.346000, 15.886000, 25919000),
('PRIO3', '2021-02-11', 15.982000, 16.020000, 15.300000, 15.466000, 22267000),
('PRIO3', '2021-02-12', 15.376000, 15.998000, 15.116000, 15.918000, 24224000),
('PRIO3', '2021-02-18', 17.524000, 18.408001, 17.521999, 17.681999, 38806500),
('PRIO3', '2021-02-19', 17.601999, 17.850000, 17.260000, 17.778000, 16894000),
('PRIO3', '2021-02-22', 17.500000, 18.450001, 16.900000, 18.438000, 40229000),
('PRIO3', '2021-02-23', 18.610001, 18.799999, 16.976000, 17.750000, 50106500),
('PRIO3', '2021-02-24', 17.992001, 18.398001, 17.472000, 17.472000, 33690500),
('PRIO3', '2021-02-25', 18.000000, 18.180000, 16.548000, 16.782000, 37175000),
('PRIO3', '2021-02-26', 17.000000, 17.250000, 16.420000, 16.722000, 28046000),
('PRIO3', '2021-03-01', 17.122000, 17.902000, 17.004000, 17.646000, 38751000),
('PRIO3', '2021-03-02', 17.194000, 17.778000, 16.718000, 17.134001, 38135500),
('PRIO3', '2021-03-03', 17.202000, 17.997999, 16.632000, 17.924000, 47689000),
('PRIO3', '2021-03-04', 17.920000, 18.598000, 17.440001, 18.598000, 51010500),
('PRIO3', '2021-03-05', 18.902000, 20.011999, 18.601999, 20.011999, 52429000),
('PRIO3', '2021-03-08', 19.704000, 20.278000, 18.997999, 19.000000, 43108000),
('PRIO3', '2021-03-09', 19.400000, 20.101999, 18.840000, 19.746000, 40084000),
('PRIO3', '2021-03-10', 19.860001, 19.892000, 18.410000, 18.879999, 42504000),
('PRIO3', '2021-03-11', 19.180000, 19.538000, 18.268000, 18.570000, 39436500),
('PRIO3', '2021-03-12', 18.562000, 18.993999, 18.309999, 18.702000, 27984000),
('PRIO3', '2021-03-15', 18.716000, 18.856001, 18.059999, 18.160000, 22538000),
('PRIO3', '2021-03-16', 18.266001, 18.532000, 17.968000, 18.200001, 25830500),
('PRIO3', '2021-03-17', 18.139999, 19.312000, 17.900000, 19.299999, 37547000),
('PRIO3', '2021-03-18', 19.148001, 19.398001, 17.299999, 17.639999, 47657500),
('PRIO3', '2021-03-19', 17.978001, 19.110001, 17.658001, 18.785999, 57369500),
('PRIO3', '2021-03-22', 18.629999, 18.738001, 17.908001, 18.110001, 27695000),
('PRIO3', '2021-03-23', 17.752001, 18.000000, 17.312000, 17.406000, 34163500),
('PRIO3', '2021-03-24', 17.820000, 18.379999, 17.601999, 17.601999, 39781500),
('PRIO3', '2021-03-25', 17.586000, 18.080000, 17.059999, 17.882000, 37597000),
('PRIO3', '2021-03-26', 18.278000, 18.940001, 17.924000, 18.502001, 47531000),
('PRIO3', '2021-03-29', 18.480000, 18.990000, 18.271999, 18.879999, 27968500),
('PRIO3', '2021-03-30', 18.916000, 18.916000, 18.232000, 18.454000, 29503000),
('PRIO3', '2021-03-31', 18.454000, 18.840000, 18.158001, 18.455999, 35841500),
('PRIO3', '2021-04-01', 18.566000, 18.708000, 18.191999, 18.195999, 23773000),
('PRIO3', '2021-04-05', 18.400000, 18.459999, 17.760000, 18.124001, 20827500),
('PRIO3', '2021-04-06', 18.299999, 18.900000, 18.132000, 18.698000, 30725000),
('PRIO3', '2021-04-07', 18.700001, 19.034000, 18.374001, 18.920000, 25850500),
('PRIO3', '2021-04-08', 19.072001, 19.378000, 18.450001, 18.950001, 26908000),
('PRIO3', '2021-04-09', 18.718000, 19.136000, 18.520000, 18.898001, 24417500),
('PRIO3', '2021-04-12', 19.072001, 19.528000, 18.974001, 19.382000, 34052000),
('PRIO3', '2021-04-13', 19.524000, 20.360001, 19.497999, 20.100000, 39009000),
('PRIO3', '2021-04-14', 20.480000, 20.638000, 20.268000, 20.360001, 26506500),
('PRIO3', '2021-04-15', 20.538000, 20.670000, 19.441999, 19.520000, 29695000),
('PRIO3', '2021-04-16', 19.680000, 19.719999, 19.059999, 19.628000, 24420000),
('PRIO3', '2021-04-19', 19.629999, 19.680000, 19.200001, 19.200001, 27859000),
('PRIO3', '2021-04-20', 19.312000, 19.420000, 18.459999, 18.591999, 29233500),
('PRIO3', '2021-04-22', 18.770000, 18.790001, 18.194000, 18.194000, 22487000),
('PRIO3', '2021-04-23', 18.322001, 18.760000, 18.205999, 18.370001, 21424000),
('PRIO3', '2021-04-26', 18.309999, 18.341999, 17.959999, 18.059999, 16832000),
('PRIO3', '2021-04-27', 18.139999, 18.389999, 17.972000, 18.016001, 18429500),
('PRIO3', '2021-04-28', 18.186001, 18.691999, 18.181999, 18.454000, 21598000),
('PRIO3', '2021-04-29', 18.742001, 18.858000, 18.274000, 18.520000, 19745000),
('PRIO3', '2021-04-30', 18.330000, 18.330000, 17.972000, 18.316000, 19956000),
('PRIO3', '2021-05-03', 18.582001, 18.610001, 18.150000, 18.372000, 17250500),
('PRIO3', '2021-05-04', 18.636000, 19.370001, 18.548000, 19.052000, 34762000),
('PRIO3', '2021-05-05', 19.219999, 19.629999, 19.120001, 19.400000, 18687000),
('PRIO3', '2021-05-06', 19.680000, 19.680000, 18.520000, 19.200001, 16160300),
('PRIO3', '2021-05-07', 19.090000, 19.219999, 18.670000, 19.209999, 14081100),
('PRIO3', '2021-05-10', 19.360001, 19.530001, 18.459999, 18.480000, 15316400),
('PRIO3', '2021-05-11', 18.520000, 18.520000, 17.790001, 18.170000, 10240500),
('PRIO3', '2021-05-12', 18.200001, 18.410000, 17.549999, 17.809999, 10339200),
('PRIO3', '2021-05-13', 17.700001, 17.889999, 17.080000, 17.330000, 14154400),
('PRIO3', '2021-05-14', 17.650000, 18.350000, 17.400000, 18.320000, 10652100),
('PRIO3', '2021-05-17', 18.139999, 18.969999, 18.000000, 18.809999, 10037800),
('PRIO3', '2021-05-18', 18.799999, 19.100000, 18.570000, 18.629999, 6087700)
ON CONFLICT ON CONSTRAINT split_pkey DO NOTHING;", error: constraint "split_pkey" for table "daily_candles" does not exist

2021-05-20 11:11:39,296:INFO:__main__:Program started.
2021-05-20 11:11:39,298:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-20 11:11:39,298:DEBUG:utils:File found.
2021-05-20 11:11:39,299:DEBUG:utils:The function 'read_cfg' took 1.04 milliseconds to run.
2021-05-20 11:11:39,308:DEBUG:utils:The function 'get_ticker_config_data' took 9.46 milliseconds to run.
2021-05-20 11:11:39,309:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2019		Final date: 19/05/2021
2021-05-20 11:11:39,321:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-20 12:25:59,756:INFO:__main__:Program started.
2021-05-20 12:25:59,758:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-20 12:25:59,759:DEBUG:utils:File found.
2021-05-20 12:25:59,759:DEBUG:utils:The function 'read_cfg' took 1.26 milliseconds to run.
2021-05-20 12:25:59,769:DEBUG:utils:The function 'get_ticker_config_data' took 9.46 milliseconds to run.
2021-05-20 12:25:59,769:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2019		Final date: 19/05/2021
2021-05-20 12:25:59,783:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-20 12:26:58,403:INFO:__main__:Program started.
2021-05-20 12:26:58,404:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-20 12:26:58,404:DEBUG:utils:File found.
2021-05-20 12:26:58,404:DEBUG:utils:The function 'read_cfg' took 0.99 milliseconds to run.
2021-05-20 12:26:58,419:DEBUG:utils:The function 'get_ticker_config_data' took 14.43 milliseconds to run.
2021-05-20 12:26:58,420:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2019		Final date: 19/05/2021
2021-05-20 12:26:58,435:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-20 12:28:38,223:INFO:__main__:Program started.
2021-05-20 12:28:38,226:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-20 12:28:38,228:DEBUG:utils:File found.
2021-05-20 12:28:38,230:DEBUG:utils:The function 'read_cfg' took 4.11 milliseconds to run.
2021-05-20 12:28:38,244:DEBUG:utils:The function 'get_ticker_config_data' took 14.25 milliseconds to run.
2021-05-20 12:28:38,245:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2019		Final date: 19/05/2021
2021-05-20 12:28:38,262:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 15:30:52,550:INFO:__main__:Program started.
2021-05-21 15:30:52,552:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 15:30:52,554:DEBUG:utils:File found.
2021-05-21 15:30:52,554:DEBUG:utils:The function 'read_cfg' took 2.73 milliseconds to run.
2021-05-21 15:30:52,566:DEBUG:utils:The function 'get_ticker_config_data' took 11.49 milliseconds to run.
2021-05-21 15:30:52,567:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2019		Final date: 19/05/2021
2021-05-21 15:30:52,617:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 15:31:34,698:INFO:__main__:Program started.
2021-05-21 15:31:34,700:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 15:31:34,701:DEBUG:utils:File found.
2021-05-21 15:31:34,701:DEBUG:utils:The function 'read_cfg' took 1.17 milliseconds to run.
2021-05-21 15:31:34,713:DEBUG:utils:The function 'get_ticker_config_data' took 11.21 milliseconds to run.
2021-05-21 15:31:34,713:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2019		Final date: 19/05/2021
2021-05-21 15:31:34,729:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 15:34:01,753:INFO:__main__:Program started.
2021-05-21 15:34:01,754:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 15:34:01,755:DEBUG:utils:File found.
2021-05-21 15:34:01,755:DEBUG:utils:The function 'read_cfg' took 1.20 milliseconds to run.
2021-05-21 15:34:01,766:DEBUG:utils:The function 'get_ticker_config_data' took 10.81 milliseconds to run.
2021-05-21 15:34:01,766:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2019		Final date: 21/05/2021
2021-05-21 15:34:01,779:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 15:35:00,358:ERROR:db_manager:yfinance has no data for ticker 'PRIO3.SA' ('2019-01-01', '2019-01-01').
2021-05-21 15:35:00,444:ERROR:db_model:Error executing query "INSERT INTO daily_candles (ticker, day, open_price, max_price, min_price, close_price, volume)
VALUES
ON CONFLICT ON CONSTRAINT daily_data_pkey DO NOTHING;", error: syntax error at or near "ON"
LINE 3: ON CONFLICT ON CONSTRAINT daily_data_pkey DO NOTHING;
        ^

2021-05-21 15:38:20,108:INFO:__main__:Program started.
2021-05-21 15:38:20,109:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 15:38:20,110:DEBUG:utils:File found.
2021-05-21 15:38:20,111:DEBUG:utils:The function 'read_cfg' took 1.49 milliseconds to run.
2021-05-21 15:38:20,121:DEBUG:utils:The function 'get_ticker_config_data' took 10.07 milliseconds to run.
2021-05-21 15:38:20,121:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 15:38:20,144:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 15:38:53,932:INFO:__main__:Program started.
2021-05-21 15:38:53,934:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 15:38:53,935:DEBUG:utils:File found.
2021-05-21 15:38:53,936:DEBUG:utils:The function 'read_cfg' took 1.80 milliseconds to run.
2021-05-21 15:38:53,945:DEBUG:utils:The function 'get_ticker_config_data' took 9.31 milliseconds to run.
2021-05-21 15:38:53,946:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 15:38:53,959:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 15:40:38,035:INFO:__main__:Program started.
2021-05-21 15:40:38,037:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 15:40:38,037:DEBUG:utils:File found.
2021-05-21 15:40:38,037:DEBUG:utils:The function 'read_cfg' took 0.80 milliseconds to run.
2021-05-21 15:40:38,047:DEBUG:utils:The function 'get_ticker_config_data' took 9.82 milliseconds to run.
2021-05-21 15:40:38,048:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 15:40:38,079:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 15:47:48,649:INFO:__main__:Program started.
2021-05-21 15:47:48,651:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 15:47:48,652:DEBUG:utils:File found.
2021-05-21 15:47:48,653:DEBUG:utils:The function 'read_cfg' took 1.77 milliseconds to run.
2021-05-21 15:47:48,669:DEBUG:utils:The function 'get_ticker_config_data' took 16.01 milliseconds to run.
2021-05-21 15:47:48,670:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 15:47:48,690:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 15:47:54,825:ERROR:db_manager:Error updating daily candles, error: list index out of range
2021-05-21 15:49:48,379:INFO:__main__:Program started.
2021-05-21 15:49:48,381:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 15:49:48,382:DEBUG:utils:File found.
2021-05-21 15:49:48,383:DEBUG:utils:The function 'read_cfg' took 1.93 milliseconds to run.
2021-05-21 15:49:48,396:DEBUG:utils:The function 'get_ticker_config_data' took 13.30 milliseconds to run.
2021-05-21 15:49:48,397:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 15:49:48,411:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 15:50:05,227:ERROR:db_manager:Error updating daily candles, error: list index out of range
2021-05-21 15:50:40,865:INFO:__main__:Program started.
2021-05-21 15:50:40,867:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 15:50:40,868:DEBUG:utils:File found.
2021-05-21 15:50:40,868:DEBUG:utils:The function 'read_cfg' took 1.47 milliseconds to run.
2021-05-21 15:50:40,877:DEBUG:utils:The function 'get_ticker_config_data' took 8.94 milliseconds to run.
2021-05-21 15:50:40,878:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 15:50:40,890:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 15:50:53,880:ERROR:db_manager:Error updating daily candles, error: list index out of range
2021-05-21 15:51:11,559:INFO:__main__:Program started.
2021-05-21 15:51:11,560:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 15:51:11,561:DEBUG:utils:File found.
2021-05-21 15:51:11,561:DEBUG:utils:The function 'read_cfg' took 1.07 milliseconds to run.
2021-05-21 15:51:11,580:DEBUG:utils:The function 'get_ticker_config_data' took 18.32 milliseconds to run.
2021-05-21 15:51:11,580:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 15:51:11,600:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 15:51:12,527:INFO:db_manager:Ticker 'PRIO3' updated.
2021-05-21 15:55:44,140:INFO:__main__:Program started.
2021-05-21 15:55:44,141:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 15:55:44,141:DEBUG:utils:File found.
2021-05-21 15:55:44,142:DEBUG:utils:The function 'read_cfg' took 0.77 milliseconds to run.
2021-05-21 15:55:44,152:DEBUG:utils:The function 'get_ticker_config_data' took 10.53 milliseconds to run.
2021-05-21 15:55:44,153:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 15:55:44,181:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 15:55:58,708:ERROR:db_manager:yfinance has no data for ticker 'PRIO3.SA' ('2021-05-18', '2021-05-18').
2021-05-21 16:03:17,846:INFO:__main__:Program started.
2021-05-21 16:03:17,849:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 16:03:17,849:DEBUG:utils:File found.
2021-05-21 16:03:17,850:DEBUG:utils:The function 'read_cfg' took 1.10 milliseconds to run.
2021-05-21 16:03:17,860:DEBUG:utils:The function 'get_ticker_config_data' took 10.56 milliseconds to run.
2021-05-21 16:03:17,861:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 16:03:17,881:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 16:03:22,716:ERROR:db_manager:Error updating daily candles, error: get_holidays() missing 2 required positional arguments: 'start_date' and 'end_date'
2021-05-21 16:04:05,591:INFO:__main__:Program started.
2021-05-21 16:04:05,593:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 16:04:05,593:DEBUG:utils:File found.
2021-05-21 16:04:05,594:DEBUG:utils:The function 'read_cfg' took 1.09 milliseconds to run.
2021-05-21 16:04:05,604:DEBUG:utils:The function 'get_ticker_config_data' took 10.39 milliseconds to run.
2021-05-21 16:04:05,605:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 16:04:05,619:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 16:04:27,090:ERROR:db_manager:Error updating daily candles, error: get_holidays() missing 2 required positional arguments: 'start_date' and 'end_date'
2021-05-21 16:05:03,248:INFO:__main__:Program started.
2021-05-21 16:05:03,250:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 16:05:03,250:DEBUG:utils:File found.
2021-05-21 16:05:03,250:DEBUG:utils:The function 'read_cfg' took 1.05 milliseconds to run.
2021-05-21 16:05:03,261:DEBUG:utils:The function 'get_ticker_config_data' took 10.47 milliseconds to run.
2021-05-21 16:05:03,262:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 16:05:03,286:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 16:07:52,409:ERROR:db_manager:yfinance has no data for ticker 'PRIO3.SA' ('2021-05-18', '2021-05-18').
2021-05-21 16:12:55,794:INFO:__main__:Program started.
2021-05-21 16:12:55,797:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 16:12:55,798:DEBUG:utils:File found.
2021-05-21 16:12:55,798:DEBUG:utils:The function 'read_cfg' took 1.28 milliseconds to run.
2021-05-21 16:12:55,816:DEBUG:utils:The function 'get_ticker_config_data' took 17.77 milliseconds to run.
2021-05-21 16:12:55,819:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 16:12:55,873:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 16:13:10,903:ERROR:db_manager:Error updating daily candles, error: Cannot safely convert provided holidays input into an array of dates
2021-05-21 16:50:57,914:INFO:__main__:Program started.
2021-05-21 16:50:57,917:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 16:50:57,917:DEBUG:utils:File found.
2021-05-21 16:50:57,918:DEBUG:utils:The function 'read_cfg' took 1.07 milliseconds to run.
2021-05-21 16:50:57,929:DEBUG:utils:The function 'get_ticker_config_data' took 10.57 milliseconds to run.
2021-05-21 16:50:57,929:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 16:50:57,944:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 16:51:45,861:ERROR:db_manager:Error updating daily candles, error: Cannot safely convert provided holidays input into an array of dates
2021-05-21 16:54:16,204:INFO:__main__:Program started.
2021-05-21 16:54:16,206:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 16:54:16,206:DEBUG:utils:File found.
2021-05-21 16:54:16,206:DEBUG:utils:The function 'read_cfg' took 0.98 milliseconds to run.
2021-05-21 16:54:16,223:DEBUG:utils:The function 'get_ticker_config_data' took 16.23 milliseconds to run.
2021-05-21 16:54:16,223:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 16:54:16,259:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 16:54:21,024:ERROR:db_manager:Error updating daily candles, error: Iterator operand 0 dtype could not be cast from dtype('<M8[us]') to dtype('<M8[D]') according to the rule 'safe'
2021-05-21 16:56:33,765:INFO:__main__:Program started.
2021-05-21 16:56:33,766:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 16:56:33,767:DEBUG:utils:File found.
2021-05-21 16:56:33,767:DEBUG:utils:The function 'read_cfg' took 0.90 milliseconds to run.
2021-05-21 16:56:33,778:DEBUG:utils:The function 'get_ticker_config_data' took 10.73 milliseconds to run.
2021-05-21 16:56:33,779:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 16:56:33,799:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 16:56:54,283:WARNING:db_manager:yfinance has no data for ticker 'PRIO3.SA' ('2021-05-18', '2021-05-18').
2021-05-21 17:00:02,180:INFO:__main__:Program started.
2021-05-21 17:00:02,182:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 17:00:02,183:DEBUG:utils:File found.
2021-05-21 17:00:02,183:DEBUG:utils:The function 'read_cfg' took 1.12 milliseconds to run.
2021-05-21 17:00:02,194:DEBUG:utils:The function 'get_ticker_config_data' took 10.45 milliseconds to run.
2021-05-21 17:00:02,194:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 17:00:02,208:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 17:00:18,498:ERROR:db_manager:Error updating daily candles, error: 'tuple' object has no attribute 'strftime'
2021-05-21 17:00:39,353:INFO:__main__:Program started.
2021-05-21 17:00:39,356:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 17:00:39,357:DEBUG:utils:File found.
2021-05-21 17:00:39,358:DEBUG:utils:The function 'read_cfg' took 2.32 milliseconds to run.
2021-05-21 17:00:39,367:DEBUG:utils:The function 'get_ticker_config_data' took 8.87 milliseconds to run.
2021-05-21 17:00:39,367:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 17:00:39,378:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 17:03:08,202:ERROR:db_manager:Error updating daily candles, error: 'tuple' object has no attribute 'strftime'
2021-05-21 17:03:28,154:INFO:__main__:Program started.
2021-05-21 17:03:28,156:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 17:03:28,159:DEBUG:utils:File found.
2021-05-21 17:03:28,159:DEBUG:utils:The function 'read_cfg' took 3.39 milliseconds to run.
2021-05-21 17:03:28,174:DEBUG:utils:The function 'get_ticker_config_data' took 14.83 milliseconds to run.
2021-05-21 17:03:28,175:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 17:03:28,204:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 17:08:03,237:WARNING:db_manager:yfinance has no data for ticker 'PRIO3.SA' ('2021-05-18', '2021-05-18').
2021-05-21 17:11:06,899:INFO:__main__:Program started.
2021-05-21 17:11:06,901:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 17:11:06,902:DEBUG:utils:File found.
2021-05-21 17:11:06,902:DEBUG:utils:The function 'read_cfg' took 1.20 milliseconds to run.
2021-05-21 17:11:06,912:DEBUG:utils:The function 'get_ticker_config_data' took 9.77 milliseconds to run.
2021-05-21 17:11:06,913:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 17:11:06,939:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 17:11:58,900:INFO:db_manager:Ticker 'PRIO3' updated.
2021-05-21 17:25:43,771:INFO:__main__:Program started.
2021-05-21 17:25:43,774:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 17:25:43,774:DEBUG:utils:File found.
2021-05-21 17:25:43,775:DEBUG:utils:The function 'read_cfg' took 1.35 milliseconds to run.
2021-05-21 17:25:43,786:DEBUG:utils:The function 'get_ticker_config_data' took 10.49 milliseconds to run.
2021-05-21 17:25:43,786:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 17:25:43,815:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 17:25:50,505:ERROR:db_manager:Error updating daily candles, error: Cannot safely convert provided holidays input into an array of dates
2021-05-21 17:27:03,858:INFO:__main__:Program started.
2021-05-21 17:27:03,860:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 17:27:03,860:DEBUG:utils:File found.
2021-05-21 17:27:03,861:DEBUG:utils:The function 'read_cfg' took 1.40 milliseconds to run.
2021-05-21 17:27:03,876:DEBUG:utils:The function 'get_ticker_config_data' took 14.31 milliseconds to run.
2021-05-21 17:27:03,876:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 17:27:03,898:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 17:27:55,194:ERROR:db_manager:Error updating daily candles, error: unsupported type for timedelta days component: numpy.int64
2021-05-21 17:30:25,035:INFO:__main__:Program started.
2021-05-21 17:30:25,037:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 17:30:25,037:DEBUG:utils:File found.
2021-05-21 17:30:25,038:DEBUG:utils:The function 'read_cfg' took 1.03 milliseconds to run.
2021-05-21 17:30:25,048:DEBUG:utils:The function 'get_ticker_config_data' took 10.50 milliseconds to run.
2021-05-21 17:30:25,049:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 17:30:25,093:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 17:30:32,756:ERROR:db_manager:Error updating daily candles, error: Cannot create a NumPy datetime other than NaT with generic units
2021-05-21 17:30:53,862:INFO:__main__:Program started.
2021-05-21 17:30:53,864:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 17:30:53,864:DEBUG:utils:File found.
2021-05-21 17:30:53,865:DEBUG:utils:The function 'read_cfg' took 1.19 milliseconds to run.
2021-05-21 17:30:53,874:DEBUG:utils:The function 'get_ticker_config_data' took 8.97 milliseconds to run.
2021-05-21 17:30:53,874:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 17:30:53,886:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 17:31:08,437:ERROR:db_manager:Error updating daily candles, error: Cannot create a NumPy datetime other than NaT with generic units
2021-05-21 18:01:52,342:INFO:__main__:Program started.
2021-05-21 18:01:52,346:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 18:01:52,347:DEBUG:utils:File found.
2021-05-21 18:01:52,347:DEBUG:utils:The function 'read_cfg' took 1.53 milliseconds to run.
2021-05-21 18:01:52,363:DEBUG:utils:The function 'get_ticker_config_data' took 14.94 milliseconds to run.
2021-05-21 18:01:52,363:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 18:01:52,395:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 18:02:25,646:ERROR:db_manager:Error updating daily candles, error: Cannot create a NumPy datetime other than NaT with generic units
2021-05-21 18:04:53,243:INFO:__main__:Program started.
2021-05-21 18:04:53,244:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 18:04:53,245:DEBUG:utils:File found.
2021-05-21 18:04:53,246:DEBUG:utils:The function 'read_cfg' took 1.71 milliseconds to run.
2021-05-21 18:04:53,261:DEBUG:utils:The function 'get_ticker_config_data' took 14.64 milliseconds to run.
2021-05-21 18:04:53,261:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 18:04:53,298:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 18:05:45,187:ERROR:db_manager:Error updating daily candles, error: unsupported type for timedelta days component: numpy.int64
2021-05-21 18:07:43,074:INFO:__main__:Program started.
2021-05-21 18:07:43,076:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 18:07:43,077:DEBUG:utils:File found.
2021-05-21 18:07:43,077:DEBUG:utils:The function 'read_cfg' took 1.33 milliseconds to run.
2021-05-21 18:07:43,087:DEBUG:utils:The function 'get_ticker_config_data' took 9.16 milliseconds to run.
2021-05-21 18:07:43,087:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 18:07:43,102:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 18:08:20,399:ERROR:db_manager:Error updating daily candles, error: unsupported type for timedelta days component: numpy.int64
2021-05-21 18:10:12,913:INFO:__main__:Program started.
2021-05-21 18:10:12,914:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 18:10:12,915:DEBUG:utils:File found.
2021-05-21 18:10:12,916:DEBUG:utils:The function 'read_cfg' took 1.75 milliseconds to run.
2021-05-21 18:10:12,926:DEBUG:utils:The function 'get_ticker_config_data' took 9.52 milliseconds to run.
2021-05-21 18:10:12,926:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 18:10:12,943:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 18:11:29,843:ERROR:db_manager:Error updating daily candles, error: unsupported type for timedelta days component: numpy.int64
2021-05-21 18:16:28,643:INFO:__main__:Program started.
2021-05-21 18:16:28,645:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 18:16:28,646:DEBUG:utils:File found.
2021-05-21 18:16:28,646:DEBUG:utils:The function 'read_cfg' took 1.01 milliseconds to run.
2021-05-21 18:16:28,656:DEBUG:utils:The function 'get_ticker_config_data' took 9.32 milliseconds to run.
2021-05-21 18:16:28,656:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 18:16:28,676:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 18:16:50,560:WARNING:db_manager:yfinance has no data for ticker 'PRIO3.SA' ('2021-05-15', '2021-05-16').
2021-05-21 18:17:02,822:INFO:__main__:Program started.
2021-05-21 18:17:02,824:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 18:17:02,825:DEBUG:utils:File found.
2021-05-21 18:17:02,826:DEBUG:utils:The function 'read_cfg' took 1.58 milliseconds to run.
2021-05-21 18:17:02,836:DEBUG:utils:The function 'get_ticker_config_data' took 9.67 milliseconds to run.
2021-05-21 18:17:02,836:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 18:17:02,851:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 18:17:28,870:WARNING:db_manager:yfinance has no data for ticker 'PRIO3.SA' ('2021-05-15', '2021-05-16').
2021-05-21 18:24:31,096:INFO:__main__:Program started.
2021-05-21 18:24:31,097:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 18:24:31,098:DEBUG:utils:File found.
2021-05-21 18:24:31,099:DEBUG:utils:The function 'read_cfg' took 1.43 milliseconds to run.
2021-05-21 18:24:31,107:DEBUG:utils:The function 'get_ticker_config_data' took 8.21 milliseconds to run.
2021-05-21 18:24:31,107:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 18:24:31,128:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 18:26:54,764:WARNING:db_manager:yfinance has no data for ticker 'PRIO3.SA' ('2021-05-15', '2021-05-16').
2021-05-21 18:27:34,333:INFO:__main__:Program started.
2021-05-21 18:27:34,335:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 18:27:34,336:DEBUG:utils:File found.
2021-05-21 18:27:34,336:DEBUG:utils:The function 'read_cfg' took 1.25 milliseconds to run.
2021-05-21 18:27:34,346:DEBUG:utils:The function 'get_ticker_config_data' took 9.78 milliseconds to run.
2021-05-21 18:27:34,346:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 18:27:34,362:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 18:29:18,836:WARNING:db_manager:yfinance has no data for ticker 'PRIO3.SA' ('2021-05-15', '2021-05-16').
2021-05-21 21:13:35,182:INFO:__main__:Program started.
2021-05-21 21:13:35,184:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 21:13:35,185:DEBUG:utils:File found.
2021-05-21 21:13:35,185:DEBUG:utils:The function 'read_cfg' took 1.44 milliseconds to run.
2021-05-21 21:13:35,201:DEBUG:utils:The function 'get_ticker_config_data' took 15.43 milliseconds to run.
2021-05-21 21:13:35,202:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 21:13:35,219:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 21:13:42,583:ERROR:db_manager:Error updating daily candles, error: compare_dates() missing 1 required positional argument: 'holidays'
2021-05-21 21:14:16,114:INFO:__main__:Program started.
2021-05-21 21:14:16,115:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 21:14:16,116:DEBUG:utils:File found.
2021-05-21 21:14:16,117:DEBUG:utils:The function 'read_cfg' took 1.44 milliseconds to run.
2021-05-21 21:14:16,126:DEBUG:utils:The function 'get_ticker_config_data' took 9.18 milliseconds to run.
2021-05-21 21:14:16,126:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 21:14:16,138:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 21:14:40,740:ERROR:db_manager:Error updating daily candles, error: compare_dates() missing 1 required positional argument: 'holidays'
2021-05-21 21:14:58,891:INFO:__main__:Program started.
2021-05-21 21:14:58,893:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 21:14:58,894:DEBUG:utils:File found.
2021-05-21 21:14:58,894:DEBUG:utils:The function 'read_cfg' took 1.29 milliseconds to run.
2021-05-21 21:14:58,908:DEBUG:utils:The function 'get_ticker_config_data' took 13.60 milliseconds to run.
2021-05-21 21:14:58,909:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 21:14:59,006:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 21:18:17,092:WARNING:db_manager:yfinance has no data for ticker 'PRIO3.SA' ('2021-05-15', '2021-05-16').
2021-05-21 21:20:35,677:INFO:__main__:Program started.
2021-05-21 21:20:35,678:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 21:20:35,679:DEBUG:utils:File found.
2021-05-21 21:20:35,679:DEBUG:utils:The function 'read_cfg' took 1.27 milliseconds to run.
2021-05-21 21:20:35,689:DEBUG:utils:The function 'get_ticker_config_data' took 9.71 milliseconds to run.
2021-05-21 21:20:35,689:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 21:20:35,707:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 21:22:42,149:WARNING:db_manager:yfinance has no data for ticker 'PRIO3.SA' ('2021-05-15', '2021-05-16').
2021-05-21 21:23:27,374:INFO:__main__:Program started.
2021-05-21 21:23:27,376:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 21:23:27,376:DEBUG:utils:File found.
2021-05-21 21:23:27,377:DEBUG:utils:The function 'read_cfg' took 1.61 milliseconds to run.
2021-05-21 21:23:27,391:DEBUG:utils:The function 'get_ticker_config_data' took 13.19 milliseconds to run.
2021-05-21 21:23:27,391:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 21:23:27,420:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 21:27:00,862:WARNING:db_manager:yfinance has no data for ticker 'PRIO3.SA' ('2021-05-15', '2021-05-16').
2021-05-21 21:27:11,873:INFO:__main__:Program started.
2021-05-21 21:27:11,874:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 21:27:11,875:DEBUG:utils:File found.
2021-05-21 21:27:11,876:DEBUG:utils:The function 'read_cfg' took 1.70 milliseconds to run.
2021-05-21 21:27:11,886:DEBUG:utils:The function 'get_ticker_config_data' took 9.95 milliseconds to run.
2021-05-21 21:27:11,886:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 21:27:11,900:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 21:27:45,245:WARNING:db_manager:yfinance has no data for ticker 'PRIO3.SA' ('2021-05-15', '2021-05-16').
2021-05-21 21:33:02,466:INFO:__main__:Program started.
2021-05-21 21:33:02,467:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 21:33:02,468:DEBUG:utils:File found.
2021-05-21 21:33:02,468:DEBUG:utils:The function 'read_cfg' took 1.18 milliseconds to run.
2021-05-21 21:33:02,477:DEBUG:utils:The function 'get_ticker_config_data' took 8.79 milliseconds to run.
2021-05-21 21:33:02,477:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 21:33:02,496:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 21:33:14,090:ERROR:db_manager:Error updating daily candles, error: compare_dates() missing 1 required positional argument: 'holidays'
2021-05-21 21:33:36,843:INFO:__main__:Program started.
2021-05-21 21:33:36,844:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 21:33:36,845:DEBUG:utils:File found.
2021-05-21 21:33:36,846:DEBUG:utils:The function 'read_cfg' took 1.71 milliseconds to run.
2021-05-21 21:33:36,861:DEBUG:utils:The function 'get_ticker_config_data' took 15.22 milliseconds to run.
2021-05-21 21:33:36,862:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 21:33:36,889:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 21:34:43,433:WARNING:db_manager:yfinance has no data for ticker 'PRIO3.SA' ('2021-05-15', '2021-05-16').
2021-05-21 21:57:50,536:INFO:__main__:Program started.
2021-05-21 21:57:50,539:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 21:57:50,539:DEBUG:utils:File found.
2021-05-21 21:57:50,540:DEBUG:utils:The function 'read_cfg' took 1.13 milliseconds to run.
2021-05-21 21:57:50,549:DEBUG:utils:The function 'get_ticker_config_data' took 9.46 milliseconds to run.
2021-05-21 21:57:50,550:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 16/05/2021
2021-05-21 21:57:50,568:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 21:58:21,059:INFO:db_manager:Ticker 'PRIO3' already updated.
2021-05-21 21:58:49,916:INFO:__main__:Program started.
2021-05-21 21:58:49,918:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 21:58:49,919:DEBUG:utils:File found.
2021-05-21 21:58:49,919:DEBUG:utils:The function 'read_cfg' took 1.99 milliseconds to run.
2021-05-21 21:58:49,930:DEBUG:utils:The function 'get_ticker_config_data' took 10.83 milliseconds to run.
2021-05-21 21:58:49,931:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 17/05/2021
2021-05-21 21:58:49,947:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 21:59:33,281:INFO:db_manager:Ticker 'PRIO3' already updated.
2021-05-21 21:59:48,258:INFO:__main__:Program started.
2021-05-21 21:59:48,259:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 21:59:48,260:DEBUG:utils:File found.
2021-05-21 21:59:48,260:DEBUG:utils:The function 'read_cfg' took 0.94 milliseconds to run.
2021-05-21 21:59:48,271:DEBUG:utils:The function 'get_ticker_config_data' took 10.13 milliseconds to run.
2021-05-21 21:59:48,271:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 18/05/2021
2021-05-21 21:59:48,293:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 22:02:19,150:INFO:db_manager:Ticker 'PRIO3' updated.
2021-05-21 22:53:32,240:INFO:__main__:Program started.
2021-05-21 22:53:32,241:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 22:53:32,242:DEBUG:utils:File found.
2021-05-21 22:53:32,242:DEBUG:utils:The function 'read_cfg' took 1.29 milliseconds to run.
2021-05-21 22:53:32,252:DEBUG:utils:The function 'get_ticker_config_data' took 9.98 milliseconds to run.
2021-05-21 22:53:32,253:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 17/05/2021
2021-05-21 22:53:32,270:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 22:54:27,226:INFO:db_manager:Ticker 'PRIO3' data update finished.
2021-05-21 22:56:04,084:INFO:__main__:Program started.
2021-05-21 22:56:04,087:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 22:56:04,087:DEBUG:utils:File found.
2021-05-21 22:56:04,088:DEBUG:utils:The function 'read_cfg' took 1.34 milliseconds to run.
2021-05-21 22:56:04,099:DEBUG:utils:The function 'get_ticker_config_data' took 10.69 milliseconds to run.
2021-05-21 22:56:04,099:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 19/05/2021
2021-05-21 22:56:04,115:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 22:57:07,751:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-21 23:02:15,785:INFO:__main__:Program started.
2021-05-21 23:02:15,787:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 23:02:15,788:DEBUG:utils:File found.
2021-05-21 23:02:15,789:DEBUG:utils:The function 'read_cfg' took 1.38 milliseconds to run.
2021-05-21 23:02:15,801:DEBUG:utils:The function 'get_ticker_config_data' took 11.92 milliseconds to run.
2021-05-21 23:02:15,802:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 19/05/2021
2021-05-21 23:02:15,822:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 23:02:20,266:INFO:db_manager:Ticker 'PRIO3' already updated.
2021-05-21 23:03:10,928:INFO:__main__:Program started.
2021-05-21 23:03:10,929:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-21 23:03:10,930:DEBUG:utils:File found.
2021-05-21 23:03:10,930:DEBUG:utils:The function 'read_cfg' took 1.41 milliseconds to run.
2021-05-21 23:03:10,941:DEBUG:utils:The function 'get_ticker_config_data' took 10.93 milliseconds to run.
2021-05-21 23:03:10,942:INFO:__main__:Ticker: PRIO3 	Inital date: 01/12/2020		Final date: 19/05/2021
2021-05-21 23:03:10,955:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-21 23:03:54,327:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 10:44:53,250:INFO:__main__:Program started.
2021-05-22 10:44:53,252:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 10:44:53,252:DEBUG:utils:File found.
2021-05-22 10:44:53,252:DEBUG:utils:The function 'read_cfg' took 0.94 milliseconds to run.
2021-05-22 10:44:53,262:DEBUG:utils:The function 'get_ticker_config_data' took 9.64 milliseconds to run.
2021-05-22 10:44:53,263:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 19/05/2021
2021-05-22 10:44:53,276:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 10:45:14,645:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 10:45:40,303:INFO:__main__:Program started.
2021-05-22 10:45:40,303:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 10:45:40,304:DEBUG:utils:File found.
2021-05-22 10:45:40,304:DEBUG:utils:The function 'read_cfg' took 1.12 milliseconds to run.
2021-05-22 10:45:40,313:DEBUG:utils:The function 'get_ticker_config_data' took 8.28 milliseconds to run.
2021-05-22 10:45:40,313:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 19/05/2021
2021-05-22 10:45:40,350:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 10:46:17,776:INFO:db_manager:Ticker 'MGLU3' update finished.
2021-05-22 10:55:52,489:INFO:__main__:Program started.
2021-05-22 10:55:52,490:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 10:55:52,491:DEBUG:utils:File found.
2021-05-22 10:55:52,491:DEBUG:utils:The function 'read_cfg' took 0.84 milliseconds to run.
2021-05-22 10:55:52,502:DEBUG:utils:The function 'get_ticker_config_data' took 10.98 milliseconds to run.
2021-05-22 10:55:52,503:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 19/05/2021
2021-05-22 10:55:52,517:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 10:56:11,107:INFO:db_manager:Ticker 'PRIO3' already updated.
2021-05-22 10:57:23,518:INFO:__main__:Program started.
2021-05-22 10:57:23,519:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 10:57:23,519:DEBUG:utils:File found.
2021-05-22 10:57:23,519:DEBUG:utils:The function 'read_cfg' took 0.93 milliseconds to run.
2021-05-22 10:57:23,530:DEBUG:utils:The function 'get_ticker_config_data' took 10.18 milliseconds to run.
2021-05-22 10:57:23,530:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2021		Final date: 19/05/2021
2021-05-22 10:57:23,541:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 10:57:30,211:ERROR:db_model:Error executing query "INSERT INTO split (ticker, split_date, ratio)
VALUES
('PRIO3', '2021-05-06', 5.0)
ON CONFLICT ON CONSTRAINT split_pkey DO
UPDATE SET ratio = EXCLUDED.ratio
WHERE ticker = EXCLUDED.ticker AND split_date = EXCLUDED.split_date", error: column reference "ticker" is ambiguous
LINE 6: WHERE ticker = EXCLUDED.ticker AND split_date = EXCLUDED.spl...
              ^

2021-05-22 12:40:51,577:INFO:__main__:Program started.
2021-05-22 12:40:51,579:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 12:40:51,580:DEBUG:utils:File found.
2021-05-22 12:40:51,580:DEBUG:utils:The function 'read_cfg' took 0.98 milliseconds to run.
2021-05-22 12:40:51,591:DEBUG:utils:The function 'get_ticker_config_data' took 10.61 milliseconds to run.
2021-05-22 12:40:51,591:INFO:__main__:Ticker: MGLU3 	Inital date: 01/01/2020		Final date: 18/05/2021
2021-05-22 12:40:51,607:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 12:41:34,486:INFO:db_manager:Ticker 'MGLU3' update finished.
2021-05-22 13:17:24,742:INFO:__main__:Program started.
2021-05-22 13:17:24,748:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 13:17:24,749:DEBUG:utils:File found.
2021-05-22 13:17:24,749:DEBUG:utils:The function 'read_cfg' took 1.79 milliseconds to run.
2021-05-22 13:17:24,758:DEBUG:utils:The function 'get_ticker_config_data' took 8.15 milliseconds to run.
2021-05-22 13:17:24,758:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2020		Final date: 18/05/2021
2021-05-22 13:17:24,770:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 13:17:35,867:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 13:19:54,258:INFO:__main__:Program started.
2021-05-22 13:19:54,259:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 13:19:54,259:DEBUG:utils:File found.
2021-05-22 13:19:54,259:DEBUG:utils:The function 'read_cfg' took 0.81 milliseconds to run.
2021-05-22 13:19:54,269:DEBUG:utils:The function 'get_ticker_config_data' took 9.86 milliseconds to run.
2021-05-22 13:19:54,270:INFO:__main__:Ticker: PRIO3 	Inital date: 01/01/2020		Final date: 18/05/2021
2021-05-22 13:19:54,286:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 13:20:13,051:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 13:41:31,787:INFO:__main__:Program started.
2021-05-22 13:41:31,788:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 13:41:31,789:DEBUG:utils:File found.
2021-05-22 13:41:31,789:DEBUG:utils:The function 'read_cfg' took 1.27 milliseconds to run.
2021-05-22 13:41:31,802:DEBUG:utils:The function 'get_ticker_config_data' took 12.55 milliseconds to run.
2021-05-22 13:41:31,802:INFO:__main__:Ticker: PRIO3 	Inital date: 01/04/2020		Final date: 01/05/2021
2021-05-22 13:41:31,813:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 13:41:42,003:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 13:42:57,582:INFO:__main__:Program started.
2021-05-22 13:42:57,583:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 13:42:57,584:DEBUG:utils:File found.
2021-05-22 13:42:57,584:DEBUG:utils:The function 'read_cfg' took 0.86 milliseconds to run.
2021-05-22 13:42:57,594:DEBUG:utils:The function 'get_ticker_config_data' took 10.05 milliseconds to run.
2021-05-22 13:42:57,594:INFO:__main__:Ticker: PRIO3 	Inital date: 01/04/2020		Final date: 10/05/2021
2021-05-22 13:42:57,605:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 13:44:07,144:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 13:46:53,898:INFO:__main__:Program started.
2021-05-22 13:46:53,899:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 13:46:53,899:DEBUG:utils:File found.
2021-05-22 13:46:53,899:DEBUG:utils:The function 'read_cfg' took 0.86 milliseconds to run.
2021-05-22 13:46:53,910:DEBUG:utils:The function 'get_ticker_config_data' took 10.00 milliseconds to run.
2021-05-22 13:46:53,910:INFO:__main__:Ticker: PRIO3 	Inital date: 01/04/2021		Final date: 01/05/2021
2021-05-22 13:46:53,921:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 13:46:56,993:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 13:47:47,031:INFO:__main__:Program started.
2021-05-22 13:47:47,032:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 13:47:47,033:DEBUG:utils:File found.
2021-05-22 13:47:47,033:DEBUG:utils:The function 'read_cfg' took 0.80 milliseconds to run.
2021-05-22 13:47:47,045:DEBUG:utils:The function 'get_ticker_config_data' took 12.38 milliseconds to run.
2021-05-22 13:47:47,046:INFO:__main__:Ticker: PRIO3 	Inital date: 01/04/2021		Final date: 06/05/2021
2021-05-22 13:47:47,058:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 13:47:56,076:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 16:23:44,585:INFO:__main__:Program started.
2021-05-22 16:23:44,588:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 16:23:44,589:DEBUG:utils:File found.
2021-05-22 16:23:44,589:DEBUG:utils:The function 'read_cfg' took 1.24 milliseconds to run.
2021-05-22 16:23:44,598:DEBUG:utils:The function 'get_ticker_config_data' took 8.88 milliseconds to run.
2021-05-22 16:23:44,598:INFO:__main__:Ticker: PRIO3 	Inital date: 01/04/2021		Final date: 01/05/2021
2021-05-22 16:23:44,615:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 16:23:50,712:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 19:54:37,126:INFO:__main__:Program started.
2021-05-22 19:54:37,128:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 19:54:37,129:DEBUG:utils:File found.
2021-05-22 19:54:37,130:DEBUG:utils:The function 'read_cfg' took 1.73 milliseconds to run.
2021-05-22 19:54:37,140:DEBUG:utils:The function 'get_ticker_config_data' took 10.10 milliseconds to run.
2021-05-22 19:59:36,407:INFO:__main__:Program started.
2021-05-22 19:59:36,408:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 19:59:36,409:DEBUG:utils:File found.
2021-05-22 19:59:36,409:DEBUG:utils:The function 'read_cfg' took 0.99 milliseconds to run.
2021-05-22 19:59:36,419:DEBUG:utils:The function 'get_ticker_config_data' took 9.57 milliseconds to run.
2021-05-22 20:00:31,073:INFO:__main__:Program started.
2021-05-22 20:00:31,075:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 20:00:31,075:DEBUG:utils:File found.
2021-05-22 20:00:31,076:DEBUG:utils:The function 'read_cfg' took 1.26 milliseconds to run.
2021-05-22 20:00:31,087:DEBUG:utils:The function 'get_ticker_config_data' took 10.63 milliseconds to run.
2021-05-22 20:00:31,087:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 01/05/2021
2021-05-22 20:00:31,088:INFO:__main__:Ticker: 'MGLU3 '	Inital date: 01/04/2021		Final date: 22/05/2021
2021-05-22 20:00:31,088:INFO:__main__:Ticker: 'BBAS3 '	Inital date: 01/04/2021		Final date: 23/05/2021
2021-05-22 20:00:31,109:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 20:00:31,118:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 20:00:31,128:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 20:02:19,294:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 20:02:22,296:INFO:db_manager:Ticker 'MGLU3' update finished.
2021-05-22 20:02:25,022:INFO:db_manager:Ticker 'BBAS3' update finished.
2021-05-22 20:54:35,003:INFO:__main__:Program started.
2021-05-22 20:54:35,006:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 20:54:35,007:DEBUG:utils:File found.
2021-05-22 20:54:35,007:DEBUG:utils:The function 'read_cfg' took 1.62 milliseconds to run.
2021-05-22 20:54:35,017:DEBUG:utils:The function 'get_ticker_config_data' took 10.19 milliseconds to run.
2021-05-22 20:54:35,018:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 01/05/2021
2021-05-22 20:54:35,018:INFO:__main__:Ticker: 'MGLU3 '	Inital date: 01/04/2021		Final date: 23/05/2021
2021-05-22 20:54:35,018:INFO:__main__:Ticker: 'BBAS3 '	Inital date: 01/04/2021		Final date: 23/05/2021
2021-05-22 20:54:35,037:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 20:54:35,046:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 20:54:35,055:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 20:56:34,348:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 20:56:38,583:INFO:db_manager:Ticker 'MGLU3' update finished.
2021-05-22 20:56:42,481:INFO:db_manager:Ticker 'BBAS3' update finished.
2021-05-22 20:58:37,345:INFO:__main__:Program started.
2021-05-22 20:58:37,347:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 20:58:37,347:DEBUG:utils:File found.
2021-05-22 20:58:37,347:DEBUG:utils:The function 'read_cfg' took 1.17 milliseconds to run.
2021-05-22 20:58:37,358:DEBUG:utils:The function 'get_ticker_config_data' took 10.75 milliseconds to run.
2021-05-22 20:58:37,359:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 01/05/2021
2021-05-22 20:58:37,373:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 20:58:41,120:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 21:06:21,591:INFO:__main__:Program started.
2021-05-22 21:06:21,592:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 21:06:21,593:DEBUG:utils:File found.
2021-05-22 21:06:21,593:DEBUG:utils:The function 'read_cfg' took 1.19 milliseconds to run.
2021-05-22 21:06:21,604:DEBUG:utils:The function 'get_ticker_config_data' took 10.34 milliseconds to run.
2021-05-22 21:06:21,604:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 10/05/2021
2021-05-22 21:06:21,620:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 21:07:06,047:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 21:09:28,132:INFO:__main__:Program started.
2021-05-22 21:09:28,135:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 21:09:28,136:DEBUG:utils:File found.
2021-05-22 21:09:28,136:DEBUG:utils:The function 'read_cfg' took 2.01 milliseconds to run.
2021-05-22 21:09:28,148:DEBUG:utils:The function 'get_ticker_config_data' took 11.03 milliseconds to run.
2021-05-22 21:09:28,148:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 01/05/2021
2021-05-22 21:09:28,166:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 21:09:35,657:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 21:10:57,521:INFO:__main__:Program started.
2021-05-22 21:10:57,523:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 21:10:57,523:DEBUG:utils:File found.
2021-05-22 21:10:57,524:DEBUG:utils:The function 'read_cfg' took 1.31 milliseconds to run.
2021-05-22 21:10:57,534:DEBUG:utils:The function 'get_ticker_config_data' took 9.99 milliseconds to run.
2021-05-22 21:10:57,534:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 10/05/2021
2021-05-22 21:10:57,548:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 21:11:46,550:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 21:25:01,640:INFO:__main__:Program started.
2021-05-22 21:25:01,643:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 21:25:01,644:DEBUG:utils:File found.
2021-05-22 21:25:01,645:DEBUG:utils:The function 'read_cfg' took 2.28 milliseconds to run.
2021-05-22 21:25:01,654:DEBUG:utils:The function 'get_ticker_config_data' took 9.42 milliseconds to run.
2021-05-22 21:25:01,655:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 01/05/2021
2021-05-22 21:25:01,685:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 21:25:06,498:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 21:26:03,464:INFO:__main__:Program started.
2021-05-22 21:26:03,465:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 21:26:03,466:DEBUG:utils:File found.
2021-05-22 21:26:03,467:DEBUG:utils:The function 'read_cfg' took 1.37 milliseconds to run.
2021-05-22 21:26:03,476:DEBUG:utils:The function 'get_ticker_config_data' took 8.95 milliseconds to run.
2021-05-22 21:26:03,476:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 10/05/2021
2021-05-22 21:26:03,489:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 21:27:56,084:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 21:30:12,013:INFO:__main__:Program started.
2021-05-22 21:30:12,014:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 21:30:12,015:DEBUG:utils:File found.
2021-05-22 21:30:12,015:DEBUG:utils:The function 'read_cfg' took 1.26 milliseconds to run.
2021-05-22 21:30:12,028:DEBUG:utils:The function 'get_ticker_config_data' took 11.70 milliseconds to run.
2021-05-22 21:30:12,028:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 04/05/2021
2021-05-22 21:30:12,051:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 21:30:15,597:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 21:49:52,775:INFO:__main__:Program started.
2021-05-22 21:49:52,778:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 21:49:52,779:DEBUG:utils:File found.
2021-05-22 21:49:52,779:DEBUG:utils:The function 'read_cfg' took 1.03 milliseconds to run.
2021-05-22 21:49:52,790:DEBUG:utils:The function 'get_ticker_config_data' took 10.43 milliseconds to run.
2021-05-22 21:49:52,790:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/03/2021		Final date: 11/05/2021
2021-05-22 21:49:52,803:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 21:51:16,071:INFO:db_manager:Ticker 'PRIO3' update finished.
2021-05-22 22:14:05,622:INFO:__main__:Program started.
2021-05-22 22:14:05,625:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 22:14:05,625:DEBUG:utils:File found.
2021-05-22 22:14:05,625:DEBUG:utils:The function 'read_cfg' took 1.12 milliseconds to run.
2021-05-22 22:14:05,637:DEBUG:utils:The function 'get_ticker_config_data' took 10.90 milliseconds to run.
2021-05-22 22:14:05,637:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 05/05/2021
2021-05-22 22:14:05,654:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 22:14:05,658:ERROR:db_manager:Error updating daily candles, error: list index out of range
2021-05-22 22:14:58,870:INFO:__main__:Program started.
2021-05-22 22:14:58,872:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 22:14:58,873:DEBUG:utils:File found.
2021-05-22 22:14:58,873:DEBUG:utils:The function 'read_cfg' took 1.43 milliseconds to run.
2021-05-22 22:14:58,884:DEBUG:utils:The function 'get_ticker_config_data' took 10.32 milliseconds to run.
2021-05-22 22:14:58,885:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 05/05/2021
2021-05-22 22:14:58,898:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 22:14:58,901:ERROR:db_manager:Error updating daily candles, error: list index out of range
2021-05-22 22:16:08,795:INFO:__main__:Program started.
2021-05-22 22:16:08,796:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 22:16:08,797:DEBUG:utils:File found.
2021-05-22 22:16:08,797:DEBUG:utils:The function 'read_cfg' took 0.92 milliseconds to run.
2021-05-22 22:16:08,805:DEBUG:utils:The function 'get_ticker_config_data' took 8.20 milliseconds to run.
2021-05-22 22:16:08,806:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 05/05/2021
2021-05-22 22:16:08,820:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 22:16:27,322:ERROR:db_manager:Error updating daily candles, error: list index out of range
2021-05-22 22:16:44,591:INFO:__main__:Program started.
2021-05-22 22:16:44,593:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 22:16:44,593:DEBUG:utils:File found.
2021-05-22 22:16:44,594:DEBUG:utils:The function 'read_cfg' took 1.21 milliseconds to run.
2021-05-22 22:16:44,606:DEBUG:utils:The function 'get_ticker_config_data' took 11.67 milliseconds to run.
2021-05-22 22:16:44,606:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 05/05/2021
2021-05-22 22:16:44,633:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 22:17:18,957:ERROR:db_manager:Error updating daily candles, error: list index out of range
2021-05-22 22:38:18,489:INFO:__main__:Program started.
2021-05-22 22:38:18,492:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 22:38:18,493:DEBUG:utils:File found.
2021-05-22 22:38:18,493:DEBUG:utils:The function 'read_cfg' took 1.12 milliseconds to run.
2021-05-22 22:38:18,503:DEBUG:utils:The function 'get_ticker_config_data' took 9.93 milliseconds to run.
2021-05-22 22:38:18,504:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 05/05/2021
2021-05-22 22:38:18,529:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 22:38:39,635:INFO:db_manager:Ticker 'PRIO3' daily  candles update finished.
2021-05-22 22:38:42,808:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-22 22:46:08,987:INFO:__main__:Program started.
2021-05-22 22:46:08,989:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 22:46:08,989:DEBUG:utils:File found.
2021-05-22 22:46:08,990:DEBUG:utils:The function 'read_cfg' took 1.00 milliseconds to run.
2021-05-22 22:46:09,002:DEBUG:utils:The function 'get_ticker_config_data' took 11.44 milliseconds to run.
2021-05-22 22:46:09,002:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 05/05/2021
2021-05-22 22:46:09,031:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 22:46:22,352:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-22 22:47:13,496:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-22 22:48:30,545:INFO:__main__:Program started.
2021-05-22 22:48:30,547:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 22:48:30,547:DEBUG:utils:File found.
2021-05-22 22:48:30,548:DEBUG:utils:The function 'read_cfg' took 1.50 milliseconds to run.
2021-05-22 22:48:30,563:DEBUG:utils:The function 'get_ticker_config_data' took 14.59 milliseconds to run.
2021-05-22 22:48:30,563:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 05/05/2021
2021-05-22 22:48:30,601:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 22:48:36,403:ERROR:db_manager:Error updating daily  candles, error: local variable 'last_update_candles' referenced before assignment
2021-05-22 22:50:34,740:INFO:__main__:Program started.
2021-05-22 22:50:34,741:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 22:50:34,742:DEBUG:utils:File found.
2021-05-22 22:50:34,743:DEBUG:utils:The function 'read_cfg' took 1.89 milliseconds to run.
2021-05-22 22:50:34,756:DEBUG:utils:The function 'get_ticker_config_data' took 13.00 milliseconds to run.
2021-05-22 22:50:34,757:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 05/05/2021
2021-05-22 22:50:34,794:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 22:50:46,784:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-22 22:51:37,697:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-22 22:55:06,551:INFO:__main__:Program started.
2021-05-22 22:55:06,552:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 22:55:06,553:DEBUG:utils:File found.
2021-05-22 22:55:06,553:DEBUG:utils:The function 'read_cfg' took 1.26 milliseconds to run.
2021-05-22 22:55:06,563:DEBUG:utils:The function 'get_ticker_config_data' took 9.19 milliseconds to run.
2021-05-22 22:55:06,563:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 22/05/2021
2021-05-22 22:55:06,582:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 22:55:07,886:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-22 22:55:09,102:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-22 22:57:30,499:INFO:__main__:Program started.
2021-05-22 22:57:30,501:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 22:57:30,502:DEBUG:utils:File found.
2021-05-22 22:57:30,502:DEBUG:utils:The function 'read_cfg' took 1.16 milliseconds to run.
2021-05-22 22:57:30,513:DEBUG:utils:The function 'get_ticker_config_data' took 11.12 milliseconds to run.
2021-05-22 22:57:30,513:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 05/05/2021
2021-05-22 22:57:30,526:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 22:57:31,558:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-22 22:57:32,561:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-22 22:59:28,555:INFO:__main__:Program started.
2021-05-22 22:59:28,556:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-22 22:59:28,556:DEBUG:utils:File found.
2021-05-22 22:59:28,557:DEBUG:utils:The function 'read_cfg' took 0.84 milliseconds to run.
2021-05-22 22:59:28,567:DEBUG:utils:The function 'get_ticker_config_data' took 10.35 milliseconds to run.
2021-05-22 22:59:28,568:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 06/05/2021
2021-05-22 22:59:28,578:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-22 22:59:29,566:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-22 22:59:30,475:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 06:52:13,828:INFO:__main__:Program started.
2021-05-24 06:52:13,830:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 06:52:13,830:DEBUG:utils:File found.
2021-05-24 06:52:13,831:DEBUG:utils:The function 'read_cfg' took 0.96 milliseconds to run.
2021-05-24 06:52:13,839:DEBUG:utils:The function 'get_ticker_config_data' took 7.95 milliseconds to run.
2021-05-24 06:52:13,839:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 05/05/2021
2021-05-24 06:52:13,858:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 06:52:15,941:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 06:52:16,837:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 07:30:33,627:INFO:__main__:Program started.
2021-05-24 07:30:33,628:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 07:30:33,629:DEBUG:utils:File found.
2021-05-24 07:30:33,630:DEBUG:utils:The function 'read_cfg' took 1.44 milliseconds to run.
2021-05-24 07:30:33,639:DEBUG:utils:The function 'get_ticker_config_data' took 9.37 milliseconds to run.
2021-05-24 07:30:33,640:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 05/05/2021
2021-05-24 07:30:33,652:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 07:30:34,325:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 07:30:35,216:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 07:31:36,487:INFO:__main__:Program started.
2021-05-24 07:31:36,488:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 07:31:36,489:DEBUG:utils:File found.
2021-05-24 07:31:36,489:DEBUG:utils:The function 'read_cfg' took 0.95 milliseconds to run.
2021-05-24 07:31:36,499:DEBUG:utils:The function 'get_ticker_config_data' took 9.95 milliseconds to run.
2021-05-24 07:31:36,499:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 24/05/2021
2021-05-24 07:31:36,511:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 07:31:37,472:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 07:31:38,697:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 07:44:26,670:INFO:__main__:Program started.
2021-05-24 07:44:26,671:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 07:44:26,672:DEBUG:utils:File found.
2021-05-24 07:44:26,672:DEBUG:utils:The function 'read_cfg' took 1.16 milliseconds to run.
2021-05-24 07:44:26,683:DEBUG:utils:The function 'get_ticker_config_data' took 11.05 milliseconds to run.
2021-05-24 07:44:26,684:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 07:44:26,710:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 07:44:26,713:INFO:db_manager:Ticker 'PRIO3' already updated.
2021-05-24 07:44:26,714:INFO:db_manager:Ticker 'PRIO3' already updated.
2021-05-24 07:46:00,348:INFO:__main__:Program started.
2021-05-24 07:46:00,349:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 07:46:00,349:DEBUG:utils:File found.
2021-05-24 07:46:00,349:DEBUG:utils:The function 'read_cfg' took 0.87 milliseconds to run.
2021-05-24 07:46:00,359:DEBUG:utils:The function 'get_ticker_config_data' took 9.75 milliseconds to run.
2021-05-24 07:46:00,360:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 07:46:00,376:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 07:46:01,083:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 07:46:02,099:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 07:51:46,264:INFO:__main__:Program started.
2021-05-24 07:51:46,265:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 07:51:46,266:DEBUG:utils:File found.
2021-05-24 07:51:46,266:DEBUG:utils:The function 'read_cfg' took 1.05 milliseconds to run.
2021-05-24 07:51:46,277:DEBUG:utils:The function 'get_ticker_config_data' took 10.66 milliseconds to run.
2021-05-24 07:51:46,278:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 07:51:46,290:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 07:51:46,904:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 07:51:47,913:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 09:15:06,670:INFO:__main__:Program started.
2021-05-24 09:15:06,672:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 09:15:06,672:DEBUG:utils:File found.
2021-05-24 09:15:06,673:DEBUG:utils:The function 'read_cfg' took 1.21 milliseconds to run.
2021-05-24 09:15:06,683:DEBUG:utils:The function 'get_ticker_config_data' took 9.75 milliseconds to run.
2021-05-24 09:15:06,683:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 09:15:06,694:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 09:15:07,544:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 09:15:08,406:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 09:27:55,116:INFO:__main__:Program started.
2021-05-24 09:27:55,118:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 09:27:55,118:DEBUG:utils:File found.
2021-05-24 09:27:55,118:DEBUG:utils:The function 'read_cfg' took 1.01 milliseconds to run.
2021-05-24 09:27:55,129:DEBUG:utils:The function 'get_ticker_config_data' took 9.91 milliseconds to run.
2021-05-24 09:27:55,129:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 09:27:55,142:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 09:27:56,374:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 09:27:57,512:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 09:50:50,908:INFO:__main__:Program started.
2021-05-24 09:50:50,910:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 09:50:50,911:DEBUG:utils:File found.
2021-05-24 09:50:50,912:DEBUG:utils:The function 'read_cfg' took 1.55 milliseconds to run.
2021-05-24 09:50:50,922:DEBUG:utils:The function 'get_ticker_config_data' took 9.67 milliseconds to run.
2021-05-24 09:50:50,922:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 09:50:50,934:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 09:50:51,861:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 09:51:15,609:ERROR:db_model:Error executing query "INSERT INTO hourly_candles (ticker, date_hour, open_price, max_price, min_price, close_price, volume)
VALUES
('PRIO3', '2021-01-04 10:00:00', 71.000000, 73.680000, 70.699997, 71.989998, 667100),
('PRIO3', '2021-01-04 11:00:00', 71.970001, 75.769997, 71.779999, 75.570000, 1592900),
('PRIO3', '2021-01-04 12:00:00', 75.500000, 76.000000, 74.849998, 75.260002, 681200),
('PRIO3', '2021-01-04 13:00:00', 75.250000, 75.540001, 73.820000, 74.040001, 586300),
('PRIO3', '2021-01-04 14:00:00', 74.019997, 74.500000, 73.599998, 74.260002, 365200),
('PRIO3', '2021-01-04 15:00:00', 74.220001, 75.849998, 74.150002, 75.500000, 615800),
('PRIO3', '2021-01-05 10:00:00', 77.400002, 77.900002, 72.790001, 72.830002, 786500),
('PRIO3', '2021-01-05 11:00:00', 73.199997, 73.889999, 71.550003, 72.559998, 1967400),
('PRIO3', '2021-01-05 12:00:00', 72.599998, 76.610001, 72.599998, 75.250000, 2375700),
('PRIO3', '2021-01-05 13:00:00', 75.209999, 75.779999, 74.449997, 75.449997, 546700),
('PRIO3', '2021-01-05 14:00:00', 75.449997, 75.599998, 74.800003, 75.010002, 373600),
('PRIO3', '2021-01-05 15:00:00', 75.029999, 75.800003, 74.599998, 75.730003, 914900),
('PRIO3', '2021-01-06 10:00:00', 75.300003, 75.570000, 74.110001, 74.389999, 524300),
('PRIO3', '2021-01-06 11:00:00', 74.349998, 75.199997, 74.209999, 74.870003, 510000),
('PRIO3', '2021-01-06 12:00:00', 74.860001, 75.389999, 74.250000, 74.720001, 637600),
('PRIO3', '2021-01-06 13:00:00', 74.690002, 75.120003, 74.550003, 74.849998, 294500),
('PRIO3', '2021-01-06 14:00:00', 74.860001, 75.940002, 74.709999, 75.820000, 606700),
('PRIO3', '2021-01-06 15:00:00', 75.849998, 76.000000, 74.910004, 74.919998, 505500),
('PRIO3', '2021-01-07 10:00:00', 73.620003, 74.900002, 73.620003, 74.309998, 342000),
('PRIO3', '2021-01-07 11:00:00', 74.349998, 74.989998, 73.900002, 74.139999, 557400),
('PRIO3', '2021-01-07 12:00:00', 74.160004, 75.400002, 74.050003, 75.279999, 685900),
('PRIO3', '2021-01-07 13:00:00', 75.279999, 75.790001, 74.839996, 75.470001, 562700),
('PRIO3', '2021-01-07 14:00:00', 75.480003, 75.580002, 74.089996, 74.260002, 512800),
('PRIO3', '2021-01-07 15:00:00', 74.199997, 75.150002, 74.199997, 74.839996, 345000),
('PRIO3', '2021-01-08 10:00:00', 75.419998, 76.379997, 75.110001, 75.440002, 620500),
('PRIO3', '2021-01-08 11:00:00', 75.419998, 75.959999, 74.419998, 74.510002, 757300),
('PRIO3', '2021-01-08 12:00:00', 74.500000, 75.000000, 73.500000, 73.760002, 780600),
('PRIO3', '2021-01-08 13:00:00', 73.779999, 74.580002, 73.620003, 74.199997, 248300),
('PRIO3', '2021-01-08 14:00:00', 74.220001, 74.910004, 74.000000, 74.139999, 307300),
('PRIO3', '2021-01-08 15:00:00', 74.160004, 74.540001, 74.000000, 74.459999, 253300),
('PRIO3', '2021-01-11 10:00:00', 73.660004, 75.879997, 73.000000, 75.080002, 651900),
('PRIO3', '2021-01-11 11:00:00', 75.059998, 75.139999, 73.800003, 73.989998, 730800),
('PRIO3', '2021-01-11 12:00:00', 73.750000, 77.300003, 73.699997, 76.639999, 1592900),
('PRIO3', '2021-01-11 13:00:00', 76.739998, 78.970001, 76.720001, 78.900002, 1119600),
('PRIO3', '2021-01-11 14:00:00', 78.900002, 80.800003, 78.489998, 80.639999, 1125100),
('PRIO3', '2021-01-11 15:00:00', 80.660004, 83.949997, 80.000000, 83.230003, 1576600),
('PRIO3', '2021-01-12 10:00:00', 80.900002, 82.739998, 78.239998, 79.889999, 1076700),
('PRIO3', '2021-01-12 11:00:00', 79.849998, 81.209999, 78.669998, 78.949997, 1793000),
('PRIO3', '2021-01-12 12:00:00', 78.940002, 79.410004, 77.860001, 78.540001, 1069000),
('PRIO3', '2021-01-12 13:00:00', 78.529999, 78.779999, 77.500000, 78.089996, 678700),
('PRIO3', '2021-01-12 14:00:00', 78.029999, 78.199997, 75.889999, 77.070000, 712100),
('PRIO3', '2021-01-12 15:00:00', 77.070000, 77.099998, 76.129997, 76.300003, 525200),
('PRIO3', '2021-01-13 10:00:00', 76.800003, 77.489998, 75.599998, 76.199997, 368300),
('PRIO3', '2021-01-13 11:00:00', 76.199997, 76.599998, 74.209999, 74.800003, 868200),
('PRIO3', '2021-01-13 12:00:00', 74.750000, 77.800003, 74.500000, 77.559998, 1341000),
('PRIO3', '2021-01-13 13:00:00', 77.510002, 78.000000, 76.500000, 77.330002, 947200),
('PRIO3', '2021-01-13 14:00:00', 77.360001, 79.150002, 77.360001, 78.959999, 1448000),
('PRIO3', '2021-01-13 15:00:00', 78.959999, 79.989998, 78.599998, 79.830002, 1199100),
('PRIO3', '2021-01-14 10:00:00', 79.809998, 80.900002, 78.199997, 78.809998, 510600),
('PRIO3', '2021-01-14 11:00:00', 78.849998, 78.879997, 77.500000, 77.910004, 943400),
('PRIO3', '2021-01-14 12:00:00', 77.739998, 78.379997, 77.500000, 77.660004, 746300),
('PRIO3', '2021-01-14 13:00:00', 77.660004, 78.139999, 77.610001, 78.120003, 257000),
('PRIO3', '2021-01-14 14:00:00', 78.120003, 78.180000, 77.720001, 77.980003, 312200),
('PRIO3', '2021-01-14 15:00:00', 77.980003, 78.089996, 77.629997, 77.860001, 354700),
('PRIO3', '2021-01-15 10:00:00', 76.500000, 78.000000, 76.000000, 77.690002, 292000),
('PRIO3', '2021-01-15 11:00:00', 77.650002, 77.650002, 76.300003, 76.300003, 680900),
('PRIO3', '2021-01-15 12:00:00', 76.300003, 76.629997, 74.879997, 75.129997, 637900),
('PRIO3', '2021-01-15 13:00:00', 75.120003, 76.180000, 75.059998, 76.080002, 349700),
('PRIO3', '2021-01-15 14:00:00', 76.080002, 76.160004, 74.900002, 75.180000, 327000),
('PRIO3', '2021-01-15 15:00:00', 75.150002, 75.779999, 75.000000, 75.320000, 291000),
('PRIO3', '2021-01-18 10:00:00', 75.019997, 76.150002, 74.680000, 76.070000, 344000),
('PRIO3', '2021-01-18 11:00:00', 76.050003, 76.089996, 75.000000, 75.010002, 367500),
('PRIO3', '2021-01-18 12:00:00', 75.010002, 75.389999, 74.750000, 75.209999, 513600),
('PRIO3', '2021-01-18 13:00:00', 75.180000, 75.180000, 74.099998, 74.220001, 488200),
('PRIO3', '2021-01-18 14:00:00', 74.220001, 74.540001, 73.809998, 74.230003, 348000),
('PRIO3', '2021-01-18 15:00:00', 74.220001, 74.220001, 73.820000, 73.900002, 278600),
('PRIO3', '2021-01-19 10:00:00', 74.150002, 74.709999, 71.550003, 72.209999, 781900),
('PRIO3', '2021-01-19 11:00:00', 72.209999, 72.360001, 70.519997, 70.519997, 917000),
('PRIO3', '2021-01-19 12:00:00', 70.529999, 71.779999, 69.500000, 71.639999, 933900),
('PRIO3', '2021-01-19 13:00:00', 71.639999, 72.080002, 70.410004, 70.750000, 493200),
('PRIO3', '2021-01-19 14:00:00', 70.739998, 71.449997, 70.349998, 70.559998, 545900),
('PRIO3', '2021-01-19 15:00:00', 70.550003, 73.629997, 70.550003, 73.550003, 788900),
('PRIO3', '2021-01-20 10:00:00', 74.889999, 75.250000, 73.220001, 73.519997, 396200),
('PRIO3', '2021-01-20 11:00:00', 73.559998, 73.970001, 72.300003, 73.739998, 715800),
('PRIO3', '2021-01-20 12:00:00', 73.709999, 73.750000, 72.010002, 72.680000, 408700),
('PRIO3', '2021-01-20 13:00:00', 72.680000, 72.690002, 71.199997, 71.720001, 448200),
('PRIO3', '2021-01-20 14:00:00', 71.720001, 72.279999, 71.349998, 71.690002, 241300),
('PRIO3', '2021-01-20 15:00:00', 71.699997, 72.070000, 71.500000, 71.930000, 179900),
('PRIO3', '2021-01-21 10:00:00', 70.809998, 73.250000, 70.809998, 72.199997, 728100),
('PRIO3', '2021-01-21 11:00:00', 72.250000, 74.910004, 71.839996, 74.820000, 1447600),
('PRIO3', '2021-01-21 12:00:00', 74.879997, 74.889999, 72.610001, 74.250000, 1364500),
('PRIO3', '2021-01-21 13:00:00', 74.190002, 74.580002, 73.760002, 73.919998, 526700),
('PRIO3', '2021-01-21 14:00:00', 73.940002, 74.389999, 73.510002, 74.300003, 419800),
('PRIO3', '2021-01-21 15:00:00', 74.300003, 75.669998, 74.110001, 75.410004, 732300),
('PRIO3', '2021-01-22 10:00:00', 73.000000, 73.500000, 71.419998, 71.699997, 654700),
('PRIO3', '2021-01-22 11:00:00', 71.699997, 73.120003, 71.610001, 72.120003, 897300),
('PRIO3', '2021-01-22 12:00:00', 72.169998, 73.000000, 72.019997, 72.110001, 377700),
('PRIO3', '2021-01-22 13:00:00', 72.099998, 72.690002, 71.699997, 72.300003, 412900),
('PRIO3', '2021-01-22 14:00:00', 72.300003, 72.680000, 71.800003, 71.849998, 261300),
('PRIO3', '2021-01-22 15:00:00', 71.879997, 72.279999, 71.800003, 72.099998, 161200),
('PRIO3', '2021-01-26 10:00:00', 72.209999, 73.800003, 72.209999, 73.199997, 300200),
('PRIO3', '2021-01-26 11:00:00', 73.220001, 73.720001, 72.570000, 72.690002, 604100),
('PRIO3', '2021-01-26 12:00:00', 72.650002, 72.699997, 72.260002, 72.480003, 454800),
('PRIO3', '2021-01-26 13:00:00', 72.480003, 72.980003, 71.709999, 71.769997, 482800),
('PRIO3', '2021-01-26 14:00:00', 71.750000, 72.709999, 71.150002, 72.389999, 434700),
('PRIO3', '2021-01-26 15:00:00', 72.419998, 72.459999, 71.500000, 72.320000, 331300),
('PRIO3', '2021-01-27 10:00:00', 70.879997, 71.349998, 69.709999, 70.879997, 349700),
('PRIO3', '2021-01-27 11:00:00', 70.879997, 70.949997, 68.610001, 69.000000, 845400),
('PRIO3', '2021-01-27 12:00:00', 69.000000, 69.760002, 68.730003, 69.070000, 376400),
('PRIO3', '2021-01-27 13:00:00', 69.070000, 69.360001, 68.019997, 68.699997, 528800),
('PRIO3', '2021-01-27 14:00:00', 68.769997, 69.959999, 68.250000, 69.500000, 513600),
('PRIO3', '2021-01-27 15:00:00', 69.449997, 70.919998, 69.320000, 70.690002, 641200),
('PRIO3', '2021-01-28 10:00:00', 69.120003, 69.699997, 67.540001, 68.419998, 324400),
('PRIO3', '2021-01-28 11:00:00', 68.500000, 70.680000, 68.290001, 70.160004, 719800),
('PRIO3', '2021-01-28 12:00:00', 70.110001, 70.449997, 69.300003, 69.779999, 314100),
('PRIO3', '2021-01-28 13:00:00', 69.790001, 70.099998, 69.470001, 69.589996, 166400),
('PRIO3', '2021-01-28 14:00:00', 69.629997, 71.209999, 69.550003, 71.089996, 468600),
('PRIO3', '2021-01-28 15:00:00', 71.120003, 71.379997, 70.180000, 70.639999, 265300),
('PRIO3', '2021-01-29 10:00:00', 70.290001, 71.699997, 69.959999, 70.830002, 787700),
('PRIO3', '2021-01-29 11:00:00', 70.830002, 72.760002, 70.800003, 72.620003, 1152700),
('PRIO3', '2021-01-29 12:00:00', 72.589996, 74.709999, 72.269997, 73.070000, 1566000),
('PRIO3', '2021-01-29 13:00:00', 73.080002, 73.279999, 71.019997, 71.099998, 1123900),
('PRIO3', '2021-01-29 14:00:00', 71.089996, 71.639999, 70.000000, 70.059998, 971000),
('PRIO3', '2021-01-29 15:00:00', 70.080002, 70.199997, 69.000000, 69.239998, 1155500),
('PRIO3', '2021-02-01 10:00:00', 72.209999, 72.209999, 69.699997, 69.940002, 470400),
('PRIO3', '2021-02-01 11:00:00', 69.860001, 71.449997, 69.790001, 71.220001, 1068200),
('PRIO3', '2021-02-01 12:00:00', 71.230003, 71.449997, 70.000000, 70.080002, 799200),
('PRIO3', '2021-02-01 13:00:00', 70.080002, 71.570000, 69.959999, 71.389999, 603300),
('PRIO3', '2021-02-01 14:00:00', 71.440002, 72.099998, 70.980003, 71.959999, 746900),
('PRIO3', '2021-02-01 15:00:00', 71.919998, 73.190002, 71.230003, 73.059998, 1087100),
('PRIO3', '2021-02-02 10:00:00', 74.809998, 76.720001, 74.809998, 76.500000, 821600),
('PRIO3', '2021-02-02 11:00:00', 76.500000, 77.400002, 75.849998, 77.190002, 1396200),
('PRIO3', '2021-02-02 12:00:00', 77.190002, 78.300003, 76.300003, 77.949997, 1316600),
('PRIO3', '2021-02-02 13:00:00', 77.930000, 78.800003, 77.449997, 78.650002, 932900),
('PRIO3', '2021-02-02 14:00:00', 78.639999, 79.199997, 77.750000, 79.150002, 1132000),
('PRIO3', '2021-02-02 15:00:00', 79.150002, 79.379997, 78.160004, 78.800003, 769000),
('PRIO3', '2021-02-03 10:00:00', 78.779999, 79.220001, 76.879997, 77.300003, 359800),
('PRIO3', '2021-02-03 11:00:00', 77.349998, 78.500000, 76.559998, 77.129997, 811100),
('PRIO3', '2021-02-03 12:00:00', 77.160004, 77.400002, 76.199997, 76.279999, 540400),
('PRIO3', '2021-02-03 13:00:00', 76.269997, 77.260002, 75.800003, 75.949997, 621300),
('PRIO3', '2021-02-03 14:00:00', 75.940002, 76.849998, 75.639999, 76.230003, 787900),
('PRIO3', '2021-02-03 15:00:00', 76.230003, 76.599998, 76.010002, 76.400002, 444100),
('PRIO3', '2021-02-04 10:00:00', 77.290001, 77.849998, 76.500000, 76.809998, 320400),
('PRIO3', '2021-02-04 11:00:00', 76.830002, 77.500000, 76.230003, 76.260002, 473200),
('PRIO3', '2021-02-04 12:00:00', 76.290001, 76.580002, 75.129997, 75.550003, 761000),
('PRIO3', '2021-02-04 13:00:00', 75.550003, 76.209999, 75.389999, 75.739998, 386200),
('PRIO3', '2021-02-04 14:00:00', 75.709999, 76.279999, 75.300003, 75.510002, 304900),
('PRIO3', '2021-02-04 15:00:00', 75.510002, 75.889999, 75.209999, 75.489998, 488600),
('PRIO3', '2021-02-05 10:00:00', 76.559998, 76.690002, 75.300003, 76.459999, 337200),
('PRIO3', '2021-02-05 11:00:00', 76.410004, 80.750000, 76.230003, 79.660004, 2755800),
('PRIO3', '2021-02-05 12:00:00', 79.599998, 79.699997, 77.070000, 78.080002, 1204700),
('PRIO3', '2021-02-05 13:00:00', 78.080002, 78.470001, 77.529999, 77.809998, 630600),
('PRIO3', '2021-02-05 14:00:00', 77.820000, 79.000000, 77.699997, 78.940002, 727000),
('PRIO3', '2021-02-05 15:00:00', 78.959999, 80.430000, 78.820000, 79.290001, 1353000),
('PRIO3', '2021-02-08 10:00:00', 79.260002, 81.250000, 79.260002, 79.910004, 893600),
('PRIO3', '2021-02-08 11:00:00', 79.900002, 81.699997, 79.860001, 81.250000, 1354500),
('PRIO3', '2021-02-08 12:00:00', 81.260002, 81.889999, 79.750000, 80.169998, 1001800),
('PRIO3', '2021-02-08 13:00:00', 80.139999, 80.500000, 79.599998, 80.110001, 358900),
('PRIO3', '2021-02-08 14:00:00', 80.099998, 81.000000, 79.879997, 80.680000, 404000),
('PRIO3', '2021-02-08 15:00:00', 80.650002, 82.680000, 80.519997, 81.870003, 1299600),
('PRIO3', '2021-02-09 10:00:00', 81.000000, 81.849998, 79.930000, 79.949997, 603600),
('PRIO3', '2021-02-09 11:00:00', 79.930000, 81.150002, 79.000000, 79.019997, 1147000),
('PRIO3', '2021-02-09 12:00:00', 79.099998, 79.410004, 77.430000, 77.430000, 1260500),
('PRIO3', '2021-02-09 13:00:00', 77.440002, 77.989998, 76.360001, 77.489998, 1348300),
('PRIO3', '2021-02-09 14:00:00', 77.470001, 77.660004, 76.730003, 77.150002, 861100),
('PRIO3', '2021-02-09 15:00:00', 77.180000, 78.050003, 77.160004, 77.849998, 460200),
('PRIO3', '2021-02-10 10:00:00', 78.529999, 78.699997, 77.519997, 77.900002, 411300),
('PRIO3', '2021-02-10 11:00:00', 77.889999, 78.699997, 77.599998, 77.809998, 776700),
('PRIO3', '2021-02-10 12:00:00', 77.790001, 78.160004, 76.730003, 77.139999, 617400),
('PRIO3', '2021-02-10 13:00:00', 77.160004, 78.239998, 76.879997, 77.860001, 399900),
('PRIO3', '2021-02-10 14:00:00', 77.849998, 78.150002, 77.639999, 78.000000, 243800),
('PRIO3', '2021-02-10 15:00:00', 77.989998, 78.589996, 77.550003, 77.730003, 565600),
('PRIO3', '2021-02-11 10:00:00', 79.910004, 80.099998, 78.370003, 78.849998, 351100),
('PRIO3', '2021-02-11 11:00:00', 78.830002, 79.800003, 78.010002, 78.199997, 747400),
('PRIO3', '2021-02-11 12:00:00', 78.230003, 78.400002, 77.699997, 78.050003, 484700),
('PRIO3', '2021-02-11 13:00:00', 78.050003, 78.080002, 77.180000, 77.720001, 452100),
('PRIO3', '2021-02-11 14:00:00', 77.720001, 78.000000, 76.849998, 77.019997, 651100),
('PRIO3', '2021-02-11 15:00:00', 77.010002, 77.160004, 76.500000, 76.669998, 383100),
('PRIO3', '2021-02-12 10:00:00', 76.879997, 76.980003, 75.580002, 76.550003, 330800),
('PRIO3', '2021-02-12 11:00:00', 76.550003, 77.699997, 76.320000, 76.349998, 469000),
('PRIO3', '2021-02-12 12:00:00', 76.370003, 78.209999, 76.309998, 77.480003, 533700),
('PRIO3', '2021-02-12 13:00:00', 77.430000, 78.660004, 77.379997, 78.449997, 462200),
('PRIO3', '2021-02-12 14:00:00', 78.410004, 79.900002, 78.290001, 79.730003, 943100),
('PRIO3', '2021-02-12 15:00:00', 79.720001, 79.989998, 79.120003, 79.510002, 616900),
('PRIO3', '2021-02-17 13:00:00', 80.449997, 83.129997, 80.400002, 82.970001, 838200),
('PRIO3', '2021-02-17 14:00:00', 82.970001, 84.639999, 82.599998, 83.769997, 2227200),
('PRIO3', '2021-02-17 15:00:00', 83.769997, 87.000000, 83.400002, 86.709999, 1765400),
('PRIO3', '2021-02-17 16:00:00', 86.720001, 87.400002, 85.720001, 85.900002, 1274600),
('PRIO3', '2021-02-18 10:00:00', 87.620003, 92.040001, 87.610001, 90.660004, 1301900),
('PRIO3', '2021-02-18 11:00:00', 90.570000, 91.000000, 88.720001, 89.809998, 1256800),
('PRIO3', '2021-02-18 12:00:00', 89.879997, 90.010002, 88.269997, 88.449997, 1033700),
('PRIO3', '2021-02-18 13:00:00', 88.410004, 89.690002, 88.290001, 89.599998, 668800),
('PRIO3', '2021-02-18 14:00:00', 89.529999, 90.750000, 89.400002, 90.410004, 824600),
('PRIO3', '2021-02-18 15:00:00', 90.400002, 90.690002, 89.099998, 89.449997, 786600),
('PRIO3', '2021-02-19 10:00:00', 88.010002, 89.250000, 86.300003, 87.650002, 399200),
('PRIO3', '2021-02-19 11:00:00', 87.730003, 89.080002, 86.699997, 88.940002, 597600),
('PRIO3', '2021-02-19 12:00:00', 88.970001, 88.970001, 87.019997, 87.349998, 581700),
('PRIO3', '2021-02-19 13:00:00', 87.349998, 88.150002, 87.250000, 87.790001, 233100),
('PRIO3', '2021-02-19 14:00:00', 87.769997, 87.949997, 87.040001, 87.309998, 317300),
('PRIO3', '2021-02-19 15:00:00', 87.330002, 87.699997, 87.209999, 87.559998, 237200),
('PRIO3', '2021-02-22 10:00:00', 87.500000, 87.989998, 84.500000, 85.099998, 719500),
('PRIO3', '2021-02-22 11:00:00', 85.489998, 87.500000, 84.690002, 87.400002, 1956100),
('PRIO3', '2021-02-22 12:00:00', 85.519997, 90.230003, 85.320000, 90.230003, 1679200),
('PRIO3', '2021-02-22 13:00:00', 87.720001, 92.199997, 87.650002, 92.199997, 2113000),
('PRIO3', '2021-02-22 14:00:00', 90.800003, 92.199997, 90.559998, 90.769997, 1877700),
('PRIO3', '2021-02-22 15:00:00', 91.500000, 92.169998, 90.279999, 91.080002, 1513200),
('PRIO3', '2021-02-22 16:00:00', 90.839996, 92.250000, 90.650002, 91.650002, 1818600),
('PRIO3', '2021-02-23 10:00:00', 93.050003, 94.000000, 88.370003, 89.070000, 583800),
('PRIO3', '2021-02-23 11:00:00', 90.879997, 90.900002, 84.879997, 85.339996, 3525100),
('PRIO3', '2021-02-23 12:00:00', 87.620003, 88.889999, 84.879997, 88.400002, 3479500),
('PRIO3', '2021-02-23 13:00:00', 87.470001, 88.889999, 86.440002, 87.309998, 2322300),
('PRIO3', '2021-02-23 14:00:00', 87.779999, 87.839996, 85.419998, 85.629997, 1175900),
('PRIO3', '2021-02-23 15:00:00', 86.940002, 87.580002, 85.400002, 87.290001, 1884900),
('PRIO3', '2021-02-23 16:00:00', 86.389999, 88.489998, 86.099998, 88.459999, 1972300),
('PRIO3', '2021-02-24 10:00:00', 89.959999, 91.989998, 88.160004, 88.879997, 667800),
('PRIO3', '2021-02-24 11:00:00', 90.550003, 91.989998, 87.379997, 89.400002, 3436500),
('PRIO3', '2021-02-24 12:00:00', 88.269997, 90.650002, 88.010002, 89.900002, 1871900),
('PRIO3', '2021-02-24 13:00:00', 89.879997, 90.500000, 88.220001, 88.660004, 1285800),
('PRIO3', '2021-02-24 14:00:00', 89.099998, 89.459999, 88.220001, 88.500000, 862500),
('PRIO3', '2021-02-24 15:00:00', 88.980003, 89.019997, 88.239998, 88.550003, 632600),
('PRIO3', '2021-02-24 16:00:00', 88.900002, 88.930000, 87.800003, 88.059998, 850200),
('PRIO3', '2021-02-25 10:00:00', 90.000000, 90.900002, 88.309998, 89.709999, 570200),
('PRIO3', '2021-02-25 11:00:00', 89.220001, 90.320000, 87.800003, 87.800003, 1477900),
('PRIO3', '2021-02-25 12:00:00', 89.099998, 89.500000, 85.940002, 86.519997, 1782600),
('PRIO3', '2021-02-25 13:00:00', 87.709999, 87.769997, 85.300003, 85.519997, 1312200),
('PRIO3', '2021-02-25 14:00:00', 86.349998, 86.410004, 85.150002, 85.330002, 1107200),
('PRIO3', '2021-02-25 15:00:00', 85.500000, 85.699997, 83.559998, 84.029999, 1939400),
('PRIO3', '2021-02-25 16:00:00', 84.959999, 86.320000, 83.559998, 84.949997, 2034800),
('PRIO3', '2021-02-26 10:00:00', 85.000000, 86.250000, 83.510002, 85.599998, 604200),
('PRIO3', '2021-02-26 11:00:00', 83.599998, 86.120003, 83.279999, 83.300003, 1662900),
('PRIO3', '2021-02-26 12:00:00', 84.199997, 84.389999, 82.070000, 82.400002, 1407600),
('PRIO3', '2021-02-26 13:00:00', 82.739998, 83.500000, 82.110001, 82.959999, 948300),
('PRIO3', '2021-02-26 14:00:00', 82.680000, 84.290001, 82.589996, 83.760002, 761300),
('PRIO3', '2021-02-26 15:00:00', 83.559998, 84.430000, 83.209999, 83.309998, 912600),
('PRIO3', '2021-02-26 16:00:00', 84.139999, 84.430000, 82.730003, 82.839996, 1169700),
('PRIO3', '2021-03-01 10:00:00', 85.610001, 89.300003, 85.379997, 87.839996, 437000),
('PRIO3', '2021-03-01 11:00:00', 86.089996, 89.510002, 85.400002, 86.599998, 3523000),
('PRIO3', '2021-03-01 12:00:00', 88.419998, 89.510002, 85.809998, 86.089996, 2562500),
('PRIO3', '2021-03-01 13:00:00', 86.029999, 87.139999, 85.919998, 86.339996, 941600),
('PRIO3', '2021-03-01 14:00:00', 86.739998, 87.059998, 86.150002, 86.180000, 916000),
('PRIO3', '2021-03-01 15:00:00', 86.559998, 86.980003, 85.019997, 86.199997, 1452900),
('PRIO3', '2021-03-01 16:00:00', 85.139999, 87.500000, 85.139999, 86.879997, 1248600),
('PRIO3', '2021-03-02 10:00:00', 85.970001, 88.889999, 84.160004, 87.180000, 735600),
('PRIO3', '2021-03-02 11:00:00', 86.230003, 88.889999, 85.750000, 86.779999, 2309100),
('PRIO3', '2021-03-02 12:00:00', 86.419998, 87.199997, 85.099998, 85.610001, 1652600),
('PRIO3', '2021-03-02 13:00:00', 85.129997, 86.620003, 83.589996, 84.449997, 1891300),
('PRIO3', '2021-03-02 14:00:00', 84.290001, 85.800003, 83.589996, 84.970001, 1799100),
('PRIO3', '2021-03-02 15:00:00', 85.349998, 85.800003, 84.050003, 85.529999, 1133800),
('PRIO3', '2021-03-02 16:00:00', 84.379997, 85.750000, 84.050003, 85.029999, 1617100),
('PRIO3', '2021-03-03 10:00:00', 86.010002, 87.320000, 85.389999, 86.089996, 500900),
('PRIO3', '2021-03-03 11:00:00', 86.529999, 87.320000, 83.639999, 83.669998, 2235100),
('PRIO3', '2021-03-03 12:00:00', 84.790001, 85.309998, 83.160004, 83.440002, 1202400),
('PRIO3', '2021-03-03 13:00:00', 83.849998, 85.500000, 83.160004, 84.440002, 1606400),
('PRIO3', '2021-03-03 14:00:00', 85.070000, 88.059998, 84.099998, 87.320000, 2692300),
('PRIO3', '2021-03-03 15:00:00', 86.680000, 88.059998, 85.519997, 85.639999, 1902300),
('PRIO3', '2021-03-03 16:00:00', 86.739998, 89.000000, 84.260002, 88.269997, 2746200),
('PRIO3', '2021-03-04 10:00:00', 89.599998, 89.599998, 87.199997, 88.750000, 700000),
('PRIO3', '2021-03-04 11:00:00', 88.889999, 91.129997, 87.809998, 89.620003, 2943200),
('PRIO3', '2021-03-04 12:00:00', 90.180000, 92.000000, 89.349998, 91.940002, 4231800),
('PRIO3', '2021-03-04 13:00:00', 91.930000, 92.000000, 91.000000, 91.209999, 3042700),
('PRIO3', '2021-03-04 14:00:00', 91.750000, 92.000000, 90.000000, 90.080002, 1817100),
('PRIO3', '2021-03-04 15:00:00', 90.589996, 90.910004, 88.870003, 88.989998, 1543000),
('PRIO3', '2021-03-04 16:00:00', 89.599998, 90.370003, 88.699997, 88.940002, 1294700),
('PRIO3', '2021-03-05 10:00:00', 94.510002, 97.500000, 93.010002, 97.220001, 1557300),
('PRIO3', '2021-03-05 11:00:00', 96.580002, 98.660004, 95.510002, 97.550003, 3744700),
('PRIO3', '2021-03-05 12:00:00', 97.540001, 98.290001, 96.900002, 97.589996, 1889200),
('PRIO3', '2021-03-05 13:00:00', 97.150002, 97.940002, 96.089996, 96.580002, 1685700),
('PRIO3', '2021-03-05 14:00:00', 96.870003, 98.480003, 96.089996, 97.980003, 2087600),
('PRIO3', '2021-03-05 15:00:00', 96.919998, 98.900002, 96.849998, 98.430000, 2123100),
('PRIO3', '2021-03-05 16:00:00', 97.900002, 99.599998, 97.559998, 99.419998, 1485100),
('PRIO3', '2021-03-08 10:00:00', 98.519997, 101.389999, 97.000000, 99.190002, 1418200),
('PRIO3', '2021-03-08 11:00:00', 98.879997, 99.660004, 98.050003, 98.800003, 2193900),
('PRIO3', '2021-03-08 12:00:00', 98.779999, 99.199997, 97.559998, 99.099998, 1778200),
('PRIO3', '2021-03-08 13:00:00', 97.669998, 99.199997, 97.669998, 98.419998, 949200),
('PRIO3', '2021-03-08 14:00:00', 98.889999, 99.180000, 97.900002, 98.669998, 1194900),
('PRIO3', '2021-03-08 15:00:00', 99.110001, 99.180000, 95.000000, 95.610001, 1454500),
('PRIO3', '2021-03-08 16:00:00', 98.690002, 98.699997, 94.989998, 96.209999, 2794200),
('PRIO3', '2021-03-09 10:00:00', 97.000000, 97.779999, 94.199997, 96.160004, 721000),
('PRIO3', '2021-03-09 11:00:00', 95.360001, 96.809998, 94.309998, 95.550003, 1671300),
('PRIO3', '2021-03-09 12:00:00', 95.940002, 99.070000, 94.580002, 98.699997, 2898000),
('PRIO3', '2021-03-09 13:00:00', 96.830002, 100.510002, 96.739998, 99.300003, 2299100),
('PRIO3', '2021-03-09 14:00:00', 99.970001, 100.510002, 98.320000, 99.180000, 2091700),
('PRIO3', '2021-03-09 15:00:00', 99.480003, 99.750000, 98.419998, 98.900002, 1135100),
('PRIO3', '2021-03-09 16:00:00', 98.900002, 99.709999, 97.629997, 97.820000, 1381700),
('PRIO3', '2021-03-10 10:00:00', 99.300003, 99.459999, 96.150002, 96.900002, 420400),
('PRIO3', '2021-03-10 11:00:00', 97.629997, 98.639999, 94.610001, 94.860001, 2847800),
('PRIO3', '2021-03-10 12:00:00', 95.750000, 96.410004, 94.610001, 95.139999, 1965600),
('PRIO3', '2021-03-10 13:00:00', 94.949997, 95.790001, 94.360001, 94.389999, 1120900),
('PRIO3', '2021-03-10 14:00:00', 94.959999, 95.290001, 92.050003, 92.550003, 2477800),
('PRIO3', '2021-03-10 15:00:00', 93.470001, 93.639999, 92.050003, 92.790001, 1830900),
('PRIO3', '2021-03-10 16:00:00', 93.349998, 94.500000, 92.190002, 94.059998, 1988600),
('PRIO3', '2021-03-11 10:00:00', 95.900002, 97.690002, 95.199997, 96.029999, 522300),
('PRIO3', '2021-03-11 11:00:00', 95.949997, 97.690002, 93.500000, 93.750000, 2581700),
('PRIO3', '2021-03-11 12:00:00', 94.220001, 95.290001, 91.339996, 91.550003, 2656800),
('PRIO3', '2021-03-11 13:00:00', 92.769997, 92.910004, 91.339996, 91.760002, 1977800),
('PRIO3', '2021-03-11 14:00:00', 91.980003, 92.529999, 91.550003, 92.070000, 1240700),
('PRIO3', '2021-03-11 15:00:00', 92.029999, 92.889999, 91.550003, 91.750000, 1310900),
('PRIO3', '2021-03-11 16:00:00', 91.699997, 92.300003, 91.650002, 92.059998, 1349200),
('PRIO3', '2021-03-12 10:00:00', 92.809998, 94.750000, 91.800003, 92.699997, 624700),
('PRIO3', '2021-03-12 11:00:00', 93.180000, 93.650002, 91.800003, 92.480003, 1788200),
('PRIO3', '2021-03-12 12:00:00', 92.290001, 93.150002, 91.550003, 92.730003, 1109500),
('PRIO3', '2021-03-12 13:00:00', 91.769997, 94.970001, 91.699997, 94.080002, 1741800),
('PRIO3', '2021-03-12 14:00:00', 94.080002, 94.970001, 93.339996, 94.099998, 1339600),
('PRIO3', '2021-03-12 15:00:00', 94.099998, 94.400002, 93.339996, 93.720001, 896300),
('PRIO3', '2021-03-12 16:00:00', 93.750000, 94.470001, 93.400002, 94.110001, 656200),
('PRIO3', '2021-03-15 10:00:00', 93.580002, 94.279999, 92.510002, 93.370003, 1302800),
('PRIO3', '2021-03-15 11:00:00', 93.480003, 93.940002, 92.510002, 93.169998, 1225300),
('PRIO3', '2021-03-15 12:00:00', 93.209999, 93.730003, 92.120003, 92.320000, 873600),
('PRIO3', '2021-03-15 13:00:00', 92.900002, 92.949997, 91.800003, 91.989998, 1247300),
('PRIO3', '2021-03-15 14:00:00', 91.849998, 92.239998, 91.550003, 91.919998, 656000),
('PRIO3', '2021-03-15 15:00:00', 91.830002, 92.529999, 91.419998, 91.500000, 830300),
('PRIO3', '2021-03-15 16:00:00', 91.760002, 92.080002, 90.300003, 90.800003, 1834800),
('PRIO3', '2021-03-16 10:00:00', 91.330002, 92.199997, 89.839996, 90.580002, 585900),
('PRIO3', '2021-03-16 11:00:00', 91.519997, 92.660004, 90.000000, 92.500000, 2059000),
('PRIO3', '2021-03-16 12:00:00', 91.300003, 92.660004, 90.599998, 91.949997, 1534100),
('PRIO3', '2021-03-16 13:00:00', 92.139999, 92.379997, 91.629997, 91.949997, 896900),
('PRIO3', '2021-03-16 14:00:00', 92.000000, 92.099998, 91.000000, 91.320000, 925600),
('PRIO3', '2021-03-16 15:00:00', 91.690002, 91.779999, 90.199997, 90.370003, 1082300),
('PRIO3', '2021-03-16 16:00:00', 91.000000, 91.589996, 90.199997, 91.000000, 1433700),
('PRIO3', '2021-03-17 10:00:00', 90.699997, 92.330002, 89.500000, 92.199997, 480000),
('PRIO3', '2021-03-17 11:00:00', 90.150002, 93.900002, 90.000000, 93.779999, 3026700),
('PRIO3', '2021-03-17 12:00:00', 93.250000, 95.300003, 92.339996, 94.250000, 3078900),
('PRIO3', '2021-03-17 13:00:00', 94.620003, 95.400002, 93.820000, 94.370003, 2106600),
('PRIO3', '2021-03-17 14:00:00', 95.180000, 95.370003, 94.040001, 94.589996, 1079600),
('PRIO3', '2021-03-17 15:00:00', 94.290001, 95.320000, 94.080002, 95.239998, 1142700),
('PRIO3', '2021-03-17 16:00:00', 94.589996, 96.559998, 94.250000, 96.300003, 2500200),
('PRIO3', '2021-03-18 10:00:00', 95.739998, 96.989998, 94.510002, 95.250000, 626600),
('PRIO3', '2021-03-18 11:00:00', 96.279999, 96.279999, 93.589996, 93.660004, 1808900),
('PRIO3', '2021-03-18 12:00:00', 94.910004, 95.059998, 93.309998, 94.059998, 1417000),
('PRIO3', '2021-03-18 13:00:00', 93.699997, 94.379997, 93.070000, 93.129997, 924000),
('PRIO3', '2021-03-18 14:00:00', 94.070000, 94.379997, 92.650002, 92.739998, 1303500),
('PRIO3', '2021-03-18 15:00:00', 93.019997, 93.389999, 88.930000, 89.599998, 2802300),
('PRIO3', '2021-03-18 16:00:00', 91.570000, 91.750000, 86.500000, 87.589996, 7374700),
('PRIO3', '2021-03-19 10:00:00', 89.889999, 90.900002, 88.290001, 89.610001, 1144700),
('PRIO3', '2021-03-19 11:00:00', 90.410004, 92.349998, 88.290001, 91.860001, 3540300),
('PRIO3', '2021-03-19 12:00:00', 90.650002, 94.169998, 90.559998, 94.110001, 3151500),
('PRIO3', '2021-03-19 13:00:00', 92.650002, 95.339996, 92.209999, 95.300003, 2497000),
('PRIO3', '2021-03-19 14:00:00', 94.099998, 95.550003, 93.809998, 94.290001, 2448300),
('PRIO3', '2021-03-19 15:00:00', 94.910004, 95.199997, 93.839996, 94.470001, 1774500),
('PRIO3', '2021-03-19 16:00:00', 94.809998, 94.870003, 93.559998, 93.919998, 2038700),
('PRIO3', '2021-03-22 10:00:00', 93.150002, 93.690002, 91.150002, 91.410004, 379700),
('PRIO3', '2021-03-22 11:00:00', 92.900002, 93.099998, 89.540001, 90.050003, 3006200),
('PRIO3', '2021-03-22 12:00:00', 90.089996, 90.699997, 89.900002, 90.309998, 1175200),
('PRIO3', '2021-03-22 13:00:00', 90.250000, 91.300003, 89.720001, 90.940002, 1371600),
('PRIO3', '2021-03-22 14:00:00', 90.209999, 91.300003, 90.029999, 91.050003, 755500),
('PRIO3', '2021-03-22 15:00:00', 91.019997, 91.800003, 90.699997, 90.849998, 1157900),
('PRIO3', '2021-03-22 16:00:00', 91.480003, 91.800003, 90.099998, 90.250000, 1596700),
('PRIO3', '2021-03-23 10:00:00', 88.760002, 90.000000, 87.800003, 88.400002, 2426300),
('PRIO3', '2021-03-23 11:00:00', 88.669998, 90.000000, 87.500000, 88.500000, 2759900),
('PRIO3', '2021-03-23 12:00:00', 88.379997, 89.500000, 87.500000, 89.129997, 1601600),
('PRIO3', '2021-03-23 13:00:00', 89.339996, 89.430000, 88.050003, 88.730003, 933600),
('PRIO3', '2021-03-23 14:00:00', 88.419998, 88.849998, 87.900002, 88.010002, 840000),
('PRIO3', '2021-03-23 15:00:00', 88.250000, 88.500000, 87.000000, 87.089996, 1947500),
('PRIO3', '2021-03-23 16:00:00', 87.739998, 88.150002, 86.559998, 87.120003, 2357900),
('PRIO3', '2021-03-24 10:00:00', 89.099998, 89.800003, 88.269997, 89.260002, 1076900),
('PRIO3', '2021-03-24 11:00:00', 89.129997, 91.290001, 88.879997, 90.059998, 3772600),
('PRIO3', '2021-03-24 12:00:00', 90.010002, 90.599998, 89.199997, 89.779999, 1434800),
('PRIO3', '2021-03-24 13:00:00', 90.110001, 91.889999, 89.699997, 91.860001, 1961800),
('PRIO3', '2021-03-24 14:00:00', 90.690002, 91.900002, 90.290001, 90.980003, 1830100),
('PRIO3', '2021-03-24 15:00:00', 91.120003, 91.379997, 88.900002, 89.050003, 1080600),
('PRIO3', '2021-03-24 16:00:00', 90.650002, 90.650002, 88.129997, 88.379997, 2391500),
('PRIO3', '2021-03-25 10:00:00', 87.930000, 87.940002, 85.510002, 86.000000, 2433200),
('PRIO3', '2021-03-25 11:00:00', 86.800003, 87.470001, 85.690002, 85.959999, 2284400),
('PRIO3', '2021-03-25 12:00:00', 87.070000, 87.360001, 85.300003, 86.849998, 1956800),
('PRIO3', '2021-03-25 13:00:00', 86.269997, 88.820000, 86.129997, 88.489998, 1676700),
('PRIO3', '2021-03-25 14:00:00', 87.430000, 90.400002, 87.279999, 89.480003, 2745200),
('PRIO3', '2021-03-25 15:00:00', 89.750000, 90.400002, 88.870003, 90.000000, 1668600),
('PRIO3', '2021-03-25 16:00:00', 89.680000, 90.150002, 89.089996, 89.879997, 1478300),
('PRIO3', '2021-03-26 10:00:00', 91.389999, 94.360001, 91.040001, 93.919998, 1060000),
('PRIO3', '2021-03-26 11:00:00', 92.059998, 94.699997, 92.059998, 93.269997, 4114900),
('PRIO3', '2021-03-26 12:00:00', 94.150002, 94.440002, 92.309998, 93.000000, 1889500),
('PRIO3', '2021-03-26 13:00:00', 92.949997, 93.800003, 92.010002, 92.500000, 1535500),
('PRIO3', '2021-03-26 14:00:00', 92.290001, 92.900002, 90.500000, 90.779999, 1605200),
('PRIO3', '2021-03-26 15:00:00', 91.989998, 92.190002, 89.620003, 92.000000, 2516800),
('PRIO3', '2021-03-26 16:00:00', 91.489998, 92.690002, 90.900002, 92.500000, 2525900),
('PRIO3', '2021-03-29 10:00:00', 92.400002, 93.199997, 91.360001, 92.599998, 557800),
('PRIO3', '2021-03-29 11:00:00', 92.190002, 93.839996, 92.000000, 93.389999, 1779200),
('PRIO3', '2021-03-29 12:00:00', 92.889999, 93.839996, 92.779999, 93.750000, 1094100),
('PRIO3', '2021-03-29 13:00:00', 93.349998, 94.250000, 93.250000, 94.000000, 1477500),
('PRIO3', '2021-03-29 14:00:00', 94.010002, 94.879997, 93.599998, 93.839996, 1834300),
('PRIO3', '2021-03-29 15:00:00', 94.360001, 94.790001, 93.510002, 94.209999, 1308100),
('PRIO3', '2021-03-29 16:00:00', 94.370003, 94.949997, 94.059998, 94.370003, 1629100),
('PRIO3', '2021-03-30 10:00:00', 94.580002, 94.580002, 91.160004, 91.459999, 721500),
('PRIO3', '2021-03-30 11:00:00', 92.459999, 92.459999, 91.160004, 91.809998, 2201800),
('PRIO3', '2021-03-30 12:00:00', 91.989998, 92.739998, 91.419998, 92.330002, 1408700),
('PRIO3', '2021-03-30 13:00:00', 92.419998, 93.089996, 91.760002, 93.080002, 1464700),
('PRIO3', '2021-03-30 14:00:00', 92.190002, 93.089996, 92.110001, 92.559998, 1306800),
('PRIO3', '2021-03-30 15:00:00', 92.699997, 92.889999, 92.050003, 92.480003, 888700),
('PRIO3', '2021-03-30 16:00:00', 92.389999, 92.550003, 91.930000, 92.199997, 1538800),
('PRIO3', '2021-03-31 10:00:00', 92.269997, 94.199997, 92.000000, 93.800003, 458600),
('PRIO3', '2021-03-31 11:00:00', 92.160004, 94.199997, 92.059998, 93.059998, 3174700),
('PRIO3', '2021-03-31 12:00:00', 92.839996, 93.489998, 92.010002, 92.169998, 1514500),
('PRIO3', '2021-03-31 13:00:00', 92.199997, 92.500000, 91.610001, 91.699997, 944200),
('PRIO3', '2021-03-31 14:00:00', 92.320000, 92.320000, 91.199997, 91.349998, 1442700),
('PRIO3', '2021-03-31 15:00:00', 91.389999, 92.199997, 90.790001, 91.680000, 1443700),
('PRIO3', '2021-03-31 16:00:00', 91.570000, 92.199997, 91.400002, 91.550003, 2455600),
('PRIO3', '2021-04-01 10:00:00', 92.830002, 93.540001, 92.139999, 92.250000, 594100),
('PRIO3', '2021-04-01 11:00:00', 92.489998, 92.750000, 91.500000, 92.400002, 1273900),
('PRIO3', '2021-04-01 12:00:00', 91.589996, 92.599998, 91.510002, 91.889999, 1046800),
('PRIO3', '2021-04-01 13:00:00', 91.910004, 92.199997, 91.220001, 91.230003, 919200),
('PRIO3', '2021-04-01 14:00:00', 91.820000, 91.820000, 91.000000, 91.669998, 1002900),
('PRIO3', '2021-04-01 15:00:00', 91.220001, 92.550003, 91.000000, 92.010002, 1481000),
('PRIO3', '2021-04-01 16:00:00', 92.389999, 92.550003, 90.959999, 91.269997, 1670200),
('PRIO3', '2021-04-05 10:00:00', 92.000000, 92.300003, 90.849998, 91.120003, 292900),
('PRIO3', '2021-04-05 11:00:00', 91.860001, 91.970001, 89.900002, 90.900002, 1548900),
('PRIO3', '2021-04-05 12:00:00', 90.110001, 91.050003, 89.900002, 90.220001, 746900),
('PRIO3', '2021-04-05 13:00:00', 90.239998, 90.580002, 88.800003, 89.389999, 1041000),
('PRIO3', '2021-04-05 14:00:00', 89.510002, 89.910004, 88.800003, 89.349998, 980300),
('PRIO3', '2021-04-05 15:00:00', 89.550003, 90.480003, 88.970001, 90.190002, 1010700),
('PRIO3', '2021-04-05 16:00:00', 89.800003, 90.690002, 89.699997, 90.650002, 1447300),
('PRIO3', '2021-04-06 10:00:00', 91.500000, 93.449997, 90.660004, 93.300003, 376400),
('PRIO3', '2021-04-06 11:00:00', 91.269997, 94.209999, 91.000000, 93.889999, 4162900),
('PRIO3', '2021-04-06 12:00:00', 93.690002, 94.099998, 93.080002, 94.000000, 1528100),
('PRIO3', '2021-04-06 13:00:00', 93.750000, 94.500000, 93.320000, 93.830002, 1725100),
('PRIO3', '2021-04-06 14:00:00', 93.839996, 94.000000, 93.180000, 93.199997, 787000),
('PRIO3', '2021-04-06 15:00:00', 93.470001, 93.879997, 93.000000, 93.220001, 720700),
('PRIO3', '2021-04-06 16:00:00', 93.430000, 93.599998, 92.669998, 93.309998, 1070000),
('PRIO3', '2021-04-07 10:00:00', 93.500000, 93.800003, 92.199997, 92.910004, 480900),
('PRIO3', '2021-04-07 11:00:00', 92.800003, 93.199997, 92.290001, 92.459999, 702500),
('PRIO3', '2021-04-07 12:00:00', 92.720001, 92.900002, 91.900002, 92.040001, 744700),
('PRIO3', '2021-04-07 13:00:00', 92.680000, 93.650002, 91.870003, 93.459999, 1118300),
('PRIO3', '2021-04-07 14:00:00', 92.139999, 93.989998, 92.129997, 93.760002, 1442700),
('PRIO3', '2021-04-07 15:00:00', 93.139999, 95.169998, 93.139999, 94.169998, 2563200),
('PRIO3', '2021-04-07 16:00:00', 94.750000, 95.169998, 94.110001, 94.599998, 2015900),
('PRIO3', '2021-04-08 10:00:00', 95.360001, 96.889999, 94.230003, 94.300003, 872700),
('PRIO3', '2021-04-08 11:00:00', 95.879997, 96.269997, 92.709999, 92.949997, 2386500),
('PRIO3', '2021-04-08 12:00:00', 93.199997, 93.790001, 92.250000, 93.449997, 1273400),
('PRIO3', '2021-04-08 13:00:00', 92.730003, 94.379997, 92.669998, 93.669998, 918300),
('PRIO3', '2021-04-08 14:00:00', 94.150002, 94.379997, 93.510002, 93.839996, 667600),
('PRIO3', '2021-04-08 15:00:00', 94.019997, 94.300003, 93.570000, 94.120003, 534100),
('PRIO3', '2021-04-08 16:00:00', 94.070000, 95.000000, 93.790001, 94.440002, 1756200),
('PRIO3', '2021-04-09 10:00:00', 93.589996, 94.180000, 92.599998, 93.440002, 404000),
('PRIO3', '2021-04-09 11:00:00', 93.220001, 95.300003, 93.070000, 94.919998, 1859000),
('PRIO3', '2021-04-09 12:00:00', 94.809998, 95.680000, 94.339996, 94.800003, 1590900),
('PRIO3', '2021-04-09 13:00:00', 94.959999, 95.680000, 94.309998, 95.000000, 1490300),
('PRIO3', '2021-04-09 14:00:00', 94.970001, 95.129997, 94.650002, 94.790001, 660800),
('PRIO3', '2021-04-09 15:00:00', 95.019997, 95.129997, 94.000000, 94.940002, 1250600),
('PRIO3', '2021-04-09 16:00:00', 94.959999, 95.129997, 94.400002, 94.720001, 1012800),
('PRIO3', '2021-04-12 10:00:00', 95.360001, 97.639999, 95.360001, 96.900002, 927600),
('PRIO3', '2021-04-12 11:00:00', 96.930000, 97.639999, 95.769997, 95.980003, 2560500),
('PRIO3', '2021-04-12 12:00:00', 96.500000, 96.830002, 94.870003, 95.860001, 2123700),
('PRIO3', '2021-04-12 13:00:00', 95.480003, 96.389999, 94.870003, 96.129997, 1957400),
('PRIO3', '2021-04-12 14:00:00', 95.279999, 96.629997, 95.279999, 96.599998, 1081800),
('PRIO3', '2021-04-12 15:00:00', 96.089996, 97.000000, 96.050003, 96.750000, 1282800),
('PRIO3', '2021-04-12 16:00:00', 96.919998, 97.000000, 96.099998, 96.589996, 1174300),
('PRIO3', '2021-04-13 10:00:00', 97.620003, 100.239998, 97.489998, 99.809998, 1317400),
('PRIO3', '2021-04-13 11:00:00', 98.940002, 100.449997, 98.650002, 100.099998, 3309000),
('PRIO3', '2021-04-13 12:00:00', 99.400002, 101.800003, 99.400002, 101.550003, 2363900),
('PRIO3', '2021-04-13 13:00:00', 100.900002, 101.800003, 100.400002, 100.650002, 1432400),
('PRIO3', '2021-04-13 14:00:00', 100.959999, 101.300003, 100.089996, 101.040001, 1102400),
('PRIO3', '2021-04-13 15:00:00', 100.379997, 101.300003, 99.650002, 99.959999, 1401400),
('PRIO3', '2021-04-13 16:00:00', 99.809998, 100.900002, 99.800003, 100.800003, 1537000),
('PRIO3', '2021-04-14 10:00:00', 102.400002, 103.190002, 101.709999, 102.339996, 632400),
('PRIO3', '2021-04-14 11:00:00', 102.190002, 103.050003, 101.339996, 102.949997, 2187300),
('PRIO3', '2021-04-14 12:00:00', 101.870003, 103.050003, 101.339996, 102.370003, 1452100),
('PRIO3', '2021-04-14 13:00:00', 102.349998, 102.449997, 101.699997, 102.129997, 698100),
('PRIO3', '2021-04-14 14:00:00', 101.989998, 102.650002, 101.900002, 102.580002, 1286900),
('PRIO3', '2021-04-14 15:00:00', 102.360001, 102.849998, 101.900002, 102.169998, 1551600),
('PRIO3', '2021-04-14 16:00:00', 102.680000, 102.690002, 101.750000, 102.000000, 1108900),
('PRIO3', '2021-04-15 10:00:00', 102.690002, 103.349998, 100.699997, 101.349998, 416500),
('PRIO3', '2021-04-15 11:00:00', 102.029999, 102.250000, 100.339996, 100.680000, 1161300),
('PRIO3', '2021-04-15 12:00:00', 101.080002, 101.190002, 99.410004, 99.949997, 1064900),
('PRIO3', '2021-04-15 13:00:00', 100.110001, 100.320000, 99.199997, 99.320000, 883800),
('PRIO3', '2021-04-15 14:00:00', 100.070000, 100.320000, 98.099998, 98.169998, 1379200),
('PRIO3', '2021-04-15 15:00:00', 98.779999, 99.110001, 97.209999, 97.980003, 2137700),
('PRIO3', '2021-04-15 16:00:00', 98.040001, 98.419998, 97.209999, 97.419998, 2989300),
('PRIO3', '2021-04-16 10:00:00', 98.400002, 98.599998, 95.800003, 96.019997, 719100),
('PRIO3', '2021-04-16 11:00:00', 96.930000, 97.620003, 95.300003, 96.129997, 1875700),
('PRIO3', '2021-04-16 12:00:00', 95.610001, 96.910004, 95.300003, 96.160004, 1026600),
('PRIO3', '2021-04-16 13:00:00', 96.709999, 96.750000, 95.699997, 95.980003, 604400),
('PRIO3', '2021-04-16 14:00:00', 96.190002, 96.449997, 95.699997, 96.269997, 611000),
('PRIO3', '2021-04-16 15:00:00', 95.949997, 98.250000, 95.949997, 98.029999, 1201500),
('PRIO3', '2021-04-16 16:00:00', 96.959999, 98.250000, 96.860001, 97.709999, 1706900),
('PRIO3', '2021-04-19 10:00:00', 98.150002, 98.400002, 96.900002, 97.400002, 293500),
('PRIO3', '2021-04-19 11:00:00', 96.970001, 98.400002, 96.400002, 96.699997, 2134500),
('PRIO3', '2021-04-19 12:00:00', 97.500000, 97.699997, 96.050003, 96.400002, 1246500),
('PRIO3', '2021-04-19 13:00:00', 96.599998, 97.230003, 96.000000, 97.220001, 1388300),
('PRIO3', '2021-04-19 14:00:00', 96.580002, 97.800003, 96.349998, 97.199997, 1709900),
('PRIO3', '2021-04-19 15:00:00', 96.949997, 97.800003, 96.900002, 97.449997, 1150700),
('PRIO3', '2021-04-19 16:00:00', 97.300003, 97.599998, 96.199997, 96.260002, 1430100),
('PRIO3', '2021-04-20 10:00:00', 96.559998, 97.099998, 93.849998, 94.120003, 621000),
('PRIO3', '2021-04-20 11:00:00', 95.449997, 95.449997, 92.800003, 92.949997, 2131900),
('PRIO3', '2021-04-20 12:00:00', 94.150002, 94.389999, 92.300003, 93.120003, 2012000),
('PRIO3', '2021-04-20 13:00:00', 92.750000, 93.889999, 92.300003, 93.570000, 1582700),
('PRIO3', '2021-04-20 14:00:00', 93.070000, 93.889999, 92.900002, 93.519997, 940900),
('PRIO3', '2021-04-20 15:00:00', 93.739998, 93.779999, 92.610001, 92.959999, 822100),
('PRIO3', '2021-04-20 16:00:00', 93.129997, 93.599998, 92.610001, 92.879997, 1531000),
('PRIO3', '2021-04-22 10:00:00', 93.849998, 93.949997, 92.349998, 92.349998, 379900),
('PRIO3', '2021-04-22 11:00:00', 93.379997, 93.510002, 91.750000, 92.010002, 1197800),
('PRIO3', '2021-04-22 12:00:00', 92.559998, 93.089996, 91.900002, 91.949997, 829400),
('PRIO3', '2021-04-22 13:00:00', 92.010002, 92.209999, 91.900002, 92.019997, 600900),
('PRIO3', '2021-04-22 14:00:00', 92.059998, 92.169998, 91.220001, 91.449997, 1449600),
('PRIO3', '2021-04-22 15:00:00', 92.139999, 92.139999, 91.110001, 91.379997, 912900),
('PRIO3', '2021-04-22 16:00:00', 91.529999, 91.660004, 91.010002, 91.139999, 1780200),
('PRIO3', '2021-04-23 10:00:00', 91.610001, 93.800003, 91.510002, 92.910004, 275300),
('PRIO3', '2021-04-23 11:00:00', 91.970001, 93.800003, 91.760002, 91.800003, 2051700),
('PRIO3', '2021-04-23 12:00:00', 92.669998, 93.400002, 91.559998, 91.809998, 1101500),
('PRIO3', '2021-04-23 13:00:00', 91.559998, 92.150002, 91.029999, 91.480003, 812600),
('PRIO3', '2021-04-23 14:00:00', 91.349998, 91.940002, 91.029999, 91.279999, 898800),
('PRIO3', '2021-04-23 15:00:00', 91.769997, 91.940002, 91.120003, 91.370003, 583100),
('PRIO3', '2021-04-23 16:00:00', 91.199997, 92.000000, 91.199997, 91.930000, 1254800),
('PRIO3', '2021-04-26 10:00:00', 91.550003, 91.709999, 89.800003, 91.000000, 578300),
('PRIO3', '2021-04-26 11:00:00', 90.550003, 91.150002, 90.000000, 90.269997, 1084400),
('PRIO3', '2021-04-26 12:00:00', 90.849998, 91.150002, 90.150002, 90.800003, 956800),
('PRIO3', '2021-04-26 13:00:00', 90.599998, 90.860001, 90.300003, 90.470001, 527100),
('PRIO3', '2021-04-26 14:00:00', 90.370003, 90.669998, 90.099998, 90.209999, 591100),
('PRIO3', '2021-04-26 15:00:00', 90.330002, 90.540001, 90.099998, 90.400002, 494100),
('PRIO3', '2021-04-26 16:00:00', 90.279999, 90.570000, 90.110001, 90.330002, 950300),
('PRIO3', '2021-04-27 10:00:00', 90.699997, 91.949997, 90.430000, 91.599998, 265700),
('PRIO3', '2021-04-27 11:00:00', 90.730003, 91.949997, 89.860001, 90.500000, 1940900),
('PRIO3', '2021-04-27 12:00:00', 90.120003, 90.699997, 89.860001, 90.379997, 706900),
('PRIO3', '2021-04-27 13:00:00', 90.129997, 90.820000, 90.070000, 90.480003, 468900),
('PRIO3', '2021-04-27 14:00:00', 90.430000, 90.820000, 90.150002, 90.370003, 612000),
('PRIO3', '2021-04-27 15:00:00', 90.360001, 90.500000, 90.010002, 90.470001, 588500),
('PRIO3', '2021-04-27 16:00:00', 90.239998, 90.620003, 90.010002, 90.050003, 1069500),
('PRIO3', '2021-04-28 10:00:00', 90.930000, 92.900002, 90.910004, 92.290001, 810800),
('PRIO3', '2021-04-28 11:00:00', 92.339996, 93.459999, 92.150002, 92.150002, 1742100),
('PRIO3', '2021-04-28 12:00:00', 92.889999, 93.459999, 91.699997, 92.610001, 1121500),
('PRIO3', '2021-04-28 13:00:00', 91.980003, 92.980003, 91.949997, 92.550003, 543900),
('PRIO3', '2021-04-28 14:00:00', 92.669998, 92.980003, 92.010002, 92.540001, 615800),
('PRIO3', '2021-04-28 15:00:00', 92.680000, 92.849998, 91.699997, 92.150002, 1012000),
('PRIO3', '2021-04-28 16:00:00', 92.199997, 92.389999, 91.779999, 91.949997, 1096800),
('PRIO3', '2021-04-29 10:00:00', 93.709999, 94.290001, 92.599998, 92.830002, 598200),
('PRIO3', '2021-04-29 11:00:00', 94.010002, 94.209999, 91.370003, 91.919998, 1449000),
('PRIO3', '2021-04-29 12:00:00', 92.230003, 92.570000, 91.370003, 91.739998, 818200),
('PRIO3', '2021-04-29 13:00:00', 92.410004, 93.199997, 91.599998, 93.110001, 746200),
('PRIO3', '2021-04-29 14:00:00', 92.129997, 93.690002, 92.120003, 92.629997, 915100),
('PRIO3', '2021-04-29 15:00:00', 92.599998, 93.059998, 92.339996, 92.599998, 496100),
('PRIO3', '2021-04-29 16:00:00', 92.930000, 93.059998, 91.699997, 92.050003, 1015500),
('PRIO3', '2021-04-30 10:00:00', 91.650002, 91.650002, 90.430000, 91.000000, 401200),
('PRIO3', '2021-04-30 11:00:00', 90.779999, 91.349998, 89.860001, 89.930000, 1300300),
('PRIO3', '2021-04-30 12:00:00', 90.370003, 90.699997, 89.860001, 90.379997, 1066800),
('PRIO3', '2021-04-30 13:00:00', 90.440002, 90.699997, 90.080002, 90.239998, 467200),
('PRIO3', '2021-04-30 14:00:00', 90.230003, 90.410004, 89.959999, 90.230003, 521500),
('PRIO3', '2021-04-30 15:00:00', 90.190002, 91.279999, 89.959999, 91.180000, 1193300),
('PRIO3', '2021-04-30 16:00:00', 91.059998, 91.400002, 90.699997, 91.199997, 1074500),
('PRIO3', '2021-05-03 10:00:00', 92.910004, 93.050003, 91.510002, 91.849998, 303300),
('PRIO3', '2021-05-03 11:00:00', 91.860001, 92.680000, 91.550003, 92.209999, 1035200),
('PRIO3', '2021-05-03 12:00:00', 92.250000, 92.680000, 91.900002, 92.230003, 801600),
('PRIO3', '2021-05-03 13:00:00', 92.099998, 92.279999, 91.900002, 91.989998, 542300),
('PRIO3', '2021-05-03 14:00:00', 92.150002, 92.250000, 91.070000, 91.349998, 725500),
('PRIO3', '2021-05-03 15:00:00', 91.779999, 91.860001, 90.750000, 91.680000, 900200),
('PRIO3', '2021-05-03 16:00:00', 90.779999, 91.860001, 90.779999, 91.620003, 1233400)
ON CONFLICT ON CONSTRAINT hourly_data_pkey DO NOTHING;", error: stack depth limit exceeded
HINT:  Increase the configuration parameter "max_stack_depth" (currently 2048kB), after ensuring the platform's stack depth limit is adequate.
CONTEXT:  SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement
SQL statement "UPDATE hourly_candles hc
    SET
      open_price = open_price / n.norm_ratio,
      max_price = max_price / n.norm_ratio,
      min_price = min_price / n.norm_ratio,
      close_price = close_price / n.norm_ratio
    FROM
      (SELECT q.ticker, q.date_hour, 
        CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
        WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
        ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
      FROM daily_candles dc
      INNER JOIN
        (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
        FROM hourly_candles
        GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
      ON q.ticker = dc.ticker 
        AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
        AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
        AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
      ) n
    WHERE
      n.ticker = hc.ticker
      AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
      AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
      AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
      AND n.norm_ratio <> 1"
PL/pgSQL function normalize_hourly_candles() line 4 at SQL statement

2021-05-24 10:08:15,262:INFO:__main__:Program started.
2021-05-24 10:08:15,264:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 10:08:15,265:DEBUG:utils:File found.
2021-05-24 10:08:15,265:DEBUG:utils:The function 'read_cfg' took 1.38 milliseconds to run.
2021-05-24 10:08:15,275:DEBUG:utils:The function 'get_ticker_config_data' took 9.78 milliseconds to run.
2021-05-24 10:08:15,275:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 10:08:15,302:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 10:08:16,526:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 10:08:17,730:ERROR:db_model:Error executing query "UPDATE hourly_candles hc
SET
  open_price = open_price / n.norm_ratio,
  open_price = max_price / n.norm_ratio,
  open_price = min_price / n.norm_ratio,
  open_price = close_price / n.norm_ratio
FROM
  (SELECT q.ticker, q.date_hour,
    CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
    WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
    ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
  FROM daily_candles dc
  INNER JOIN
    (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
    FROM hourly_candles
    GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
  ON q.ticker = dc.ticker
    AND EXTRACT(YEAR FROM dc.day) = EXTRACT(YEAR FROM q.date_hour)
    AND EXTRACT(MONTH FROM dc.day) = EXTRACT(MONTH FROM q.date_hour)
    AND EXTRACT(DAY FROM dc.day) = EXTRACT(DAY FROM q.date_hour)
  ) n
WHERE
  n.ticker = hc.ticker
  AND EXTRACT(YEAR FROM n.date_hour) = EXTRACT(YEAR FROM hc.date_hour)
  AND EXTRACT(MONTH FROM n.date_hour) = EXTRACT(MONTH FROM hc.date_hour)
  AND EXTRACT(DAY FROM n.date_hour) = EXTRACT(DAY FROM hc.date_hour)
  AND n.norm_ratio <> 1;
", error: multiple assignments to same column "open_price"

2021-05-24 10:11:44,500:INFO:__main__:Program started.
2021-05-24 10:11:44,501:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 10:11:44,502:DEBUG:utils:File found.
2021-05-24 10:11:44,503:DEBUG:utils:The function 'read_cfg' took 1.72 milliseconds to run.
2021-05-24 10:11:44,515:DEBUG:utils:The function 'get_ticker_config_data' took 12.21 milliseconds to run.
2021-05-24 10:11:44,516:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 10:11:44,551:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 10:11:45,291:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 10:11:46,158:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 11:18:03,705:INFO:__main__:Program started.
2021-05-24 11:18:03,707:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 11:18:03,708:DEBUG:utils:File found.
2021-05-24 11:18:03,708:DEBUG:utils:The function 'read_cfg' took 1.20 milliseconds to run.
2021-05-24 11:18:03,722:DEBUG:utils:The function 'get_ticker_config_data' took 13.84 milliseconds to run.
2021-05-24 11:18:03,723:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 04/05/2021
2021-05-24 11:18:03,734:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 11:18:04,390:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 11:18:05,024:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 11:19:44,869:INFO:__main__:Program started.
2021-05-24 11:19:44,874:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 11:19:44,875:DEBUG:utils:File found.
2021-05-24 11:19:44,875:DEBUG:utils:The function 'read_cfg' took 1.57 milliseconds to run.
2021-05-24 11:19:44,894:DEBUG:utils:The function 'get_ticker_config_data' took 18.35 milliseconds to run.
2021-05-24 11:19:44,894:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 04/05/2021
2021-05-24 11:19:44,930:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 11:19:45,618:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 11:19:46,175:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 11:20:34,952:INFO:__main__:Program started.
2021-05-24 11:20:34,954:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 11:20:34,956:DEBUG:utils:File found.
2021-05-24 11:20:34,957:DEBUG:utils:The function 'read_cfg' took 3.48 milliseconds to run.
2021-05-24 11:20:34,970:DEBUG:utils:The function 'get_ticker_config_data' took 12.15 milliseconds to run.
2021-05-24 11:20:34,970:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 04/05/2021
2021-05-24 11:20:34,988:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 11:20:34,990:INFO:db_manager:Ticker 'PRIO3' already updated.
2021-05-24 11:20:34,991:INFO:db_manager:Ticker 'PRIO3' already updated.
2021-05-24 11:20:54,200:INFO:__main__:Program started.
2021-05-24 11:20:54,201:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 11:20:54,203:DEBUG:utils:File found.
2021-05-24 11:20:54,203:DEBUG:utils:The function 'read_cfg' took 2.04 milliseconds to run.
2021-05-24 11:20:54,214:DEBUG:utils:The function 'get_ticker_config_data' took 10.89 milliseconds to run.
2021-05-24 11:20:54,214:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 04/05/2021
2021-05-24 11:20:54,229:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 11:20:55,498:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 11:20:56,257:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 11:22:46,977:INFO:__main__:Program started.
2021-05-24 11:22:46,978:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 11:22:46,979:DEBUG:utils:File found.
2021-05-24 11:22:46,979:DEBUG:utils:The function 'read_cfg' took 1.10 milliseconds to run.
2021-05-24 11:22:46,990:DEBUG:utils:The function 'get_ticker_config_data' took 10.66 milliseconds to run.
2021-05-24 11:22:46,991:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 04/05/2021
2021-05-24 11:22:47,007:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 11:22:47,855:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 11:22:49,109:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 11:38:05,603:INFO:__main__:Program started.
2021-05-24 11:38:05,605:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 11:38:05,607:DEBUG:utils:File found.
2021-05-24 11:38:05,607:DEBUG:utils:The function 'read_cfg' took 2.54 milliseconds to run.
2021-05-24 11:38:05,620:DEBUG:utils:The function 'get_ticker_config_data' took 11.96 milliseconds to run.
2021-05-24 11:38:05,620:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 04/05/2021
2021-05-24 11:38:05,633:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 11:38:06,473:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 11:38:07,131:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 11:51:38,072:INFO:__main__:Program started.
2021-05-24 11:51:38,075:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 11:51:38,075:DEBUG:utils:File found.
2021-05-24 11:51:38,076:DEBUG:utils:The function 'read_cfg' took 1.01 milliseconds to run.
2021-05-24 11:51:38,085:DEBUG:utils:The function 'get_ticker_config_data' took 8.77 milliseconds to run.
2021-05-24 11:51:38,085:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/04/2021		Final date: 04/05/2021
2021-05-24 11:51:38,100:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 11:51:40,105:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 11:51:41,123:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 11:52:32,907:INFO:__main__:Program started.
2021-05-24 11:52:32,909:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 11:52:32,909:DEBUG:utils:File found.
2021-05-24 11:52:32,909:DEBUG:utils:The function 'read_cfg' took 0.95 milliseconds to run.
2021-05-24 11:52:32,920:DEBUG:utils:The function 'get_ticker_config_data' took 10.13 milliseconds to run.
2021-05-24 11:52:32,920:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 11:52:32,931:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 11:52:33,714:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 11:52:34,670:ERROR:db_model:Error executing query "INSERT INTO hourly_candles (ticker, date_hour, open_price, max_price, min_price, close_price, volume)
VALUES
('PRIO3', '2021-01-04 10:00:00', 71.000000, 73.680000, 70.700000, 71.990000, 667100),
('PRIO3', '2021-01-04 11:00:00', 71.970000, 75.770000, 71.780000, 75.570000, 1592900),
('PRIO3', '2021-01-04 12:00:00', 75.500000, 76.000000, 74.850000, 75.260000, 681200),
('PRIO3', '2021-01-04 13:00:00', 75.250000, 75.540000, 73.820000, 74.040000, 586300),
('PRIO3', '2021-01-04 14:00:00', 74.020000, 74.500000, 73.600000, 74.260000, 365200),
('PRIO3', '2021-01-04 15:00:00', 74.220000, 75.850000, 74.150000, 75.500000, 615800),
('PRIO3', '2021-01-04 16:00:00', 75.500000, 76.400000, 75.290000, 75.900000, 537800),
('PRIO3', '2021-01-05 10:00:00', 77.400000, 77.900000, 72.790000, 72.830000, 786500),
('PRIO3', '2021-01-05 11:00:00', 73.200000, 73.890000, 71.550000, 72.560000, 1967400),
('PRIO3', '2021-01-05 12:00:00', 72.600000, 76.610000, 72.600000, 75.250000, 2375700),
('PRIO3', '2021-01-05 13:00:00', 75.210000, 75.780000, 74.450000, 75.450000, 546700),
('PRIO3', '2021-01-05 14:00:00', 75.450000, 75.600000, 74.800000, 75.010000, 373600),
('PRIO3', '2021-01-05 15:00:00', 75.030000, 75.800000, 74.600000, 75.730000, 914900),
('PRIO3', '2021-01-05 16:00:00', 75.760000, 76.270000, 75.000000, 75.250000, 1143900),
('PRIO3', '2021-01-06 10:00:00', 75.300000, 75.570000, 74.110000, 74.390000, 524300),
('PRIO3', '2021-01-06 11:00:00', 74.350000, 75.200000, 74.210000, 74.870000, 510000),
('PRIO3', '2021-01-06 12:00:00', 74.860000, 75.390000, 74.250000, 74.720000, 637600),
('PRIO3', '2021-01-06 13:00:00', 74.690000, 75.120000, 74.550000, 74.850000, 294500),
('PRIO3', '2021-01-06 14:00:00', 74.860000, 75.940000, 74.710000, 75.820000, 606700),
('PRIO3', '2021-01-06 15:00:00', 75.850000, 76.000000, 74.910000, 74.920000, 505500),
('PRIO3', '2021-01-06 16:00:00', 74.970000, 75.180000, 74.560000, 74.710000, 436600),
('PRIO3', '2021-01-07 10:00:00', 73.620000, 74.900000, 73.620000, 74.310000, 342000),
('PRIO3', '2021-01-07 11:00:00', 74.350000, 74.990000, 73.900000, 74.140000, 557400),
('PRIO3', '2021-01-07 12:00:00', 74.160000, 75.400000, 74.050000, 75.280000, 685900),
('PRIO3', '2021-01-07 13:00:00', 75.280000, 75.790000, 74.840000, 75.470000, 562700),
('PRIO3', '2021-01-07 14:00:00', 75.480000, 75.580000, 74.090000, 74.260000, 512800),
('PRIO3', '2021-01-07 15:00:00', 74.200000, 75.150000, 74.200000, 74.840000, 345000),
('PRIO3', '2021-01-07 16:00:00', 74.850000, 74.960000, 73.910000, 74.160000, 362300),
('PRIO3', '2021-01-08 10:00:00', 75.420000, 76.380000, 75.110000, 75.440000, 620500),
('PRIO3', '2021-01-08 11:00:00', 75.420000, 75.960000, 74.420000, 74.510000, 757300),
('PRIO3', '2021-01-08 12:00:00', 74.500000, 75.000000, 73.500000, 73.760000, 780600),
('PRIO3', '2021-01-08 13:00:00', 73.780000, 74.580000, 73.620000, 74.200000, 248300),
('PRIO3', '2021-01-08 14:00:00', 74.220000, 74.910000, 74.000000, 74.140000, 307300),
('PRIO3', '2021-01-08 15:00:00', 74.160000, 74.540000, 74.000000, 74.460000, 253300),
('PRIO3', '2021-01-08 16:00:00', 74.400000, 74.730000, 74.020000, 74.470000, 344700),
('PRIO3', '2021-01-11 10:00:00', 73.660000, 75.880000, 73.000000, 75.080000, 651900),
('PRIO3', '2021-01-11 11:00:00', 75.060000, 75.140000, 73.800000, 73.990000, 730800),
('PRIO3', '2021-01-11 12:00:00', 73.750000, 77.300000, 73.700000, 76.640000, 1592900),
('PRIO3', '2021-01-11 13:00:00', 76.740000, 78.970000, 76.720000, 78.900000, 1119600),
('PRIO3', '2021-01-11 14:00:00', 78.900000, 80.800000, 78.490000, 80.640000, 1125100),
('PRIO3', '2021-01-11 15:00:00', 80.660000, 83.950000, 80.000000, 83.230000, 1576600),
('PRIO3', '2021-01-11 16:00:00', 83.170000, 84.600000, 82.240000, 83.500000, 1426000),
('PRIO3', '2021-01-12 10:00:00', 80.900000, 82.740000, 78.240000, 79.890000, 1076700),
('PRIO3', '2021-01-12 11:00:00', 79.850000, 81.210000, 78.670000, 78.950000, 1793000),
('PRIO3', '2021-01-12 12:00:00', 78.940000, 79.410000, 77.860000, 78.540000, 1069000),
('PRIO3', '2021-01-12 13:00:00', 78.530000, 78.780000, 77.500000, 78.090000, 678700),
('PRIO3', '2021-01-12 14:00:00', 78.030000, 78.200000, 75.890000, 77.070000, 712100),
('PRIO3', '2021-01-12 15:00:00', 77.070000, 77.100000, 76.130000, 76.300000, 525200),
('PRIO3', '2021-01-12 16:00:00', 76.310000, 76.680000, 76.030000, 76.030000, 437900),
('PRIO3', '2021-01-13 10:00:00', 76.800000, 77.490000, 75.600000, 76.200000, 368300),
('PRIO3', '2021-01-13 11:00:00', 76.200000, 76.600000, 74.210000, 74.800000, 868200),
('PRIO3', '2021-01-13 12:00:00', 74.750000, 77.800000, 74.500000, 77.560000, 1341000),
('PRIO3', '2021-01-13 13:00:00', 77.510000, 78.000000, 76.500000, 77.330000, 947200),
('PRIO3', '2021-01-13 14:00:00', 77.360000, 79.150000, 77.360000, 78.960000, 1448000),
('PRIO3', '2021-01-13 15:00:00', 78.960000, 79.990000, 78.600000, 79.830000, 1199100),
('PRIO3', '2021-01-13 16:00:00', 79.870000, 80.150000, 79.000000, 79.610000, 853600),
('PRIO3', '2021-01-14 10:00:00', 79.810000, 80.900000, 78.200000, 78.810000, 510600),
('PRIO3', '2021-01-14 11:00:00', 78.850000, 78.880000, 77.500000, 77.910000, 943400),
('PRIO3', '2021-01-14 12:00:00', 77.740000, 78.380000, 77.500000, 77.660000, 746300),
('PRIO3', '2021-01-14 13:00:00', 77.660000, 78.140000, 77.610000, 78.120000, 257000),
('PRIO3', '2021-01-14 14:00:00', 78.120000, 78.180000, 77.720000, 77.980000, 312200),
('PRIO3', '2021-01-14 15:00:00', 77.980000, 78.090000, 77.630000, 77.860000, 354700),
('PRIO3', '2021-01-14 16:00:00', 77.830000, 77.890000, 77.500000, 77.590000, 456800),
('PRIO3', '2021-01-15 10:00:00', 76.500000, 78.000000, 76.000000, 77.690000, 292000),
('PRIO3', '2021-01-15 11:00:00', 77.650000, 77.650000, 76.300000, 76.300000, 680900),
('PRIO3', '2021-01-15 12:00:00', 76.300000, 76.630000, 74.880000, 75.130000, 637900),
('PRIO3', '2021-01-15 13:00:00', 75.120000, 76.180000, 75.060000, 76.080000, 349700),
('PRIO3', '2021-01-15 14:00:00', 76.080000, 76.160000, 74.900000, 75.180000, 327000),
('PRIO3', '2021-01-15 15:00:00', 75.150000, 75.780000, 75.000000, 75.320000, 291000),
('PRIO3', '2021-01-15 16:00:00', 75.320000, 75.450000, 75.000000, 75.060000, 268100),
('PRIO3', '2021-01-18 10:00:00', 75.020000, 76.150000, 74.680000, 76.070000, 344000),
('PRIO3', '2021-01-18 11:00:00', 76.050000, 76.090000, 75.000000, 75.010000, 367500),
('PRIO3', '2021-01-18 12:00:00', 75.010000, 75.390000, 74.750000, 75.210000, 513600),
('PRIO3', '2021-01-18 13:00:00', 75.180000, 75.180000, 74.100000, 74.220000, 488200),
('PRIO3', '2021-01-18 14:00:00', 74.220000, 74.540000, 73.810000, 74.230000, 348000),
('PRIO3', '2021-01-18 15:00:00', 74.220000, 74.220000, 73.820000, 73.900000, 278600),
('PRIO3', '2021-01-18 16:00:00', 73.900000, 73.900000, 72.210000, 72.650000, 754100),
('PRIO3', '2021-01-19 10:00:00', 74.150000, 74.710000, 71.550000, 72.210000, 781900),
('PRIO3', '2021-01-19 11:00:00', 72.210000, 72.360000, 70.520000, 70.520000, 917000),
('PRIO3', '2021-01-19 12:00:00', 70.530000, 71.780000, 69.500000, 71.640000, 933900),
('PRIO3', '2021-01-19 13:00:00', 71.640000, 72.080000, 70.410000, 70.750000, 493200),
('PRIO3', '2021-01-19 14:00:00', 70.740000, 71.450000, 70.350000, 70.560000, 545900),
('PRIO3', '2021-01-19 15:00:00', 70.550000, 73.630000, 70.550000, 73.550000, 788900),
('PRIO3', '2021-01-19 16:00:00', 73.550000, 73.800000, 72.560000, 72.740000, 640500),
('PRIO3', '2021-01-20 10:00:00', 74.890000, 75.250000, 73.220000, 73.520000, 396200),
('PRIO3', '2021-01-20 11:00:00', 73.560000, 73.970000, 72.300000, 73.740000, 715800),
('PRIO3', '2021-01-20 12:00:00', 73.710000, 73.750000, 72.010000, 72.680000, 408700),
('PRIO3', '2021-01-20 13:00:00', 72.680000, 72.690000, 71.200000, 71.720000, 448200),
('PRIO3', '2021-01-20 14:00:00', 71.720000, 72.280000, 71.350000, 71.690000, 241300),
('PRIO3', '2021-01-20 15:00:00', 71.700000, 72.070000, 71.500000, 71.930000, 179900),
('PRIO3', '2021-01-20 16:00:00', 71.970000, 71.970000, 71.300000, 71.440000, 168200),
('PRIO3', '2021-01-21 10:00:00', 70.810000, 73.250000, 70.810000, 72.200000, 728100),
('PRIO3', '2021-01-21 11:00:00', 72.250000, 74.910000, 71.840000, 74.820000, 1447600),
('PRIO3', '2021-01-21 12:00:00', 74.880000, 74.890000, 72.610000, 74.250000, 1364500),
('PRIO3', '2021-01-21 13:00:00', 74.190000, 74.580000, 73.760000, 73.920000, 526700),
('PRIO3', '2021-01-21 14:00:00', 73.940000, 74.390000, 73.510000, 74.300000, 419800),
('PRIO3', '2021-01-21 15:00:00', 74.300000, 75.670000, 74.110000, 75.410000, 732300),
('PRIO3', '2021-01-21 16:00:00', 75.440000, 75.600000, 74.700000, 75.150000, 499400),
('PRIO3', '2021-01-22 10:00:00', 73.000000, 73.500000, 71.420000, 71.700000, 654700),
('PRIO3', '2021-01-22 11:00:00', 71.700000, 73.120000, 71.610000, 72.120000, 897300),
('PRIO3', '2021-01-22 12:00:00', 72.170000, 73.000000, 72.020000, 72.110000, 377700),
('PRIO3', '2021-01-22 13:00:00', 72.100000, 72.690000, 71.700000, 72.300000, 412900),
('PRIO3', '2021-01-22 14:00:00', 72.300000, 72.680000, 71.800000, 71.850000, 261300),
('PRIO3', '2021-01-22 15:00:00', 71.880000, 72.280000, 71.800000, 72.100000, 161200),
('PRIO3', '2021-01-22 16:00:00', 72.110000, 72.480000, 72.000000, 72.110000, 229300),
('PRIO3', '2021-01-26 10:00:00', 72.210000, 73.800000, 72.210000, 73.200000, 300200),
('PRIO3', '2021-01-26 11:00:00', 73.220000, 73.720000, 72.570000, 72.690000, 604100),
('PRIO3', '2021-01-26 12:00:00', 72.650000, 72.700000, 72.260000, 72.480000, 454800),
('PRIO3', '2021-01-26 13:00:00', 72.480000, 72.980000, 71.710000, 71.770000, 482800),
('PRIO3', '2021-01-26 14:00:00', 71.750000, 72.710000, 71.150000, 72.390000, 434700),
('PRIO3', '2021-01-26 15:00:00', 72.420000, 72.460000, 71.500000, 72.320000, 331300),
('PRIO3', '2021-01-26 16:00:00', 72.280000, 72.280000, 70.940000, 71.100000, 401200),
('PRIO3', '2021-01-27 10:00:00', 70.880000, 71.350000, 69.710000, 70.880000, 349700),
('PRIO3', '2021-01-27 11:00:00', 70.880000, 70.950000, 68.610000, 69.000000, 845400),
('PRIO3', '2021-01-27 12:00:00', 69.000000, 69.760000, 68.730000, 69.070000, 376400),
('PRIO3', '2021-01-27 13:00:00', 69.070000, 69.360000, 68.020000, 68.700000, 528800),
('PRIO3', '2021-01-27 14:00:00', 68.770000, 69.960000, 68.250000, 69.500000, 513600),
('PRIO3', '2021-01-27 15:00:00', 69.450000, 70.920000, 69.320000, 70.690000, 641200),
('PRIO3', '2021-01-27 16:00:00', 70.760000, 71.810000, 70.300000, 70.530000, 529800),
('PRIO3', '2021-01-28 10:00:00', 69.120000, 69.700000, 67.540000, 68.420000, 324400),
('PRIO3', '2021-01-28 11:00:00', 68.500000, 70.680000, 68.290000, 70.160000, 719800),
('PRIO3', '2021-01-28 12:00:00', 70.110000, 70.450000, 69.300000, 69.780000, 314100),
('PRIO3', '2021-01-28 13:00:00', 69.790000, 70.100000, 69.470000, 69.590000, 166400),
('PRIO3', '2021-01-28 14:00:00', 69.630000, 71.210000, 69.550000, 71.090000, 468600),
('PRIO3', '2021-01-28 15:00:00', 71.120000, 71.380000, 70.180000, 70.640000, 265300),
('PRIO3', '2021-01-28 16:00:00', 70.660000, 71.170000, 70.300000, 70.650000, 278700),
('PRIO3', '2021-01-29 10:00:00', 70.290000, 71.700000, 69.960000, 70.830000, 787700),
('PRIO3', '2021-01-29 11:00:00', 70.830000, 72.760000, 70.800000, 72.620000, 1152700),
('PRIO3', '2021-01-29 12:00:00', 72.590000, 74.710000, 72.270000, 73.070000, 1566000),
('PRIO3', '2021-01-29 13:00:00', 73.080000, 73.280000, 71.020000, 71.100000, 1123900),
('PRIO3', '2021-01-29 14:00:00', 71.090000, 71.640000, 70.000000, 70.060000, 971000),
('PRIO3', '2021-01-29 15:00:00', 70.080000, 70.200000, 69.000000, 69.240000, 1155500),
('PRIO3', '2021-01-29 16:00:00', 69.240000, 69.880000, 68.720000, 69.280000, 854100),
('PRIO3', '2021-02-01 10:00:00', 72.210000, 72.210000, 69.700000, 69.940000, 470400),
('PRIO3', '2021-02-01 11:00:00', 69.860000, 71.450000, 69.790000, 71.220000, 1068200),
('PRIO3', '2021-02-01 12:00:00', 71.230000, 71.450000, 70.000000, 70.080000, 799200),
('PRIO3', '2021-02-01 13:00:00', 70.080000, 71.570000, 69.960000, 71.390000, 603300),
('PRIO3', '2021-02-01 14:00:00', 71.440000, 72.100000, 70.980000, 71.960000, 746900),
('PRIO3', '2021-02-01 15:00:00', 71.920000, 73.190000, 71.230000, 73.060000, 1087100),
('PRIO3', '2021-02-01 16:00:00', 73.060000, 73.800000, 72.440000, 73.450000, 775800),
('PRIO3', '2021-02-02 10:00:00', 74.810000, 76.720000, 74.810000, 76.500000, 821600),
('PRIO3', '2021-02-02 11:00:00', 76.500000, 77.400000, 75.850000, 77.190000, 1396200),
('PRIO3', '2021-02-02 12:00:00', 77.190000, 78.300000, 76.300000, 77.950000, 1316600),
('PRIO3', '2021-02-02 13:00:00', 77.930000, 78.800000, 77.450000, 78.650000, 932900),
('PRIO3', '2021-02-02 14:00:00', 78.640000, 79.200000, 77.750000, 79.150000, 1132000),
('PRIO3', '2021-02-02 15:00:00', 79.150000, 79.380000, 78.160000, 78.800000, 769000),
('PRIO3', '2021-02-02 16:00:00', 78.820000, 79.230000, 78.110000, 78.300000, 686200),
('PRIO3', '2021-02-03 10:00:00', 78.780000, 79.220000, 76.880000, 77.300000, 359800),
('PRIO3', '2021-02-03 11:00:00', 77.350000, 78.500000, 76.560000, 77.130000, 811100),
('PRIO3', '2021-02-03 12:00:00', 77.160000, 77.400000, 76.200000, 76.280000, 540400),
('PRIO3', '2021-02-03 13:00:00', 76.270000, 77.260000, 75.800000, 75.950000, 621300),
('PRIO3', '2021-02-03 14:00:00', 75.940000, 76.850000, 75.640000, 76.230000, 787900),
('PRIO3', '2021-02-03 15:00:00', 76.230000, 76.600000, 76.010000, 76.400000, 444100),
('PRIO3', '2021-02-03 16:00:00', 76.460000, 77.690000, 76.240000, 76.890000, 676800),
('PRIO3', '2021-02-04 10:00:00', 77.290000, 77.850000, 76.500000, 76.810000, 320400),
('PRIO3', '2021-02-04 11:00:00', 76.830000, 77.500000, 76.230000, 76.260000, 473200),
('PRIO3', '2021-02-04 12:00:00', 76.290000, 76.580000, 75.130000, 75.550000, 761000),
('PRIO3', '2021-02-04 13:00:00', 75.550000, 76.210000, 75.390000, 75.740000, 386200),
('PRIO3', '2021-02-04 14:00:00', 75.710000, 76.280000, 75.300000, 75.510000, 304900),
('PRIO3', '2021-02-04 15:00:00', 75.510000, 75.890000, 75.210000, 75.490000, 488600),
('PRIO3', '2021-02-04 16:00:00', 75.500000, 75.750000, 75.280000, 75.350000, 372800),
('PRIO3', '2021-02-05 10:00:00', 76.560000, 76.690000, 75.300000, 76.460000, 337200),
('PRIO3', '2021-02-05 11:00:00', 76.410000, 80.750000, 76.230000, 79.660000, 2755800),
('PRIO3', '2021-02-05 12:00:00', 79.600000, 79.700000, 77.070000, 78.080000, 1204700),
('PRIO3', '2021-02-05 13:00:00', 78.080000, 78.470000, 77.530000, 77.810000, 630600),
('PRIO3', '2021-02-05 14:00:00', 77.820000, 79.000000, 77.700000, 78.940000, 727000),
('PRIO3', '2021-02-05 15:00:00', 78.960000, 80.430000, 78.820000, 79.290000, 1353000),
('PRIO3', '2021-02-05 16:00:00', 79.270000, 79.290000, 77.910000, 78.060000, 398900),
('PRIO3', '2021-02-08 10:00:00', 79.260000, 81.250000, 79.260000, 79.910000, 893600),
('PRIO3', '2021-02-08 11:00:00', 79.900000, 81.700000, 79.860000, 81.250000, 1354500),
('PRIO3', '2021-02-08 12:00:00', 81.260000, 81.890000, 79.750000, 80.170000, 1001800),
('PRIO3', '2021-02-08 13:00:00', 80.140000, 80.500000, 79.600000, 80.110000, 358900),
('PRIO3', '2021-02-08 14:00:00', 80.100000, 81.000000, 79.880000, 80.680000, 404000),
('PRIO3', '2021-02-08 15:00:00', 80.650000, 82.680000, 80.520000, 81.870000, 1299600),
('PRIO3', '2021-02-08 16:00:00', 81.820000, 82.260000, 81.220000, 81.820000, 439400),
('PRIO3', '2021-02-09 10:00:00', 81.000000, 81.850000, 79.930000, 79.950000, 603600),
('PRIO3', '2021-02-09 11:00:00', 79.930000, 81.150000, 79.000000, 79.020000, 1147000),
('PRIO3', '2021-02-09 12:00:00', 79.100000, 79.410000, 77.430000, 77.430000, 1260500),
('PRIO3', '2021-02-09 13:00:00', 77.440000, 77.990000, 76.360000, 77.490000, 1348300),
('PRIO3', '2021-02-09 14:00:00', 77.470000, 77.660000, 76.730000, 77.150000, 861100),
('PRIO3', '2021-02-09 15:00:00', 77.180000, 78.050000, 77.160000, 77.850000, 460200),
('PRIO3', '2021-02-09 16:00:00', 77.840000, 77.900000, 77.010000, 77.690000, 516300),
('PRIO3', '2021-02-10 10:00:00', 78.530000, 78.700000, 77.520000, 77.900000, 411300),
('PRIO3', '2021-02-10 11:00:00', 77.890000, 78.700000, 77.600000, 77.810000, 776700),
('PRIO3', '2021-02-10 12:00:00', 77.790000, 78.160000, 76.730000, 77.140000, 617400),
('PRIO3', '2021-02-10 13:00:00', 77.160000, 78.240000, 76.880000, 77.860000, 399900),
('PRIO3', '2021-02-10 14:00:00', 77.850000, 78.150000, 77.640000, 78.000000, 243800),
('PRIO3', '2021-02-10 15:00:00', 77.990000, 78.590000, 77.550000, 77.730000, 565600),
('PRIO3', '2021-02-10 16:00:00', 77.720000, 78.290000, 77.540000, 77.950000, 432100),
('PRIO3', '2021-02-11 10:00:00', 79.910000, 80.100000, 78.370000, 78.850000, 351100),
('PRIO3', '2021-02-11 11:00:00', 78.830000, 79.800000, 78.010000, 78.200000, 747400),
('PRIO3', '2021-02-11 12:00:00', 78.230000, 78.400000, 77.700000, 78.050000, 484700),
('PRIO3', '2021-02-11 13:00:00', 78.050000, 78.080000, 77.180000, 77.720000, 452100),
('PRIO3', '2021-02-11 14:00:00', 77.720000, 78.000000, 76.850000, 77.020000, 651100),
('PRIO3', '2021-02-11 15:00:00', 77.010000, 77.160000, 76.500000, 76.670000, 383100),
('PRIO3', '2021-02-11 16:00:00', 76.710000, 77.340000, 76.550000, 77.220000, 343200),
('PRIO3', '2021-02-12 10:00:00', 76.880000, 76.980000, 75.580000, 76.550000, 330800),
('PRIO3', '2021-02-12 11:00:00', 76.550000, 77.700000, 76.320000, 76.350000, 469000),
('PRIO3', '2021-02-12 12:00:00', 76.370000, 78.210000, 76.310000, 77.480000, 533700),
('PRIO3', '2021-02-12 13:00:00', 77.430000, 78.660000, 77.380000, 78.450000, 462200),
('PRIO3', '2021-02-12 14:00:00', 78.410000, 79.900000, 78.290000, 79.730000, 943100),
('PRIO3', '2021-02-12 15:00:00', 79.720000, 79.990000, 79.120000, 79.510000, 616900),
('PRIO3', '2021-02-12 16:00:00', 79.540000, 79.880000, 79.260000, 79.630000, 497100),
('PRIO3', '2021-02-17 13:00:00', 80.450000, 83.130000, 80.400000, 82.970000, 838200),
('PRIO3', '2021-02-17 14:00:00', 82.970000, 84.640000, 82.600000, 83.770000, 2227200),
('PRIO3', '2021-02-17 15:00:00', 83.770000, 87.000000, 83.400000, 86.710000, 1765400),
('PRIO3', '2021-02-17 16:00:00', 86.720000, 87.400000, 85.720000, 85.900000, 1274600),
('PRIO3', '2021-02-18 10:00:00', 87.620000, 92.040000, 87.610000, 90.660000, 1301900),
('PRIO3', '2021-02-18 11:00:00', 90.570000, 91.000000, 88.720000, 89.810000, 1256800),
('PRIO3', '2021-02-18 12:00:00', 89.880000, 90.010000, 88.270000, 88.450000, 1033700),
('PRIO3', '2021-02-18 13:00:00', 88.410000, 89.690000, 88.290000, 89.600000, 668800),
('PRIO3', '2021-02-18 14:00:00', 89.530000, 90.750000, 89.400000, 90.410000, 824600),
('PRIO3', '2021-02-18 15:00:00', 90.400000, 90.690000, 89.100000, 89.450000, 786600),
('PRIO3', '2021-02-18 16:00:00', 89.450000, 89.690000, 88.950000, 89.100000, 559600),
('PRIO3', '2021-02-19 10:00:00', 88.010000, 89.250000, 86.300000, 87.650000, 399200),
('PRIO3', '2021-02-19 11:00:00', 87.730000, 89.080000, 86.700000, 88.940000, 597600),
('PRIO3', '2021-02-19 12:00:00', 88.970000, 88.970000, 87.020000, 87.350000, 581700),
('PRIO3', '2021-02-19 13:00:00', 87.350000, 88.150000, 87.250000, 87.790000, 233100),
('PRIO3', '2021-02-19 14:00:00', 87.770000, 87.950000, 87.040000, 87.310000, 317300),
('PRIO3', '2021-02-19 15:00:00', 87.330000, 87.700000, 87.210000, 87.560000, 237200),
('PRIO3', '2021-02-19 16:00:00', 87.510000, 88.070000, 87.240000, 87.900000, 256800),
('PRIO3', '2021-02-22 10:00:00', 87.500000, 87.990000, 84.500000, 85.100000, 719500),
('PRIO3', '2021-02-22 11:00:00', 85.490000, 87.500000, 84.690000, 87.400000, 1956100),
('PRIO3', '2021-02-22 12:00:00', 85.520000, 90.230000, 85.320000, 90.230000, 1679200),
('PRIO3', '2021-02-22 13:00:00', 87.720000, 92.200000, 87.650000, 92.200000, 2113000),
('PRIO3', '2021-02-22 14:00:00', 90.800000, 92.200000, 90.560000, 90.770000, 1877700),
('PRIO3', '2021-02-22 15:00:00', 91.500000, 92.170000, 90.280000, 91.080000, 1513200),
('PRIO3', '2021-02-22 16:00:00', 90.840000, 92.250000, 90.650000, 91.650000, 1818600),
('PRIO3', '2021-02-22 17:00:00', 91.870000, 92.250000, 91.400000, 92.000000, 1908700),
('PRIO3', '2021-02-23 10:00:00', 93.050000, 94.000000, 88.370000, 89.070000, 583800),
('PRIO3', '2021-02-23 11:00:00', 90.880000, 90.900000, 84.880000, 85.340000, 3525100),
('PRIO3', '2021-02-23 12:00:00', 87.620000, 88.890000, 84.880000, 88.400000, 3479500),
('PRIO3', '2021-02-23 13:00:00', 87.470000, 88.890000, 86.440000, 87.310000, 2322300),
('PRIO3', '2021-02-23 14:00:00', 87.780000, 87.840000, 85.420000, 85.630000, 1175900),
('PRIO3', '2021-02-23 15:00:00', 86.940000, 87.580000, 85.400000, 87.290000, 1884900),
('PRIO3', '2021-02-23 16:00:00', 86.390000, 88.490000, 86.100000, 88.460000, 1972300),
('PRIO3', '2021-02-23 17:00:00', 87.300000, 88.880000, 87.210000, 88.460000, 2727000),
('PRIO3', '2021-02-24 10:00:00', 89.960000, 91.990000, 88.160000, 88.880000, 667800),
('PRIO3', '2021-02-24 11:00:00', 90.550000, 91.990000, 87.380000, 89.400000, 3436500),
('PRIO3', '2021-02-24 12:00:00', 88.270000, 90.650000, 88.010000, 89.900000, 1871900),
('PRIO3', '2021-02-24 13:00:00', 89.880000, 90.500000, 88.220000, 88.660000, 1285800),
('PRIO3', '2021-02-24 14:00:00', 89.100000, 89.460000, 88.220000, 88.500000, 862500),
('PRIO3', '2021-02-24 15:00:00', 88.980000, 89.020000, 88.240000, 88.550000, 632600),
('PRIO3', '2021-02-24 16:00:00', 88.900000, 88.930000, 87.800000, 88.060000, 850200),
('PRIO3', '2021-02-24 17:00:00', 88.100000, 88.510000, 87.620000, 87.700000, 1112300),
('PRIO3', '2021-02-25 10:00:00', 90.000000, 90.900000, 88.310000, 89.710000, 570200),
('PRIO3', '2021-02-25 11:00:00', 89.220000, 90.320000, 87.800000, 87.800000, 1477900),
('PRIO3', '2021-02-25 12:00:00', 89.100000, 89.500000, 85.940000, 86.520000, 1782600),
('PRIO3', '2021-02-25 13:00:00', 87.710000, 87.770000, 85.300000, 85.520000, 1312200),
('PRIO3', '2021-02-25 14:00:00', 86.350000, 86.410000, 85.150000, 85.330000, 1107200),
('PRIO3', '2021-02-25 15:00:00', 85.500000, 85.700000, 83.560000, 84.030000, 1939400),
('PRIO3', '2021-02-25 16:00:00', 84.960000, 86.320000, 83.560000, 84.950000, 2034800),
('PRIO3', '2021-02-25 17:00:00', 85.370000, 86.000000, 82.740000, 83.580000, 2645700),
('PRIO3', '2021-02-26 10:00:00', 85.000000, 86.250000, 83.510000, 85.600000, 604200),
('PRIO3', '2021-02-26 11:00:00', 83.600000, 86.120000, 83.280000, 83.300000, 1662900),
('PRIO3', '2021-02-26 12:00:00', 84.200000, 84.390000, 82.070000, 82.400000, 1407600),
('PRIO3', '2021-02-26 13:00:00', 82.740000, 83.500000, 82.110000, 82.960000, 948300),
('PRIO3', '2021-02-26 14:00:00', 82.680000, 84.290000, 82.590000, 83.760000, 761300),
('PRIO3', '2021-02-26 15:00:00', 83.560000, 84.430000, 83.210000, 83.310000, 912600),
('PRIO3', '2021-02-26 16:00:00', 84.140000, 84.430000, 82.730000, 82.840000, 1169700),
('PRIO3', '2021-02-26 17:00:00', 83.130000, 83.400000, 82.500000, 83.000000, 1264100),
('PRIO3', '2021-03-01 10:00:00', 85.610000, 89.300000, 85.380000, 87.840000, 437000),
('PRIO3', '2021-03-01 11:00:00', 86.090000, 89.510000, 85.400000, 86.600000, 3523000),
('PRIO3', '2021-03-01 12:00:00', 88.420000, 89.510000, 85.810000, 86.090000, 2562500),
('PRIO3', '2021-03-01 13:00:00', 86.030000, 87.140000, 85.920000, 86.340000, 941600),
('PRIO3', '2021-03-01 14:00:00', 86.740000, 87.060000, 86.150000, 86.180000, 916000),
('PRIO3', '2021-03-01 15:00:00', 86.560000, 86.980000, 85.020000, 86.200000, 1452900),
('PRIO3', '2021-03-01 16:00:00', 85.140000, 87.500000, 85.140000, 86.880000, 1248600),
('PRIO3', '2021-03-01 17:00:00', 86.670000, 88.320000, 86.450000, 87.850000, 2010600),
('PRIO3', '2021-03-02 10:00:00', 85.970000, 88.890000, 84.160000, 87.180000, 735600),
('PRIO3', '2021-03-02 11:00:00', 86.230000, 88.890000, 85.750000, 86.780000, 2309100),
('PRIO3', '2021-03-02 12:00:00', 86.420000, 87.200000, 85.100000, 85.610000, 1652600),
('PRIO3', '2021-03-02 13:00:00', 85.130000, 86.620000, 83.590000, 84.450000, 1891300),
('PRIO3', '2021-03-02 14:00:00', 84.290000, 85.800000, 83.590000, 84.970000, 1799100),
('PRIO3', '2021-03-02 15:00:00', 85.350000, 85.800000, 84.050000, 85.530000, 1133800),
('PRIO3', '2021-03-02 16:00:00', 84.380000, 85.750000, 84.050000, 85.030000, 1617100),
('PRIO3', '2021-03-02 17:00:00', 84.670000, 85.650000, 84.050000, 85.390000, 1783800),
('PRIO3', '2021-03-03 10:00:00', 86.010000, 87.320000, 85.390000, 86.090000, 500900),
('PRIO3', '2021-03-03 11:00:00', 86.530000, 87.320000, 83.640000, 83.670000, 2235100),
('PRIO3', '2021-03-03 12:00:00', 84.790000, 85.310000, 83.160000, 83.440000, 1202400),
('PRIO3', '2021-03-03 13:00:00', 83.850000, 85.500000, 83.160000, 84.440000, 1606400),
('PRIO3', '2021-03-03 14:00:00', 85.070000, 88.060000, 84.100000, 87.320000, 2692300),
('PRIO3', '2021-03-03 15:00:00', 86.680000, 88.060000, 85.520000, 85.640000, 1902300),
('PRIO3', '2021-03-03 16:00:00', 86.740000, 89.000000, 84.260000, 88.270000, 2746200),
('PRIO3', '2021-03-03 17:00:00', 84.780000, 89.990000, 84.590000, 89.620000, 3871900),
('PRIO3', '2021-03-04 10:00:00', 89.600000, 89.600000, 87.200000, 88.750000, 700000),
('PRIO3', '2021-03-04 11:00:00', 88.890000, 91.130000, 87.810000, 89.620000, 2943200),
('PRIO3', '2021-03-04 12:00:00', 90.180000, 92.000000, 89.350000, 91.940000, 4231800),
('PRIO3', '2021-03-04 13:00:00', 91.930000, 92.000000, 91.000000, 91.210000, 3042700),
('PRIO3', '2021-03-04 14:00:00', 91.750000, 92.000000, 90.000000, 90.080000, 1817100),
('PRIO3', '2021-03-04 15:00:00', 90.590000, 90.910000, 88.870000, 88.990000, 1543000),
('PRIO3', '2021-03-04 16:00:00', 89.600000, 90.370000, 88.700000, 88.940000, 1294700),
('PRIO3', '2021-03-04 17:00:00', 89.590000, 92.500000, 88.730000, 92.250000, 2512000),
('PRIO3', '2021-03-05 10:00:00', 94.510000, 97.500000, 93.010000, 97.220000, 1557300),
('PRIO3', '2021-03-05 11:00:00', 96.580000, 98.660000, 95.510000, 97.550000, 3744700),
('PRIO3', '2021-03-05 12:00:00', 97.540000, 98.290000, 96.900000, 97.590000, 1889200),
('PRIO3', '2021-03-05 13:00:00', 97.150000, 97.940000, 96.090000, 96.580000, 1685700),
('PRIO3', '2021-03-05 14:00:00', 96.870000, 98.480000, 96.090000, 97.980000, 2087600),
('PRIO3', '2021-03-05 15:00:00', 96.920000, 98.900000, 96.850000, 98.430000, 2123100),
('PRIO3', '2021-03-05 16:00:00', 97.900000, 99.600000, 97.560000, 99.420000, 1485100),
('PRIO3', '2021-03-05 17:00:00', 98.120000, 100.000000, 97.900000, 99.850000, 2360200),
('PRIO3', '2021-03-08 10:00:00', 98.520000, 101.390000, 97.000000, 99.190000, 1418200),
('PRIO3', '2021-03-08 11:00:00', 98.880000, 99.660000, 98.050000, 98.800000, 2193900),
('PRIO3', '2021-03-08 12:00:00', 98.780000, 99.200000, 97.560000, 99.100000, 1778200),
('PRIO3', '2021-03-08 13:00:00', 97.670000, 99.200000, 97.670000, 98.420000, 949200),
('PRIO3', '2021-03-08 14:00:00', 98.890000, 99.180000, 97.900000, 98.670000, 1194900),
('PRIO3', '2021-03-08 15:00:00', 99.110000, 99.180000, 95.000000, 95.610000, 1454500),
('PRIO3', '2021-03-08 16:00:00', 98.690000, 98.700000, 94.990000, 96.210000, 2794200),
('PRIO3', '2021-03-08 17:00:00', 97.390000, 98.000000, 95.120000, 95.150000, 2020300),
('PRIO3', '2021-03-09 10:00:00', 97.000000, 97.780000, 94.200000, 96.160000, 721000),
('PRIO3', '2021-03-09 11:00:00', 95.360000, 96.810000, 94.310000, 95.550000, 1671300),
('PRIO3', '2021-03-09 12:00:00', 95.940000, 99.070000, 94.580000, 98.700000, 2898000),
('PRIO3', '2021-03-09 13:00:00', 96.830000, 100.510000, 96.740000, 99.300000, 2299100),
('PRIO3', '2021-03-09 14:00:00', 99.970000, 100.510000, 98.320000, 99.180000, 2091700),
('PRIO3', '2021-03-09 15:00:00', 99.480000, 99.750000, 98.420000, 98.900000, 1135100),
('PRIO3', '2021-03-09 16:00:00', 98.900000, 99.710000, 97.630000, 97.820000, 1381700),
('PRIO3', '2021-03-09 17:00:00', 99.140000, 99.210000, 97.110000, 97.670000, 1857600),
('PRIO3', '2021-03-10 10:00:00', 99.300000, 99.460000, 96.150000, 96.900000, 420400),
('PRIO3', '2021-03-10 11:00:00', 97.630000, 98.640000, 94.610000, 94.860000, 2847800),
('PRIO3', '2021-03-10 12:00:00', 95.750000, 96.410000, 94.610000, 95.140000, 1965600),
('PRIO3', '2021-03-10 13:00:00', 94.950000, 95.790000, 94.360000, 94.390000, 1120900),
('PRIO3', '2021-03-10 14:00:00', 94.960000, 95.290000, 92.050000, 92.550000, 2477800),
('PRIO3', '2021-03-10 15:00:00', 93.470000, 93.640000, 92.050000, 92.790000, 1830900),
('PRIO3', '2021-03-10 16:00:00', 93.350000, 94.500000, 92.190000, 94.060000, 1988600),
('PRIO3', '2021-03-10 17:00:00', 93.380000, 95.000000, 93.170000, 93.820000, 2599000),
('PRIO3', '2021-03-11 10:00:00', 95.900000, 97.690000, 95.200000, 96.030000, 522300),
('PRIO3', '2021-03-11 11:00:00', 95.950000, 97.690000, 93.500000, 93.750000, 2581700),
('PRIO3', '2021-03-11 12:00:00', 94.220000, 95.290000, 91.340000, 91.550000, 2656800),
('PRIO3', '2021-03-11 13:00:00', 92.770000, 92.910000, 91.340000, 91.760000, 1977800),
('PRIO3', '2021-03-11 14:00:00', 91.980000, 92.530000, 91.550000, 92.070000, 1240700),
('PRIO3', '2021-03-11 15:00:00', 92.030000, 92.890000, 91.550000, 91.750000, 1310900),
('PRIO3', '2021-03-11 16:00:00', 91.700000, 92.300000, 91.650000, 92.060000, 1349200),
('PRIO3', '2021-03-11 17:00:00', 92.020000, 92.920000, 91.680000, 92.250000, 1986100),
('PRIO3', '2021-03-12 10:00:00', 92.810000, 94.750000, 91.800000, 92.700000, 624700),
('PRIO3', '2021-03-12 11:00:00', 93.180000, 93.650000, 91.800000, 92.480000, 1788200),
('PRIO3', '2021-03-12 12:00:00', 92.290000, 93.150000, 91.550000, 92.730000, 1109500),
('PRIO3', '2021-03-12 13:00:00', 91.770000, 94.970000, 91.700000, 94.080000, 1741800),
('PRIO3', '2021-03-12 14:00:00', 94.080000, 94.970000, 93.340000, 94.100000, 1339600),
('PRIO3', '2021-03-12 15:00:00', 94.100000, 94.400000, 93.340000, 93.720000, 896300),
('PRIO3', '2021-03-12 16:00:00', 93.750000, 94.470000, 93.400000, 94.110000, 656200),
('PRIO3', '2021-03-12 17:00:00', 93.580000, 94.470000, 93.410000, 93.890000, 791500),
('PRIO3', '2021-03-15 10:00:00', 93.580000, 94.280000, 92.510000, 93.370000, 1302800),
('PRIO3', '2021-03-15 11:00:00', 93.480000, 93.940000, 92.510000, 93.170000, 1225300),
('PRIO3', '2021-03-15 12:00:00', 93.210000, 93.730000, 92.120000, 92.320000, 873600),
('PRIO3', '2021-03-15 13:00:00', 92.900000, 92.950000, 91.800000, 91.990000, 1247300),
('PRIO3', '2021-03-15 14:00:00', 91.850000, 92.240000, 91.550000, 91.920000, 656000),
('PRIO3', '2021-03-15 15:00:00', 91.830000, 92.530000, 91.420000, 91.500000, 830300),
('PRIO3', '2021-03-15 16:00:00', 91.760000, 92.080000, 90.300000, 90.800000, 1834800),
('PRIO3', '2021-03-15 17:00:00', 90.800000, 90.800000, 90.800000, 90.800000, 0),
('PRIO3', '2021-03-16 10:00:00', 91.330000, 92.200000, 89.840000, 90.580000, 585900),
('PRIO3', '2021-03-16 11:00:00', 91.520000, 92.660000, 90.000000, 92.500000, 2059000),
('PRIO3', '2021-03-16 12:00:00', 91.300000, 92.660000, 90.600000, 91.950000, 1534100),
('PRIO3', '2021-03-16 13:00:00', 92.140000, 92.380000, 91.630000, 91.950000, 896900),
('PRIO3', '2021-03-16 14:00:00', 92.000000, 92.100000, 91.000000, 91.320000, 925600),
('PRIO3', '2021-03-16 15:00:00', 91.690000, 91.780000, 90.200000, 90.370000, 1082300),
('PRIO3', '2021-03-16 16:00:00', 91.000000, 91.590000, 90.200000, 91.000000, 1433700),
('PRIO3', '2021-03-16 17:00:00', 91.000000, 91.000000, 91.000000, 91.000000, 654600),
('PRIO3', '2021-03-17 10:00:00', 90.700000, 92.330000, 89.500000, 92.200000, 480000),
('PRIO3', '2021-03-17 11:00:00', 90.150000, 93.900000, 90.000000, 93.780000, 3026700),
('PRIO3', '2021-03-17 12:00:00', 93.250000, 95.300000, 92.340000, 94.250000, 3078900),
('PRIO3', '2021-03-17 13:00:00', 94.620000, 95.400000, 93.820000, 94.370000, 2106600),
('PRIO3', '2021-03-17 14:00:00', 95.180000, 95.370000, 94.040000, 94.590000, 1079600),
('PRIO3', '2021-03-17 15:00:00', 94.290000, 95.320000, 94.080000, 95.240000, 1142700),
('PRIO3', '2021-03-17 16:00:00', 94.590000, 96.560000, 94.250000, 96.300000, 2500200),
('PRIO3', '2021-03-17 17:00:00', 96.500000, 96.500000, 96.500000, 96.500000, 581400),
('PRIO3', '2021-03-18 10:00:00', 95.740000, 96.990000, 94.510000, 95.250000, 626600),
('PRIO3', '2021-03-18 11:00:00', 96.280000, 96.280000, 93.590000, 93.660000, 1808900),
('PRIO3', '2021-03-18 12:00:00', 94.910000, 95.060000, 93.310000, 94.060000, 1417000),
('PRIO3', '2021-03-18 13:00:00', 93.700000, 94.380000, 93.070000, 93.130000, 924000),
('PRIO3', '2021-03-18 14:00:00', 94.070000, 94.380000, 92.650000, 92.740000, 1303500),
('PRIO3', '2021-03-18 15:00:00', 93.020000, 93.390000, 88.930000, 89.600000, 2802300),
('PRIO3', '2021-03-18 16:00:00', 91.570000, 91.750000, 86.500000, 87.590000, 7374700),
('PRIO3', '2021-03-18 17:00:00', 88.200000, 88.200000, 88.200000, 88.200000, 1267000),
('PRIO3', '2021-03-19 10:00:00', 89.890000, 90.900000, 88.290000, 89.610000, 1144700),
('PRIO3', '2021-03-19 11:00:00', 90.410000, 92.350000, 88.290000, 91.860000, 3540300),
('PRIO3', '2021-03-19 12:00:00', 90.650000, 94.170000, 90.560000, 94.110000, 3151500),
('PRIO3', '2021-03-19 13:00:00', 92.650000, 95.340000, 92.210000, 95.300000, 2497000),
('PRIO3', '2021-03-19 14:00:00', 94.100000, 95.550000, 93.810000, 94.290000, 2448300),
('PRIO3', '2021-03-19 15:00:00', 94.910000, 95.200000, 93.840000, 94.470000, 1774500),
('PRIO3', '2021-03-19 16:00:00', 94.810000, 94.870000, 93.560000, 93.920000, 2038700),
('PRIO3', '2021-03-19 17:00:00', 93.930000, 93.930000, 93.930000, 93.930000, 3389200),
('PRIO3', '2021-03-22 10:00:00', 93.150000, 93.690000, 91.150000, 91.410000, 379700),
('PRIO3', '2021-03-22 11:00:00', 92.900000, 93.100000, 89.540000, 90.050000, 3006200),
('PRIO3', '2021-03-22 12:00:00', 90.090000, 90.700000, 89.900000, 90.310000, 1175200),
('PRIO3', '2021-03-22 13:00:00', 90.250000, 91.300000, 89.720000, 90.940000, 1371600),
('PRIO3', '2021-03-22 14:00:00', 90.210000, 91.300000, 90.030000, 91.050000, 755500),
('PRIO3', '2021-03-22 15:00:00', 91.020000, 91.800000, 90.700000, 90.850000, 1157900),
('PRIO3', '2021-03-22 16:00:00', 91.480000, 91.800000, 90.100000, 90.250000, 1596700),
('PRIO3', '2021-03-22 17:00:00', 90.550000, 90.550000, 90.550000, 90.550000, 475800),
('PRIO3', '2021-03-23 10:00:00', 88.760000, 90.000000, 87.800000, 88.400000, 2426300),
('PRIO3', '2021-03-23 11:00:00', 88.670000, 90.000000, 87.500000, 88.500000, 2759900),
('PRIO3', '2021-03-23 12:00:00', 88.380000, 89.500000, 87.500000, 89.130000, 1601600),
('PRIO3', '2021-03-23 13:00:00', 89.340000, 89.430000, 88.050000, 88.730000, 933600),
('PRIO3', '2021-03-23 14:00:00', 88.420000, 88.850000, 87.900000, 88.010000, 840000),
('PRIO3', '2021-03-23 15:00:00', 88.250000, 88.500000, 87.000000, 87.090000, 1947500),
('PRIO3', '2021-03-23 16:00:00', 87.740000, 88.150000, 86.560000, 87.120000, 2357900),
('PRIO3', '2021-03-23 17:00:00', 87.030000, 87.030000, 87.030000, 87.030000, 0),
('PRIO3', '2021-03-24 10:00:00', 89.100000, 89.800000, 88.270000, 89.260000, 1076900),
('PRIO3', '2021-03-24 11:00:00', 89.130000, 91.290000, 88.880000, 90.060000, 3772600),
('PRIO3', '2021-03-24 12:00:00', 90.010000, 90.600000, 89.200000, 89.780000, 1434800),
('PRIO3', '2021-03-24 13:00:00', 90.110000, 91.890000, 89.700000, 91.860000, 1961800),
('PRIO3', '2021-03-24 14:00:00', 90.690000, 91.900000, 90.290000, 90.980000, 1830100),
('PRIO3', '2021-03-24 15:00:00', 91.120000, 91.380000, 88.900000, 89.050000, 1080600),
('PRIO3', '2021-03-24 16:00:00', 90.650000, 90.650000, 88.130000, 88.380000, 2391500),
('PRIO3', '2021-03-24 17:00:00', 88.010000, 88.010000, 88.010000, 88.010000, 653000),
('PRIO3', '2021-03-25 10:00:00', 87.930000, 87.940000, 85.510000, 86.000000, 2433200),
('PRIO3', '2021-03-25 11:00:00', 86.800000, 87.470000, 85.690000, 85.960000, 2284400),
('PRIO3', '2021-03-25 12:00:00', 87.070000, 87.360000, 85.300000, 86.850000, 1956800),
('PRIO3', '2021-03-25 13:00:00', 86.270000, 88.820000, 86.130000, 88.490000, 1676700),
('PRIO3', '2021-03-25 14:00:00', 87.430000, 90.400000, 87.280000, 89.480000, 2745200),
('PRIO3', '2021-03-25 15:00:00', 89.750000, 90.400000, 88.870000, 90.000000, 1668600),
('PRIO3', '2021-03-25 16:00:00', 89.680000, 90.150000, 89.090000, 89.880000, 1478300),
('PRIO3', '2021-03-25 17:00:00', 89.410000, 89.410000, 89.410000, 89.410000, 0),
('PRIO3', '2021-03-26 10:00:00', 91.390000, 94.360000, 91.040000, 93.920000, 1060000),
('PRIO3', '2021-03-26 11:00:00', 92.060000, 94.700000, 92.060000, 93.270000, 4114900),
('PRIO3', '2021-03-26 12:00:00', 94.150000, 94.440000, 92.310000, 93.000000, 1889500),
('PRIO3', '2021-03-26 13:00:00', 92.950000, 93.800000, 92.010000, 92.500000, 1535500),
('PRIO3', '2021-03-26 14:00:00', 92.290000, 92.900000, 90.500000, 90.780000, 1605200),
('PRIO3', '2021-03-26 15:00:00', 91.990000, 92.190000, 89.620000, 92.000000, 2516800),
('PRIO3', '2021-03-26 16:00:00', 91.490000, 92.690000, 90.900000, 92.500000, 2525900),
('PRIO3', '2021-03-26 17:00:00', 92.510000, 92.510000, 92.510000, 92.510000, 821800),
('PRIO3', '2021-03-29 10:00:00', 92.400000, 93.200000, 91.360000, 92.600000, 557800),
('PRIO3', '2021-03-29 11:00:00', 92.190000, 93.840000, 92.000000, 93.390000, 1779200),
('PRIO3', '2021-03-29 12:00:00', 92.890000, 93.840000, 92.780000, 93.750000, 1094100),
('PRIO3', '2021-03-29 13:00:00', 93.350000, 94.250000, 93.250000, 94.000000, 1477500),
('PRIO3', '2021-03-29 14:00:00', 94.010000, 94.880000, 93.600000, 93.840000, 1834300),
('PRIO3', '2021-03-29 15:00:00', 94.360000, 94.790000, 93.510000, 94.210000, 1308100),
('PRIO3', '2021-03-29 16:00:00', 94.370000, 94.950000, 94.060000, 94.370000, 1629100),
('PRIO3', '2021-03-29 17:00:00', 94.400000, 94.400000, 94.400000, 94.400000, 423600),
('PRIO3', '2021-03-30 10:00:00', 94.580000, 94.580000, 91.160000, 91.460000, 721500),
('PRIO3', '2021-03-30 11:00:00', 92.460000, 92.460000, 91.160000, 91.810000, 2201800),
('PRIO3', '2021-03-30 12:00:00', 91.990000, 92.740000, 91.420000, 92.330000, 1408700),
('PRIO3', '2021-03-30 13:00:00', 92.420000, 93.090000, 91.760000, 93.080000, 1464700),
('PRIO3', '2021-03-30 14:00:00', 92.190000, 93.090000, 92.110000, 92.560000, 1306800),
('PRIO3', '2021-03-30 15:00:00', 92.700000, 92.890000, 92.050000, 92.480000, 888700),
('PRIO3', '2021-03-30 16:00:00', 92.390000, 92.550000, 91.930000, 92.200000, 1538800),
('PRIO3', '2021-03-30 17:00:00', 92.270000, 92.270000, 92.270000, 92.270000, 408200),
('PRIO3', '2021-03-31 10:00:00', 92.270000, 94.200000, 92.000000, 93.800000, 458600),
('PRIO3', '2021-03-31 11:00:00', 92.160000, 94.200000, 92.060000, 93.060000, 3174700),
('PRIO3', '2021-03-31 12:00:00', 92.840000, 93.490000, 92.010000, 92.170000, 1514500),
('PRIO3', '2021-03-31 13:00:00', 92.200000, 92.500000, 91.610000, 91.700000, 944200),
('PRIO3', '2021-03-31 14:00:00', 92.320000, 92.320000, 91.200000, 91.350000, 1442700),
('PRIO3', '2021-03-31 15:00:00', 91.390000, 92.200000, 90.790000, 91.680000, 1443700),
('PRIO3', '2021-03-31 16:00:00', 91.570000, 92.200000, 91.400000, 91.550000, 2455600),
('PRIO3', '2021-03-31 17:00:00', 92.280000, 92.280000, 92.280000, 92.280000, 1176600)
ON CONFLICT ON CONSTRAINT hourly_data_pkey DO NOTHING;", error: new row for relation "hourly_candles" violates check constraint "hourly_candles_check"
DETAIL:  Failing row contains (PRIO3  , 2021-03-15 17:00:00, 90.80, 90.80, 90.80, 90.80, 0).

2021-05-24 11:55:57,223:INFO:__main__:Program started.
2021-05-24 11:55:57,224:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 11:55:57,225:DEBUG:utils:File found.
2021-05-24 11:55:57,225:DEBUG:utils:The function 'read_cfg' took 1.03 milliseconds to run.
2021-05-24 11:55:57,235:DEBUG:utils:The function 'get_ticker_config_data' took 10.12 milliseconds to run.
2021-05-24 11:55:57,236:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 11:55:57,248:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 11:55:58,349:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 11:55:59,856:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 11:58:21,051:INFO:__main__:Program started.
2021-05-24 11:58:21,052:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 11:58:21,053:DEBUG:utils:File found.
2021-05-24 11:58:21,053:DEBUG:utils:The function 'read_cfg' took 1.32 milliseconds to run.
2021-05-24 11:58:21,062:DEBUG:utils:The function 'get_ticker_config_data' took 8.89 milliseconds to run.
2021-05-24 11:58:21,063:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 11:58:21,078:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 11:58:22,281:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 11:58:23,575:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 11:59:03,599:INFO:__main__:Program started.
2021-05-24 11:59:03,601:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 11:59:03,602:DEBUG:utils:File found.
2021-05-24 11:59:03,602:DEBUG:utils:The function 'read_cfg' took 1.60 milliseconds to run.
2021-05-24 11:59:03,614:DEBUG:utils:The function 'get_ticker_config_data' took 11.23 milliseconds to run.
2021-05-24 11:59:03,615:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 11:59:03,638:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 11:59:05,011:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 11:59:06,311:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 12:03:19,876:INFO:__main__:Program started.
2021-05-24 12:03:19,878:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 12:03:19,881:ERROR:utils:Program aborted. Expected config file in JSON format. Is it corrupted?
Traceback (most recent call last):
  File "/Users/atcha/Github/Projeto-Final/src/utils.py", line 65, in read_cfg
    config_json = json.load(cfg_file)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 296, in load
    parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 348, in loads
    return _default_decoder.decode(s)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 15 column 5 (char 323)
2021-05-24 12:03:19,891:DEBUG:utils:The function 'read_cfg' took 13.23 milliseconds to run.
2021-05-24 12:03:39,766:INFO:__main__:Program started.
2021-05-24 12:03:39,767:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 12:03:39,768:DEBUG:utils:File found.
2021-05-24 12:03:39,768:DEBUG:utils:The function 'read_cfg' took 0.83 milliseconds to run.
2021-05-24 12:03:39,776:DEBUG:utils:The function 'get_ticker_config_data' took 8.12 milliseconds to run.
2021-05-24 12:03:39,777:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 12:03:39,777:INFO:__main__:Ticker: 'MGLU3 '	Inital date: 01/01/2020		Final date: 04/05/2021
2021-05-24 12:03:39,790:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 12:03:39,804:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 12:03:40,744:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 12:03:41,921:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 12:03:42,675:INFO:db_manager:Ticker 'MGLU3' daily candles update finished.
2021-05-24 12:03:45,006:INFO:db_manager:Ticker 'MGLU3' hourly candles update finished.
2021-05-24 12:04:15,416:INFO:__main__:Program started.
2021-05-24 12:04:15,417:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 12:04:15,418:DEBUG:utils:File found.
2021-05-24 12:04:15,418:DEBUG:utils:The function 'read_cfg' took 0.90 milliseconds to run.
2021-05-24 12:04:15,429:DEBUG:utils:The function 'get_ticker_config_data' took 10.48 milliseconds to run.
2021-05-24 12:04:15,429:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 12:04:15,429:INFO:__main__:Ticker: 'MGLU3 '	Inital date: 01/01/2020		Final date: 04/05/2021
2021-05-24 12:04:15,442:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 12:04:15,451:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 12:04:16,423:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 12:04:17,661:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 12:04:18,473:INFO:db_manager:Ticker 'MGLU3' daily candles update finished.
2021-05-24 12:04:20,713:INFO:db_manager:Ticker 'MGLU3' hourly candles update finished.
2021-05-24 20:54:38,406:INFO:__main__:Program started.
2021-05-24 20:54:38,409:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 20:54:38,410:DEBUG:utils:File found.
2021-05-24 20:54:38,411:DEBUG:utils:The function 'read_cfg' took 2.06 milliseconds to run.
2021-05-24 20:54:38,423:DEBUG:utils:The function 'get_ticker_config_data' took 11.45 milliseconds to run.
2021-05-24 20:54:38,423:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 20:54:38,423:INFO:__main__:Ticker: 'MGLU3 '	Inital date: 01/01/2020		Final date: 04/05/2021
2021-05-24 20:54:38,438:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 20:54:38,449:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 20:54:39,620:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 20:54:41,494:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 20:57:17,439:INFO:__main__:Program started.
2021-05-24 20:57:17,441:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 20:57:17,442:DEBUG:utils:File found.
2021-05-24 20:57:17,443:DEBUG:utils:The function 'read_cfg' took 2.31 milliseconds to run.
2021-05-24 20:57:17,452:DEBUG:utils:The function 'get_ticker_config_data' took 9.60 milliseconds to run.
2021-05-24 20:57:17,453:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 20:57:17,453:INFO:__main__:Ticker: 'MGLU3 '	Inital date: 01/01/2020		Final date: 04/05/2021
2021-05-24 20:57:17,466:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 20:57:17,477:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 20:57:18,549:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 20:57:19,561:ERROR:db_model:Error executing query "UPDATE hourly_candles hc
SET
  open_price = ROUND(open_price / n.norm_ratio, 2),
  max_price = ROUND(max_price / n.norm_ratio, 2),
  min_price = ROUND(min_price / n.norm_ratio, 2),
  close_price = ROUND(close_price / n.norm_ratio, 2)
FROM
  (SELECT q.ticker, q.date_hour,
    CASE ROUND(q.max_price / dc.max_price, 1) >= 0.9
    WHEN TRUE THEN ROUND(q.max_price / dc.max_price, 0)
    ELSE ROUND(q.max_price / dc.max_price, 6) END AS norm_ratio
  FROM daily_candles dc
  INNER JOIN
    (SELECT ticker, MIN(date_hour) AS date_hour, MAX(max_price) AS max_price
    FROM hourly_candles
    GROUP BY ticker, EXTRACT(YEAR FROM date_hour), EXTRACT(MONTH FROM date_hour), EXTRACT(DAY FROM date_hour)) q
  ON q.ticker = dc.ticker
    AND DATE(dc.day) = DATE(q.date_hour)
  ) n
WHERE
  AND n.ticker = 'PRIO3'
  AND n.ticker = hc.ticker
  AND DATE(n.date_hour) = DATE(hc.date_hour)
  AND n.norm_ratio <> 1;
", error: syntax error at or near "AND"
LINE 21:   AND n.ticker = 'PRIO3'
           ^

2021-05-24 20:58:02,269:INFO:__main__:Program started.
2021-05-24 20:58:02,270:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 20:58:02,271:DEBUG:utils:File found.
2021-05-24 20:58:02,271:DEBUG:utils:The function 'read_cfg' took 0.91 milliseconds to run.
2021-05-24 20:58:02,281:DEBUG:utils:The function 'get_ticker_config_data' took 10.14 milliseconds to run.
2021-05-24 20:58:02,281:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 20:58:02,282:INFO:__main__:Ticker: 'MGLU3 '	Inital date: 01/01/2020		Final date: 04/05/2021
2021-05-24 20:58:02,293:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 20:58:02,303:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 20:58:02,917:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 20:58:04,026:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 20:58:04,027:ERROR:db_model:Error executing query "INSERT INTO daily_candles (ticker, day, open_price, max_price, min_price, close_price, volume)
SELECT agg2.ticker, agg2.date_hour AS day, agg2.open_price, agg2.max_price, agg2.min_price, hc3.close_price, agg2.volume
FROM
	(SELECT agg.ticker, agg.date_hour, hc2.open_price, agg.max_price, agg.min_price, agg.volume, agg.max_date_hour
	FROM
		(SELECT hc.ticker, DATE(hc.date_hour) AS date_hour, MIN(hc.date_hour) AS min_date_hour, MAX(hc.date_hour) AS max_date_hour, MAX(hc.max_price) AS max_price, MIN(hc.min_price) AS min_price, SUM(hc.volume) AS volume
		FROM hourly_candles hc
		LEFT JOIN daily_candles dc ON DATE(dc.day) = DATE(hc.date_hour)
		WHERE
		  dc.day IS NULL
		GROUP BY hc.ticker, DATE(hc.date_hour)) agg
	INNER JOIN hourly_candles hc2 ON hc2.ticker = agg.ticker and hc2.date_hour = agg.min_date_hour) agg2
INNER JOIN hourly_candles hc3 ON hc3.ticker = agg2.ticker and hc3.date_hour = agg2.max_date_hour
WHERE agg.ticker = 'PRIO3'
ON CONFLICT ON CONSTRAINT daily_data_pkey DO NOTHING;", error: missing FROM-clause entry for table "agg"
LINE 14: WHERE agg.ticker = 'PRIO3'
               ^

2021-05-24 20:58:38,378:INFO:__main__:Program started.
2021-05-24 20:58:38,380:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 20:58:38,380:DEBUG:utils:File found.
2021-05-24 20:58:38,381:DEBUG:utils:The function 'read_cfg' took 1.26 milliseconds to run.
2021-05-24 20:58:38,391:DEBUG:utils:The function 'get_ticker_config_data' took 10.16 milliseconds to run.
2021-05-24 20:58:38,391:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 20:58:38,391:INFO:__main__:Ticker: 'MGLU3 '	Inital date: 01/01/2020		Final date: 04/05/2021
2021-05-24 20:58:38,402:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 20:58:38,412:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 20:58:39,288:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 20:58:40,407:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 20:58:41,924:INFO:db_manager:Ticker 'MGLU3' daily candles update finished.
2021-05-24 20:58:46,682:INFO:db_manager:Ticker 'MGLU3' hourly candles update finished.
2021-05-24 20:59:48,050:INFO:__main__:Program started.
2021-05-24 20:59:48,051:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 20:59:48,051:DEBUG:utils:File found.
2021-05-24 20:59:48,051:DEBUG:utils:The function 'read_cfg' took 0.74 milliseconds to run.
2021-05-24 20:59:48,060:DEBUG:utils:The function 'get_ticker_config_data' took 8.62 milliseconds to run.
2021-05-24 20:59:48,060:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 20:59:48,061:INFO:__main__:Ticker: 'MGLU3 '	Inital date: 01/01/2020		Final date: 04/05/2021
2021-05-24 20:59:48,074:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 20:59:48,083:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 20:59:49,030:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 20:59:50,196:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 20:59:51,271:INFO:db_manager:Ticker 'MGLU3' daily candles update finished.
2021-05-24 20:59:53,717:INFO:db_manager:Ticker 'MGLU3' hourly candles update finished.
2021-05-24 21:03:40,211:INFO:__main__:Program started.
2021-05-24 21:03:40,213:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 21:03:40,213:DEBUG:utils:File found.
2021-05-24 21:03:40,214:DEBUG:utils:The function 'read_cfg' took 1.34 milliseconds to run.
2021-05-24 21:03:40,225:DEBUG:utils:The function 'get_ticker_config_data' took 10.56 milliseconds to run.
2021-05-24 21:03:40,225:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 21:03:40,225:INFO:__main__:Ticker: 'MGLU3 '	Inital date: 01/01/2020		Final date: 04/05/2021
2021-05-24 21:03:40,238:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 21:03:40,249:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 21:03:41,162:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 21:03:42,294:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 21:03:43,077:INFO:db_manager:Ticker 'MGLU3' daily candles update finished.
2021-05-24 21:03:45,454:INFO:db_manager:Ticker 'MGLU3' hourly candles update finished.
2021-05-24 21:04:45,672:INFO:__main__:Program started.
2021-05-24 21:04:45,673:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 21:04:45,674:DEBUG:utils:File found.
2021-05-24 21:04:45,674:DEBUG:utils:The function 'read_cfg' took 0.91 milliseconds to run.
2021-05-24 21:04:45,686:DEBUG:utils:The function 'get_ticker_config_data' took 12.14 milliseconds to run.
2021-05-24 21:04:45,687:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 21:04:45,687:INFO:__main__:Ticker: 'MGLU3 '	Inital date: 01/01/2020		Final date: 04/05/2021
2021-05-24 21:04:45,701:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 21:04:45,712:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 21:04:46,422:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 21:04:47,381:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 21:04:48,035:INFO:db_manager:Ticker 'MGLU3' daily candles update finished.
2021-05-24 21:04:50,262:INFO:db_manager:Ticker 'MGLU3' hourly candles update finished.
2021-05-24 21:48:57,147:INFO:__main__:Program started.
2021-05-24 21:48:57,149:DEBUG:utils:Searching for config file in '/Users/atcha/Github/Projeto-Final/config/config.json'.
2021-05-24 21:48:57,149:DEBUG:utils:File found.
2021-05-24 21:48:57,150:DEBUG:utils:The function 'read_cfg' took 1.09 milliseconds to run.
2021-05-24 21:48:57,161:DEBUG:utils:The function 'get_ticker_config_data' took 10.62 milliseconds to run.
2021-05-24 21:48:57,161:INFO:__main__:Ticker: 'PRIO3 '	Inital date: 01/01/2021		Final date: 04/05/2021
2021-05-24 21:48:57,161:INFO:__main__:Ticker: 'MGLU3 '	Inital date: 01/01/2020		Final date: 04/05/2021
2021-05-24 21:48:57,181:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 21:48:57,191:DEBUG:db_model:Database 'StockMarket' connected successfully.
2021-05-24 21:48:58,353:INFO:db_manager:Ticker 'PRIO3' daily candles update finished.
2021-05-24 21:48:59,398:INFO:db_manager:Ticker 'PRIO3' hourly candles update finished.
2021-05-24 21:49:00,039:INFO:db_manager:Ticker 'MGLU3' daily candles update finished.
2021-05-24 21:49:02,604:INFO:db_manager:Ticker 'MGLU3' hourly candles update finished.
